<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Axios</title>
    <url>/2022/07/21/Axios/</url>
    <content><![CDATA[<h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>BFS</title>
    <url>/2022/07/21/BFS/</url>
    <content><![CDATA[<h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><h2 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h2> <img src="https://tu.sunning.fit/i/2022/04/26/6267e2cc561ba.png" alt="image-20220418144835356" style="zoom:80%;" />   

<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e2d5d5ca1.jpg" alt="img"></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> g[N][N],d[N][N];  <span class="comment">//g数组存的是图，d数组存的是每一个点到起点的距离</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line">PII q[N*N],Prev[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh=<span class="number">0</span>,tt=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(hh&lt;=tt)&#123;   <span class="comment">//这就是在这个队列依次读完一遍</span></span><br><span class="line">        <span class="keyword">auto</span> t=q[hh++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;    <span class="comment">//遍历四个方向</span></span><br><span class="line">            <span class="type">int</span> x=t.first+dx[i],y=t.second+dy[i];</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=<span class="number">0</span>&amp;&amp; y&gt;=<span class="number">0</span>&amp;&amp;y&lt;m&amp;&amp;g[x][y]==<span class="number">0</span>&amp;&amp;d[x][y]==<span class="number">-1</span>)&#123;</span><br><span class="line">                q[++tt]=&#123;x,y&#125;;  <span class="comment">//如果有能拓展的点放进去</span></span><br><span class="line">                Prev[x][y]=t;   <span class="comment">//记录之前过来的点</span></span><br><span class="line">                d[x][y]=d[t.first][t.second]+<span class="number">1</span>;   <span class="comment">//距离在上一个的基础上加一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行到这里就能确定最短路径是什么了，下面的是按照Prev结构体依次往上面找上去</span></span><br><span class="line">    <span class="type">int</span> x=n<span class="number">-1</span>,y=m<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x||y)&#123;   <span class="comment">//输出路径是倒着的</span></span><br><span class="line">        cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">auto</span> t=Prev[x][y];</span><br><span class="line">        x=t.first,y=t.second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;g[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="built_in">bfs</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>DFS与BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM</title>
    <url>/2022/07/21/BOM/</url>
    <content><![CDATA[<h1 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h1><p>​	BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。(兼容性会差一点，下面的是没有兼容性的用法)</p>
<p>​	BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626d175fc219c.png" alt="1551319264407"></p>
<p> DOM是浏览器显示的那一块作为DOM,BOM是整个浏览器，包括视窗部分，所以顶级对象是window</p>
<h2 id="BOM的构成"><a href="#BOM的构成" class="headerlink" title="BOM的构成"></a>BOM的构成</h2><p>BOM 比 DOM 更大，它包含 DOM。</p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626d1af828b95.png" alt="1551319344183"></p>
<h2 id="顶级对象window"><a href="#顶级对象window" class="headerlink" title="顶级对象window"></a>顶级对象window</h2><p><img src="https://tu.sunning.fit/i/2022/04/30/626d1ca20973a.png" alt="1551319372909"></p>
<h3 id="页面（窗口）加载事件（2种）"><a href="#页面（窗口）加载事件（2种）" class="headerlink" title="页面（窗口）加载事件（2种）"></a>页面（窗口）加载事件（2种）</h3><p><strong>第1种</strong></p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626d1cea8d188.png" alt="1551319525109"></p>
<p>window.onload 是窗口 (页面）加载事件，<strong>当文档内容完全加载完成</strong>会触发该事件(包括图像、脚本文件、CSS 文件等), 就调用的处理函数。</p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626d1cf5c96c2.png" alt="1551319600263"></p>
<p><strong>第2种</strong></p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626d1d069eecc.png" alt="1551319620299"></p>
<p>​	DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等。</p>
<p>​	IE9以上才支持！！！</p>
<p>​	如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded 事件比较合适。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;点击我&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">33</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h3><p><img src="https://tu.sunning.fit/i/2022/05/01/626e23110f3bb.png" alt="1551319803117"></p>
<p>​	window.onresize 是调整窗口大小加载事件,  当触发时就调用的处理函数。</p>
<p>注意：</p>
<ol>
<li><p>只要窗口大小发生像素变化，就会触发这个事件。</p>
</li>
<li><p>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 注册页面加载事件</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    	<span class="comment">// 注册调整窗口大小事件</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// window.innerWidth 获取窗口大小</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变化了&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">innerWidth</span> &lt;= <span class="number">800</span>) &#123;</span><br><span class="line">                div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="定时器（两种）"><a href="#定时器（两种）" class="headerlink" title="定时器（两种）"></a>定时器（两种）</h1><p>window 对象给我们提供了 2 个非常好用的方法-定时器。</p>
<ul>
<li><p>setTimeout() </p>
</li>
<li><p>setInterval()</p>
</li>
</ul>
<h2 id="setTimeout-炸弹定时器"><a href="#setTimeout-炸弹定时器" class="headerlink" title="setTimeout() 炸弹定时器"></a>setTimeout() 炸弹定时器</h2><h3 id="开启定时器"><a href="#开启定时器" class="headerlink" title="开启定时器"></a>开启定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(调用函数，[延迟的毫秒数]);</span><br></pre></td></tr></table></figure>

<p>setTimeout() 这个调用函数也被称为回调函数callback</p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e2473cd5b7.png" alt="1551320298981"></p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">普通函数是按照代码顺序直接调用。</span><br><span class="line"></span><br><span class="line">简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。</span><br><span class="line">例如：定时器中的调用函数，事件处理函数，也是回调函数。</span><br><span class="line"></span><br><span class="line">以前我们讲的   element.onclick = function()&#123;&#125;   或者  element.addEventListener(“click”, fn);   里面的 函数也是回调函数。</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="comment">// 回调函数是一个匿名函数</span></span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;时间到了&#x27;</span>);</span><br><span class="line">       &#125;, <span class="number">2000</span>);</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 回调函数是一个有名函数</span></span><br><span class="line">      <span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(callback, <span class="number">3000</span>);</span><br><span class="line">      <span class="keyword">var</span> timer2 = <span class="built_in">setTimeout</span>(callback, <span class="number">5000</span>);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="案例：5秒后关闭广告"><a href="#案例：5秒后关闭广告" class="headerlink" title="案例：5秒后关闭广告"></a>案例：5秒后关闭广告</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/ad.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ad&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 获取要操作的元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ad = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ad&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="comment">// 开启定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ad.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">5000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="停止定时器"><a href="#停止定时器" class="headerlink" title="停止定时器"></a>停止定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(<span class="title function_">timeoutID</span>(就是开始定时器的那个名字))</span><br></pre></td></tr></table></figure>

<p>取消先前通过调用setTimeout() 建立的定时器</p>
<blockquote>
<p>window 可以省略</p>
<p>里面的参数就是定时器的标识符</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;button&gt;点击停止定时器&lt;/button&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 开启定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, <span class="number">5000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 给按钮注册单击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 停止定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="built_in">clearTimeout</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="setInterval-闹钟定时器"><a href="#setInterval-闹钟定时器" class="headerlink" title="setInterval() 闹钟定时器"></a>setInterval() 闹钟定时器</h2><h3 id="开启定时器-1"><a href="#开启定时器-1" class="headerlink" title="开启定时器"></a>开启定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setInterval</span>(回调函数,[间隔的毫秒数]);</span><br></pre></td></tr></table></figure>

<p>重复调用一个函数,每间隔这个时间,就去调用一次回调函数</p>
<blockquote>
<ol>
<li>window方法可以省略</li>
<li>调用函数可以直接写函数,或者写函数名,或者 字符串’ 函数名 ‘ 三种</li>
<li>间隔的毫秒数默认是0,如果写,只能写毫秒,表示每间隔多少秒就自动调用这个函数</li>
<li>因为定时器可能有很多,所以我们经常给定时器赋值一个标识符</li>
<li>第一次执行也是间隔多少毫秒数之后执行,之后每间隔毫秒数就执行一次</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. setInterval </span></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继续输出&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="案例：倒计时"><a href="#案例：倒计时" class="headerlink" title="案例：倒计时"></a>案例：倒计时</h3><p><img src="https://tu.sunning.fit/i/2022/05/01/626e28e7e8974.png" alt="1551321298787"></p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e28ea5425f.png" alt="1551321322188"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hour&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;minute&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;second&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 获取元素（时分秒盒子） </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> hour = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hour&#x27;</span>); <span class="comment">// 小时的黑色盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> minute = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.minute&#x27;</span>); <span class="comment">// 分钟的黑色盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> second = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.second&#x27;</span>); <span class="comment">// 秒数的黑色盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-5-1 18:00:00&#x27;</span>); <span class="comment">// 返回的是用户输入时间总的毫秒数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">countDown</span>(); <span class="comment">// 我们先调用一次这个函数，防止第一次刷新页面有空白 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 开启定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setInterval</span>(countDown, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">//时</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        hour.<span class="property">innerHTML</span> = h; <span class="comment">// 把剩余的小时给 小时黑色盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        minute.<span class="property">innerHTML</span> = m;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        second.<span class="property">innerHTML</span> = s;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="停止定时器-1"><a href="#停止定时器-1" class="headerlink" title="停止定时器"></a>停止定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(intervalID)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>还是老样子:</p>
<ol>
<li>window可以省略</li>
<li>里面的参数就是定时器的标识符</li>
</ol>
</blockquote>
<h3 id="案例：发送短信倒计时"><a href="#案例：发送短信倒计时" class="headerlink" title="案例：发送短信倒计时"></a>案例：发送短信倒计时</h3><p>​	点击按钮后，该按钮60秒之内不能再次点击，防止重复发送短信。</p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e2a317e448.png" alt="1551321540676"></p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e2a34aef0d.png" alt="1551321564247"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  手机号码： &lt;input type=<span class="string">&quot;number&quot;</span>&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 全局变量，定义剩下的秒数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> time = <span class="number">3</span>; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 注册单击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 禁用按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          btn.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 开启定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">// 判断剩余秒数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="comment">// 清除定时器和复原按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="built_in">clearInterval</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  btn.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  btn.<span class="property">innerHTML</span> = <span class="string">&#x27;发送&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  btn.<span class="property">innerHTML</span> = <span class="string">&#x27;还剩下&#x27;</span> + time + <span class="string">&#x27;秒&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  time--;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h1><p>​	this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，一般情况下this的最终指向的是那个调用它的对象。</p>
<p>现阶段，我们先了解一下几个this指向</p>
<ol>
<li><p>全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window）</p>
</li>
<li><p>方法调用中谁调用this指向谁</p>
</li>
<li><p>构造函数中this指向构造函数的实例</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="title function_">fn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 方法调用中谁调用this指向谁</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是 o 这个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    o.<span class="title function_">sayHi</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 事件处理函数中的this指向的是btn这个按钮对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3. 构造函数中this指向构造函数的实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this 指向的是fun 实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h1 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h1><blockquote>
<p>window对象给我们提供了一个location属性用于获取或设置窗体的url，并可以用于解析url,因为这个属性返回的是一个对象，所以也被成为location对象</p>
</blockquote>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><img src="https://tu.sunning.fit/i/2022/05/01/626e4d301da48.png" alt="1551322373704"></p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e4d40a3426.png" alt="1551322387201"></p>
<p>query 参数 name&#x3D;andy &amp; age&#x3D;18 就是两个参数</p>
<p>#link 是片段</p>
<h2 id="location-对象的属性"><a href="#location-对象的属性" class="headerlink" title="location 对象的属性"></a>location 对象的属性</h2><p><img src="https://tu.sunning.fit/i/2022/05/01/626e534254e1f.png" alt="1551322416716"></p>
<blockquote>
<p>href和search（返回的是参数）比较常用</p>
</blockquote>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例：5分钟自动跳转页面"><a href="#案例：5分钟自动跳转页面" class="headerlink" title="案例：5分钟自动跳转页面"></a>案例：5分钟自动跳转页面</h3><p><img src="https://tu.sunning.fit/i/2022/05/01/626e5629543ff.png" alt="1551322496871"></p>
<blockquote>
<p>定时器做倒计时效果</p>
<p>时间到了，就跳转页面，用location.href</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(location.href);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        location.<span class="property">href</span> = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> timer = <span class="number">5</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (timer == <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            location.<span class="property">href</span> = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            div.<span class="property">innerHTML</span> = <span class="string">&#x27;您将在&#x27;</span> + timer + <span class="string">&#x27;秒钟之后跳转到首页&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            timer--;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="案例：获取URL参数"><a href="#案例：获取URL参数" class="headerlink" title="案例：获取URL参数"></a>案例：获取URL参数</h3><p>两个页面，第一个页面输入数据，然后传递到第二个页面去</p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e8963e7d0e.png" alt="1551322622640"></p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e8966ee697.png" alt="1551322639241"></p>
<p>第一个页面 login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span>  //有表单按钮，input页面才能进行提交，提交的位置在index.html</span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一个页面会传递给第二个页面  ？uname&#x3D;”input输入的内容”</p>
<p>第二个页面 index.html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   &lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>); <span class="comment">// ?uname=andy</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// 1.先去掉？  substr(&#x27;起始的位置&#x27;，截取几个字符);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">// uname=andy   substr(1)从第一个下标开始截取，后面的参数省略，就是全部截取</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// 2. 利用=把字符串分割为数组 split(&#x27;=&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">var</span> arr = params.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);   <span class="comment">//用&quot;等于号&quot;作为分隔符</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&quot;uname&quot;, &quot;ANDY&quot;]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// 3.把数据写入div中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       div.<span class="property">innerHTML</span> = arr[<span class="number">1</span>] + <span class="string">&#x27;欢迎您&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="location对象的常见方法"><a href="#location对象的常见方法" class="headerlink" title="location对象的常见方法"></a>location对象的常见方法</h3><table>
<thead>
<tr>
<th>location对象方法</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>location.assign()</td>
<td>跟href一样，也可以跳转页面（也成为重定向页面）（记录浏览历史，可以后退页面）</td>
</tr>
<tr>
<td>location.replace()</td>
<td>替换当前页面，因为不记录历史，所以不能后退页面</td>
</tr>
<tr>
<td>location.reload()</td>
<td>重新加载页面，相当于刷新按钮或者f5或者f5,如果参数为true是强制刷新，相当于ctrl+f5</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 记录浏览历史，所以可以实现后退功能</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// location.assign(&#x27;http://www.itcast.cn&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 不记录浏览历史，所以不可以实现后退功能</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// location.replace(&#x27;http://www.itcast.cn&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        location.<span class="title function_">reload</span>(<span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h1><p>​	navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</p>
<p>下面前端代码可以判断用户那个终端打开页面，实现跳转</p>
<p>直接放在html最开始的script里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;     <span class="comment">//手机</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;     <span class="comment">//电脑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h1><p>​	window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e9005567f9.png" alt="1551322885216"></p>
<p>history对象一般在实际开发中比较少用，但是会在一些 OA 办公系统中见到。</p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e900a4bb74.png" alt="1551322959148"></p>
<h1 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h1><h2 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h2><blockquote>
<p> <strong>JS是单线程</strong></p>
<p>也就是同一个时间只能做一件事。这是因为js这门脚本语言诞生的使命所致——javascript是为处理页面中用户的交互，以及操作dom诞生的，比如如果对某个dom元素进行添加和删除操作，不能同时进行，应该先进行添加，之后再删除</p>
<p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br>这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p>
<p>单线程导致的问题就是后面的任务等待前面任务完成，如果前面任务很耗时（比如读取网络数据），后面任务不得不一直等待！！</p>
<p>​	为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制。于是，JS 中出现了<strong>同步任务</strong>和<strong>异步任务</strong>。	</p>
</blockquote>
<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>​	前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>​	你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p>
<p><strong>本质区别：这条流水线上的各个流程的执行顺序不同</strong></p>
<blockquote>
<p>JS中所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。</p>
<p>同步任务指的是：<br>    在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；<br>异步任务指的是：<br>    不进入主线程、而进入”任务队列”的任务，当主线程中的任务运行完了，才会从”任务队列”取出异步任务放入主线程执行。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>相当于比较花时间的放到后面去执行</p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e97e4e7f05.png" alt="1551434972778"></p>
<h2 id="JS执行机制（事件循环）"><a href="#JS执行机制（事件循环）" class="headerlink" title="JS执行机制（事件循环）"></a>JS执行机制（事件循环）</h2><p><img src="https://tu.sunning.fit/i/2022/05/01/626e9adccb163.png" alt="1551435335464"></p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e9adaec55f.png" alt="1551435398306"></p>
<p><img src="/BOM.assets/1551435449634.png" alt="1551435449634"></p>
<h2 id="代码思考题"><a href="#代码思考题" class="headerlink" title="代码思考题"></a>代码思考题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>Clion使用</title>
    <url>/2022/07/21/Clion%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="调试与监视窗口"><a href="#调试与监视窗口" class="headerlink" title="调试与监视窗口"></a>调试与监视窗口</h1><p><img src="https://tu.sunning.fit/i/2022/07/12/62cd4273260c8.png" alt="Untitled"></p>
<h1 id="Cppcheck使用"><a href="#Cppcheck使用" class="headerlink" title="Cppcheck使用"></a>Cppcheck使用</h1><p>当发现有一个Cppcheck检查出来的错误的时候，点击显示快速修复，然后在弹出来的窗口选择检查整个代码，就能出来Cppcheck检查的代码了</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd427750850.png" alt="Untitled"></p>
<p>这里可以定义新建的文件模板是什么</p>
<p>注意#include开头的代码要用#[ [ ] ]</p>
<h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h1><h2 id="关掉双击全局搜索"><a href="#关掉双击全局搜索" class="headerlink" title="关掉双击全局搜索"></a>关掉双击全局搜索</h2><p>想要全局搜索 ctrl+shift+a 选全局</p>
<p>选中这个就关掉了E</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd427b31210.png" alt="Untitled"></p>
<h2 id="Linux-IDEA-Jetbrains-Fcitx-输入法光标不跟随"><a href="#Linux-IDEA-Jetbrains-Fcitx-输入法光标不跟随" class="headerlink" title="Linux-IDEA-Jetbrains-Fcitx-输入法光标不跟随"></a>Linux-IDEA-Jetbrains-Fcitx-输入法光标不跟随</h2><p>jbr的问题</p>
<p><a href="https://wiki.archlinux.org/title/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#IntelliJ_%E7%B3%BB%E5%88%97%E8%BD%AF%E4%BB%B6%E7%9A%84_IDE_%E4%B8%AD%E8%BE%93%E5%85%A5%E6%A1%86%E4%BD%8D%E7%BD%AE%E4%B8%8D%E6%AD%A3%E7%A1%AE">Fcitx5 (简体中文)</a></p>
<p>下载，解压到任意一个位置，然后ctrl+shift+a，搜索</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd42884f296.png" alt="Untitled"></p>
<p>把需要解压的对应位置粘贴到上面的位置选项框即可</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd427fded13.png" alt="Untitled"></p>
<ul>
<li><p>乱七八糟的自动延迟</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/12/62cd428f2c5ab.png" alt="Untitled"></p>
</li>
</ul>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd42955808e.png" alt="Untitled"></p>
<h1 id="刷题的配置"><a href="#刷题的配置" class="headerlink" title="刷题的配置"></a>刷题的配置</h1><p>clion单文件运行程序配置</p>
<p>插件</p>
<p><strong>Single File Execution Plugin</strong></p>
<ul>
<li><p>使用方法</p>
<p>右键 ctrl+shift+alt+E</p>
<p>然后重新加载cmake文件即可</p>
</li>
</ul>
<p>clion 进行 LeetCode 刷题 &amp; 本地 Debug</p>
<p><a href="http://liuxiao.org/2019/12/%E4%BD%BF%E7%94%A8-clion-%E8%BF%9B%E8%A1%8C-leetcode-%E5%88%B7%E9%A2%98-%E6%9C%AC%E5%9C%B0-debug/">使用 CLion 进行 LeetCode 刷题 &amp; 本地 Debug</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>clion使用</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS</title>
    <url>/2022/07/21/DFS/</url>
    <content><![CDATA[<h1 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h1><table>
<thead>
<tr>
<th></th>
<th>数据结构</th>
<th>空间</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>DFS</td>
<td>栈</td>
<td>O(h) 因为一条路走到黑，所以之和高度有关</td>
<td>不具最短性 回溯 剪枝</td>
</tr>
<tr>
<td>BFS</td>
<td>堆</td>
<td>O(2的h次方)，空间每一层的数都要记下来</td>
<td>最短路径</td>
</tr>
</tbody></table>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="排列数字"><a href="#排列数字" class="headerlink" title="排列数字"></a>排列数字</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e24429fba.jpg" alt="img"></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>关键是找到递归的位置，递归之后恢复现场</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            st[i]=<span class="literal">true</span>;</span><br><span class="line">            path[u]=i;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);   <span class="comment">//在这里是DFS的递归,这一层搜完了，该搜索下面一层了</span></span><br><span class="line">            st[i]=<span class="literal">false</span>;  <span class="comment">//如果执行到这里说明从上面一行语句的递归里面出来了，</span></span><br><span class="line">            <span class="comment">// 该马上恢复现场了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>完整题解</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == n)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; u; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,path[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            st[i]=<span class="literal">true</span>;</span><br><span class="line">            path[u]=i;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);   <span class="comment">//在这里是DFS的递归,这一层搜完了，该搜索下面一层了</span></span><br><span class="line">            st[i]=<span class="literal">false</span>;  <span class="comment">//如果执行到这里说明从上面一行语句的递归里面出来了，</span></span><br><span class="line">            <span class="comment">// 该马上恢复现场了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h2 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e24a89a66.jpg" alt="img"></p>
<h3 id="题解一"><a href="#题解一" class="headerlink" title="题解一"></a>题解一</h3><p>像全排列一样思考 先看第一行枚举在哪个位置，然后看下一行在哪个位置<br>剪枝 如果在枚举某个情况的时候出现已经不可能完成的情况，就直接返回</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> g[N][N];  <span class="comment">//用来存整个棋盘</span></span><br><span class="line"><span class="type">int</span> col[<span class="number">2</span>*N],dg[<span class="number">2</span>*N],udg[<span class="number">2</span>*N];<span class="comment">//用来存每一竖列，对角，反对角有没有用过</span></span><br><span class="line"><span class="comment">//对角线的用法是 y=x+b ，x=y-b,用dg[y-b]存的就是y-b用来记录y-b这个斜线有没有被用过</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;    <span class="comment">//这个dfs(u) 这个x代表的是深搜到了第几行</span></span><br><span class="line">    <span class="keyword">if</span>(u == n)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(g[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!col[i] &amp;&amp; !dg[u+i] &amp;&amp; !udg[n-u+i])&#123;</span><br><span class="line">            g[u][i]=<span class="string">&#x27;Q&#x27;</span>;   </span><br><span class="line">            col[i]=dg[u+i]=udg[n-u+i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(u+<span class="number">1</span>);   <span class="comment">//dfs之前进行标记</span></span><br><span class="line">            col[i]=dg[u+i]=udg[n-u+i]=<span class="literal">false</span>;  <span class="comment">//dfs之后还原现场</span></span><br><span class="line">            g[u][i]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">            g[i][j]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<h3 id="怎么用一维数组表示对角线和反对角线"><a href="#怎么用一维数组表示对角线和反对角线" class="headerlink" title="怎么用一维数组表示对角线和反对角线"></a>怎么用一维数组表示对角线和反对角线</h3><p>以下图为例，看这些斜线满足什么样的性质,注意图的坐标轴和点是什么</p>
<img align='left' src="https://tu.sunning.fit/i/2022/04/26/6267e24fe5825.png" alt="img" style="zoom:33%;" />

<p>发现蓝色斜线上的坐标(x,y)满足 x-y&#x3D;&#x3D;1</p>
<p>红色斜线上的坐标(x,y) 满足x-y&#x3D;&#x3D;0</p>
<p>粉色斜线上的坐标(x,y) 满足x-y&#x3D;&#x3D;-1</p>
<p>因为c语言数组下标没有负数，所以要把x-y+n 作为数组的下标，这时编号为</p>
<p>1~(2*n-1)</p>
<img align='left' src="https://tu.sunning.fit/i/2022/04/26/6267e2538efbd.png" alt="image-20220414221308219" style="zoom:150%;" />

<p>这边的编号用x+y来进行编号，编号的范围为2~8</p>
<p>因为普遍用1当作数组的下标，所以用x+y-1作为下标也ok</p>
<p><strong>一定要注意用这种方法数组的下标容易越界，造成错误</strong></p>
<p><strong>容易越界</strong></p>
<p><strong>容易越界</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> col[<span class="number">2</span>*N],dg[<span class="number">2</span>*N],udg[<span class="number">2</span>*N];<span class="comment">//用来存每一竖列，对角，反对角有没有用过</span></span><br><span class="line"><span class="comment">//对角线的用法是 y=x+b ，x=y-b,用dg[y-b]存的就是y-b用来记录y-b这个斜线有没有被用过</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p><strong>坑：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == <span class="number">8</span>)&#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!col[i] &amp;&amp; !dg[u + i] &amp;&amp; !ueg[i - u + <span class="number">8</span>])&#123;</span><br><span class="line">                col[i]= dg[u + i]= ueg[i - u + <span class="number">8</span>]=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">                col[i]= dg[u + i]= ueg[i - u + <span class="number">8</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样写是错的，因为return之后是进行下面的深搜</p>
<p>所有的深搜都不能return数值否则会错误 ！</p>
</blockquote>
<h3 id="题解二"><a href="#题解二" class="headerlink" title="题解二"></a>题解二</h3><p>问题的思考由上面的每一层，变成对于每一个点的思考，对于每一个点，有放皇后和不放皇后两种可能性</p>
<p>放皇后的时候记得什么时候的下一步和还原</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="type">bool</span> row[N],col[N],dg[N],edg[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y,<span class="type">int</span> s)</span></span>&#123;    <span class="comment">//s 是记录当前有多少个皇后的</span></span><br><span class="line">    <span class="keyword">if</span>(y==n) y=<span class="number">0</span>,x++;  <span class="comment">//到了每一行的末尾，接着进入到下一行</span></span><br><span class="line">    <span class="keyword">if</span>(x==n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==n)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">puts</span>(g[i]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不放皇后</span></span><br><span class="line">    <span class="built_in">dfs</span>(x,y+<span class="number">1</span>,s);</span><br><span class="line">    <span class="comment">//放皇后</span></span><br><span class="line">    <span class="keyword">if</span>(!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp; !edg[n + x - y])&#123;</span><br><span class="line">        g[x][y]=<span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        row[x]=col[y]=dg[x + y]=edg[n+x-y]=<span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x, y + <span class="number">1</span>,s+<span class="number">1</span>);</span><br><span class="line">        row[x]=col[y]=dg[x + y]=edg[n+x-y]=<span class="literal">false</span>;</span><br><span class="line">        g[x][y]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            g[i][j]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>会下国际象棋的人都很清楚：皇后可以在横、竖、斜线上不限步数地吃掉其他棋子。</p>
<p>如何将 88 个皇后放在棋盘上（有 8×88×8 个方格），使它们谁也不能被吃掉！</p>
<p>这就是著名的八皇后问题。</p>
<p>对于某个满足要求的 88 皇后的摆放方法，定义一个皇后串 aa 与之对应，即 a&#x3D;b1b2…b8a&#x3D;b1b2…b8，其中 bibi 为相应摆法中第 ii 行皇后所处的列数。</p>
<p>已经知道 88 皇后问题一共有 9292 组解（即 9292 个不同的皇后串）。</p>
<p>给出一个数 bb，要求输出第 bb 个串。</p>
<p>串的比较是这样的：皇后串 xx 置于皇后串 yy 之前，当且仅当将 xx 视为整数时比 yy 小。</p>
<p>输入格式</p>
<p>第一行包含整数 nn，表示共有 nn 组测试数据。</p>
<p>每组测试数据占 11 行，包括一个正整数 bb。</p>
<p>输出格式</p>
<p>输出有 nn 行，每行输出对应一个输入。</p>
<p>输出应是一个正整数，是对应于 bb 的皇后串。</p>
<p>数据范围</p>
<p>1≤b≤921≤b≤92</p>
<p>输入样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">1</span><br><span class="line">92</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15863724</span><br><span class="line">84136275</span><br></pre></td></tr></table></figure>



<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>, E = <span class="number">8</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"><span class="type">bool</span> col[N], dg[N], udg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == E) &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; E; i ++ ) sum = sum * <span class="number">10</span> + (path[i] + <span class="number">1</span>);</span><br><span class="line">        v.<span class="built_in">push_back</span>(sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; E; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!col[i] &amp;&amp; !dg[i - u + E] &amp;&amp; !udg[i + u]) &#123;</span><br><span class="line">            path[u] = i;</span><br><span class="line">            col[i] = <span class="literal">true</span>, dg[i-u+E] = <span class="literal">true</span>, udg[i+u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">            col[i] = <span class="literal">false</span>, dg[i-u+E] = <span class="literal">false</span>, udg[i+u] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v[x<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>DFS与BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Echarts数据可视化</title>
    <url>/2022/07/21/Echarts%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h1><blockquote>
<ul>
<li>是一个JS插件</li>
<li>性能好可流畅运行PC与移动设备</li>
<li>兼容主流浏览器</li>
<li>提供很多常用图表，且可<strong>定制</strong>。</li>
</ul>
</blockquote>
<h2 id="使用五步曲"><a href="#使用五步曲" class="headerlink" title="使用五步曲"></a>使用五步曲</h2><ul>
<li>引入echarts dist&#x2F;echarts.min.js</li>
<li>准备一个具备大小的DOM容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;main&quot; style=&quot;width: 600px;height:400px;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化echarts实例对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myChart = echarts.init(document.getElementById(&#x27;main&#x27;));</span><br></pre></td></tr></table></figure>

<ul>
<li>指定配置项和数据(option)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var option = &#123;</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: &#x27;category&#x27;,</span><br><span class="line">        data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: &#x27;value&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class="line">        type: &#x27;line&#x27;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>将配置项设置给echarts实例对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myChart.setOption(option);</span><br></pre></td></tr></table></figure>

<h2 id="基础配置项"><a href="#基础配置项" class="headerlink" title="基础配置项"></a>基础配置项</h2><ul>
<li>series 是个数组里面放着若干对象<ul>
<li>系列列表。每个系列通过 type 决定自己的图表类型</li>
<li>大白话：图标数据，指定什么类型的图标，可以多个图表重叠。</li>
<li>属性<ul>
<li>type类型（什么类型的图表）,line是折线图，bar柱形图</li>
<li>name系列名称 用于tooltip显示 and legend 的图例筛选变化</li>
<li>stack 数据堆叠 如果设置相同值，则会数据堆叠<ul>
<li>第二个数据值&#x3D;第一个数据值+第二个数据值</li>
<li>第三个数据值&#x3D;第二个数据值+第三个数据值</li>
<li>如果给stack指定不同值或者去掉这个属性则不会发生数据堆叠</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>xAxis：直角坐标系 grid 中的 x 轴<ul>
<li>boundaryGap: 坐标轴两边留白策略 true，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。</li>
<li>用data数组来显示里面的数据</li>
<li>boundaryGap;<ul>
<li>true <img src="/Echarts%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/62624a955d61f.png" alt="image-20220422142626576"></li>
<li>false <img src="/Echarts%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/62624ace08f5e.png" alt="image-20220422142723610"></li>
</ul>
</li>
</ul>
</li>
<li>yAxis：直角坐标系 grid 中的 y 轴</li>
<li>grid：直角坐标系内绘图网格。</li>
<li>title：标题组件</li>
<li>tooltip：提示框组件</li>
<li>legend：图例组件</li>
<li>color：调色盘颜色列表</li>
</ul>
<p>用option包在一起，这也是一个对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var option = &#123;</span><br><span class="line">            color: [&#x27;pink&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;skyblue&#x27;, &#x27;red&#x27;],</span><br><span class="line">            title: &#123;   //标题</span><br><span class="line">                text: &#x27;我的折线图&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            tooltip: &#123;   //提示框组建</span><br><span class="line">                trigger: &#x27;axis&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            legend: &#123;    //图例</span><br><span class="line">                data: [&#x27;直播营销&#x27;, &#x27;联盟广告&#x27;, &#x27;视频广告&#x27;, &#x27;直接访问&#x27;]</span><br><span class="line">            &#125;,</span><br><span class="line">            grid: &#123;   //左右留白，对于所在的容器来说</span><br><span class="line">                left: &#x27;3%&#x27;,</span><br><span class="line">                right: &#x27;3%&#x27;,</span><br><span class="line">                bottom: &#x27;3%&#x27;,</span><br><span class="line">                // 当刻度标签溢出的时候，grid 区域是否包含坐标轴的刻度标签。如果为true，则显示刻度标签</span><br><span class="line">                // 如果left right等设置为 0% 刻度标签就溢出了，此时决定是否显示刻度标签</span><br><span class="line">                containLabel: true</span><br><span class="line">            &#125;,</span><br><span class="line">            toolbox: &#123;   //工具栏</span><br><span class="line">                feature: &#123;  </span><br><span class="line">                    saveAsImage: &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            xAxis: &#123;</span><br><span class="line">                type: &#x27;category&#x27;,</span><br><span class="line">                // 坐标轴两边留白策略 true，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。</span><br><span class="line">                boundaryGap: false,</span><br><span class="line">                data: [&#x27;星期一&#x27;, &#x27;星期二&#x27;, &#x27;周三&#x27;, &#x27;周四&#x27;, &#x27;周五&#x27;, &#x27;周六&#x27;, &#x27;周日&#x27;]</span><br><span class="line">            &#125;,</span><br><span class="line">            yAxis: &#123;</span><br><span class="line">                type: &#x27;value&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            series: [</span><br><span class="line">                &#123;</span><br><span class="line">                    name: &#x27;直播营销&#x27;,</span><br><span class="line">                    // 图表类型是线形图</span><br><span class="line">                    type: &#x27;line&#x27;,</span><br><span class="line">                    data: [120, 132, 101, 134, 90, 230, 210]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name: &#x27;联盟广告&#x27;,</span><br><span class="line">                    type: &#x27;line&#x27;,</span><br><span class="line"></span><br><span class="line">                    data: [220, 182, 191, 234, 290, 330, 310]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name: &#x27;视频广告&#x27;,</span><br><span class="line">                    type: &#x27;line&#x27;,</span><br><span class="line"></span><br><span class="line">                    data: [150, 232, 201, 154, 190, 330, 410]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name: &#x27;直接访问&#x27;,</span><br><span class="line">                    type: &#x27;line&#x27;,</span><br><span class="line"></span><br><span class="line">                    data: [320, 332, 301, 334, 390, 330, 320]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/04/30/626ca858e3f7b.png" alt="image-20220422144607941"></p>
<h1 id="REM适配"><a href="#REM适配" class="headerlink" title="REM适配"></a>REM适配</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>Echarts数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>GUI</title>
    <url>/2022/07/21/GUI/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Java提供了三个主要包做GUI开发：</p>
<p>java.awt 包 – 主要提供字体&#x2F;布局管理器</p>
<p>javax.<a href="https://so.csdn.net/so/search?q=swing&spm=1001.2101.3001.7020">swing</a> 包[商业开发常用] – 主要提供各种组件(窗口&#x2F;按钮&#x2F;文本框)</p>
<p>java.awt.event 包 – 事件处理，后台功能的实现。</p>
<h1 id="Swing组件"><a href="#Swing组件" class="headerlink" title="Swing组件"></a>Swing组件</h1><p>（1）顶层容器:：常用有JFrame，JDialog</p>
<p>（2）中间容器：JPanel，JOptionPane，JScrollPane，JLayeredPane 等，主要以panel结尾。</p>
<p>（3）基本组件：JLabel，JButton，JTextField，JPasswordField，JRadioButton 等。</p>
<p><img src="https://tu.sunning.fit/i/2022/06/05/629c621089b6c.png" alt="image-20220605155801618"></p>
<h2 id="顶层容器"><a href="#顶层容器" class="headerlink" title="顶层容器"></a>顶层容器</h2><table>
<thead>
<tr>
<th>#</th>
<th>组件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>JFrame</td>
<td>一个普通的窗口（绝大多数 Swing 图形界面程序使用 JFrame 作为顶层容器）</td>
</tr>
<tr>
<td>2</td>
<td>JDialog</td>
<td>对话框</td>
</tr>
</tbody></table>
<h2 id="中间容器"><a href="#中间容器" class="headerlink" title="中间容器"></a>中间容器</h2><table>
<thead>
<tr>
<th>组件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>JPanel (相当于div)</td>
<td>一般轻量级面板容器组件(作为JFrame中间容器)</td>
</tr>
<tr>
<td>JScrollPane</td>
<td>带滚动条的，可以水平和垂直滚动的面板组件</td>
</tr>
<tr>
<td>JSplitPane</td>
<td>分隔面板</td>
</tr>
<tr>
<td>JTabbedPane</td>
<td>选项卡面板</td>
</tr>
<tr>
<td>JLayeredPane</td>
<td>层级面板</td>
</tr>
</tbody></table>
<h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><table>
<thead>
<tr>
<th align="left">#</th>
<th>组件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td>JLabel</td>
<td>标签</td>
</tr>
<tr>
<td align="left">2</td>
<td>JButton</td>
<td>按钮</td>
</tr>
<tr>
<td align="left">3</td>
<td>JRadioButton</td>
<td>单选按钮</td>
</tr>
<tr>
<td align="left">4</td>
<td>JCheckBox</td>
<td>复选框</td>
</tr>
<tr>
<td align="left">5</td>
<td>JToggleButton</td>
<td>开关按钮</td>
</tr>
<tr>
<td align="left">6</td>
<td>JTextField</td>
<td>文本框</td>
</tr>
<tr>
<td align="left">7</td>
<td>JPasswordField</td>
<td>密码框</td>
</tr>
<tr>
<td align="left">8</td>
<td>JTextArea</td>
<td>文本区域</td>
</tr>
<tr>
<td align="left">9</td>
<td>JComboBox</td>
<td>下拉列表框</td>
</tr>
<tr>
<td align="left">10</td>
<td>JList</td>
<td>列表</td>
</tr>
<tr>
<td align="left">11</td>
<td>JProgressBar</td>
<td>进度条</td>
</tr>
<tr>
<td align="left">12</td>
<td>JSlider</td>
<td>滑块</td>
</tr>
</tbody></table>
<h1 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h1><h2 id="Jframe组件"><a href="#Jframe组件" class="headerlink" title="Jframe组件"></a>Jframe组件</h2><table>
<thead>
<tr>
<th>JFrame frame &#x3D; new JFrame(“HelloWorldSwing”);</th>
<th>创建及设置窗口</th>
</tr>
</thead>
<tbody><tr>
<td>frame.setDefaultLookAndFeelDecorated(true);</td>
<td>确保一个漂亮的外观风格</td>
</tr>
<tr>
<td>frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</td>
<td>设置默认的关闭窗口</td>
</tr>
<tr>
<td>frame.pack();</td>
<td>设置到最合适的大小</td>
</tr>
<tr>
<td>frame.setVisible(true);</td>
<td>这个最好放在最后，不然会出现视图看不到的情况</td>
</tr>
<tr>
<td>frame.setBounds(600, 300, 500, 400);</td>
<td>设置窗口的x,y位置，窗口大小x,y.</td>
</tr>
<tr>
<td>frame.add(panel)</td>
<td>添加panel面板到容器</td>
</tr>
<tr>
<td>frmIpa.getContentPane().add(panel, BorderLayout.NORTH);</td>
<td>添加面板到主窗口，布局在北面</td>
</tr>
<tr>
<td>frmIpa.getContentPane().add(scrollPane, BorderLayout.CENTER);</td>
<td>添加可滚动面板到主窗口，布局在中间</td>
</tr>
</tbody></table>
<h2 id="Panel组件"><a href="#Panel组件" class="headerlink" title="Panel组件"></a>Panel组件</h2><p><strong>Jpanel</strong></p>
<table>
<thead>
<tr>
<th>JPanel panel &#x3D; new JPanel();</th>
<th>创建面板容器</th>
</tr>
</thead>
<tbody><tr>
<td>panel.add(button);</td>
<td>添加按钮到面板</td>
</tr>
</tbody></table>
<p><strong>JOptionPane</strong></p>
<table>
<thead>
<tr>
<th>JOptionPane.showMessageDialog(panel3, “没有选中任何文件”, “提示”, JOptionPane.WARNING_MESSAGE);</th>
<th>弹出提示框到panel容器</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>JScrollPane</strong></p>
<table>
<thead>
<tr>
<th>JScrollPane scrollPane &#x3D; new JScrollPane();</th>
<th>创建可滚动面板</th>
</tr>
</thead>
<tbody><tr>
<td>scrollPane.setViewportView(textArea);</td>
<td>设置面板内容</td>
</tr>
</tbody></table>
<h2 id="功能组件"><a href="#功能组件" class="headerlink" title="功能组件"></a>功能组件</h2><p><strong>JLabel</strong></p>
<table>
<thead>
<tr>
<th>JLabel label &#x3D; new JLabel(“Hello World”);</th>
<th>添加标签</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>Jbutton</strong></p>
<table>
<thead>
<tr>
<th>JButton button &#x3D; new JButton(“选择文件”);</th>
<th>创建按钮</th>
</tr>
</thead>
<tbody><tr>
<td>button.addActionListener(new ActionListener() {}</td>
<td>添加操作按钮后的事件监听器</td>
</tr>
</tbody></table>
<p><strong>JFileChooser</strong></p>
<table>
<thead>
<tr>
<th>jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES );</th>
<th>&#x2F;&#x2F; 设置文件对话框</th>
</tr>
</thead>
<tbody><tr>
<td>jfc.showSaveDialog(frmIpa);</td>
<td>&#x2F;&#x2F; 显示打开的文件对话框</td>
</tr>
<tr>
<td>jfc.getSelectedFile();</td>
<td>&#x2F;&#x2F; 获取选择器选择的文件</td>
</tr>
</tbody></table>
<p><strong>JTextArea</strong></p>
<table>
<thead>
<tr>
<th>JTextArea textArea &#x3D; new JTextArea();</th>
<th>创建文本区域</th>
</tr>
</thead>
<tbody><tr>
<td>textArea.setText(content);</td>
<td>设置内容</td>
</tr>
</tbody></table>
<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="FlowLayout布局-顺序布局"><a href="#FlowLayout布局-顺序布局" class="headerlink" title="FlowLayout布局(顺序布局)"></a>FlowLayout布局(顺序布局)</h2><p>按照add的顺序，从左到右，从上到下摆放组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xxx.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">xxx.getContentPane().add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮1&quot;</span>));</span><br><span class="line"> <span class="comment">//添加一个按钮到容器上面往容器上面添加按钮button1。注意如果是往AWT中的Frame容器对象上面添加任何组件的话,都是调用该对象的add方法,以组件对象名作为参数添加即可。但对于Swing中的JFrame,必须先通过getContentPane()方法获取其内容面板,然后再调用add方法添加组件。</span></span><br><span class="line">add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮2&quot;</span>));</span><br><span class="line">add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮3&quot;</span>));</span><br><span class="line">add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮4&quot;</span>));</span><br><span class="line">add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮5&quot;</span>));</span><br><span class="line">pack();</span><br><span class="line"> <span class="comment">//使界面上的元素在程序一运行之后,就全部显示出来。</span></span><br></pre></td></tr></table></figure>

<h1 id="BorderLayout布局-边界布局"><a href="#BorderLayout布局-边界布局" class="headerlink" title="BorderLayout布局(边界布局)"></a>BorderLayout布局(边界布局)</h1><p>这种布局会把容器上的组件按照东西南北中各个方位进行排列。可以通过参数具体指定某个组件在东西南北中的哪一个方向。</p>
<p>通过这种布局,可以把容器细分为几个部分,以便设置更好的界面。请注意并不是一定要东西南北中五个方向都要放组件的。不足五个的组件同样可以分别被指定放在容器上东西南北中的任何一个方位。自己可以尝试放置少于五个组件的情况。</p>
<p>Frame容器的默认布局就是BorderLayout</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jf=<span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;这是一个演示BorderLayout布局的例子程序&quot;</span>);</span><br><span class="line">eastButton=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;东按钮&quot;</span>);</span><br><span class="line">southButton=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;南按钮&quot;</span>);</span><br><span class="line">westButton=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;西按钮&quot;</span>);</span><br><span class="line">northButton=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;北按钮&quot;</span>);</span><br><span class="line">centerButton=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;中央按钮&quot;</span>);</span><br><span class="line">jf.add(eastButton,<span class="string">&quot;East&quot;</span>);</span><br><span class="line"> <span class="comment">//注意:Frame容器的默认布局就已经是BorderLayout</span></span><br><span class="line">jf.add(southButton,<span class="string">&quot;West&quot;</span>);</span><br><span class="line">jf.add(westButton,<span class="string">&quot;North&quot;</span>);</span><br><span class="line">jf.add(northButton,<span class="string">&quot;South&quot;</span>);</span><br><span class="line">jf.add(centerButton,<span class="string">&quot;Center&quot;</span>);</span><br><span class="line">jf.setVisible(<span class="literal">true</span>);</span><br><span class="line">jf.pack();</span><br></pre></td></tr></table></figure>



<h2 id="null布局-顺序布局"><a href="#null布局-顺序布局" class="headerlink" title="null布局(顺序布局)"></a>null布局(顺序布局)</h2><p>自己设置大小和位置</p>
<p>使用null布局的时候，不要用pac方法！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b1.setSize(<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line"> <span class="comment">//设置按钮b1的宽度和高度</span></span><br><span class="line">b1.setLocation(<span class="number">10</span>,<span class="number">30</span>);</span><br><span class="line"> <span class="comment">//设置按钮b1在界面上的左上角的位置坐标</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">USA</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">USB</span> <span class="keyword">extends</span> <span class="title class_">USA</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="JFrame使用"><a href="#JFrame使用" class="headerlink" title="JFrame使用"></a>JFrame使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JFrame jFrame=<span class="keyword">new</span> <span class="title class_">JFrame</span>();  <span class="comment">//实例化一个窗口</span></span><br><span class="line">jFrame.setSize(<span class="number">500</span>,<span class="number">500</span>);  <span class="comment">//设置大小</span></span><br><span class="line">jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class="comment">//设置关闭按钮</span></span><br><span class="line">jFrame.setTitle(<span class="string">&quot;名字&quot;</span>); <span class="comment">//设置窗体名称</span></span><br><span class="line">window.setResizable(<span class="literal">false</span>); <span class="comment">//不可拖动</span></span><br><span class="line">window.setVisible(<span class="literal">true</span>);   <span class="comment">//显示窗体</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/06/07/629f206c2707f.png" alt="image-20220607164752695"></p>
<h2 id="字符串，数值转换"><a href="#字符串，数值转换" class="headerlink" title="字符串，数值转换"></a>字符串，数值转换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.parseInt(xxx);</span><br><span class="line"></span><br><span class="line">Double.parseDouble(xxx);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">1234</span>;</span><br><span class="line">Integer.toString(xxx);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/07/21/Git/</url>
    <content><![CDATA[<h1 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h1><img src="https://tu.sunning.fit/i/2022/07/06/62c54aa3713a3.png" alt="image-20220419004525704" style="zoom:67%;" />

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S git</span><br></pre></td></tr></table></figure>

<p><strong>设置用户签名</strong></p>
<p>设置用户名和邮箱（这里的设置和连接远程仓库没有关系）但是要进行设置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git comfig --global user.name xxx</span><br><span class="line">git config --global user.email xxx</span><br></pre></td></tr></table></figure>

<p><strong>生成ssh密钥——免密登录用</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>一路回车即可,查看密钥</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> .ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>一整个全部复制到远程仓库的公钥里面</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git .init</span><br></pre></td></tr></table></figure>

<h2 id="查看本地仓库状态"><a href="#查看本地仓库状态" class="headerlink" title="查看本地仓库状态"></a>查看本地仓库状态</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h2 id="历史版本-x2F-版本穿梭"><a href="#历史版本-x2F-版本穿梭" class="headerlink" title="历史版本&#x2F;版本穿梭"></a>历史版本&#x2F;版本穿梭</h2><h3 id="查看日志信息"><a href="#查看日志信息" class="headerlink" title="查看日志信息"></a>查看日志信息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reflog <span class="comment">#查看版本信息</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#查看版本详细信息</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54aaa58a15.png" alt="image-20220419004341924"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54ab1d2af4.png" alt="Untitled"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54aad92f60.png" alt="image-20220419004449962"></p>
<h3 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">版本穿梭 git reset --hard <span class="string">&quot;版本号&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="上传和拉取分支"><a href="#上传和拉取分支" class="headerlink" title="上传和拉取分支"></a>上传和拉取分支</h1><h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><p>添加远程仓库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote add 仓库名称（origin） 地址</span><br></pre></td></tr></table></figure>

<p>查看仓库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote -v 查看当前所有远程地址别名</span><br><span class="line">git remote add 别名 远程地址</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54ab550929.png" alt="image-20220419010320436"></p>
<p>为什么别名有两个？ 因为别名既可以拉取又可以推送</p>
<p>克隆仓库</p>
<p>git clone 远程地址（克隆不需要登陆）</p>
<p>clone 会做如下操作：</p>
<ol>
<li>拉取代码。</li>
<li>初始化本地仓库。</li>
<li>创建别名           这个别名默认是origin</li>
</ol>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>本地操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add . 把所有文件提交到暂存区</span><br><span class="line">git commit -m <span class="string">&quot;XXX&quot;</span> 提交变更 XXX是注释的内容</span><br></pre></td></tr></table></figure>

<p>远程操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git pull 仓库名（origin） master</span><br></pre></td></tr></table></figure>

<h3 id="法推送一些引用到提示："><a href="#法推送一些引用到提示：" class="headerlink" title="法推送一些引用到提示："></a>法推送一些引用到提示：</h3><p>更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。 提示：再次推送前，先与远程变更合并（如 ‘git pull …’）</p>
<p>解决方法 git stash 保存当前的工作状态</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash 保存当前的工作状态</span><br></pre></td></tr></table></figure>

<p>git pull 拉取远程仓库的状态，因为是强制拉取，所以用下面的那个方法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>然后将本地的文件和暂存区的文件进行合并</p>
<p>合并完成后记得把stash里面的东西清除</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">stash pop</span><br></pre></td></tr></table></figure>

<p>记录一次出现的bug以及解决</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash 保存当前的工作状态</span><br><span class="line"></span><br><span class="line">❯ git pull markdown master</span><br><span class="line">来自 162.14.78.140:sun/markdown</span><br><span class="line"></span><br><span class="line">- branch master -&gt; FETCH_HEAD</span><br><span class="line">更新 9243178..1d632be</span><br><span class="line">error: 工作区中下列未跟踪的文件将会因为合并操作而被覆盖：</span><br><span class="line">贪心/贪心.assets/paste-1f46fdf443666103ed3a1e3a0a928ef88ec8b9fd.jpg</span><br><span class="line">请在合并前移动或删除。</span><br><span class="line">正在终止</span><br><span class="line">❯ git fetch --all</span><br><span class="line">正在获取 markdown</span><br><span class="line">❯ git reset --hard markdown/master</span><br><span class="line">HEAD 现在位于 1d632be 博客</span><br><span class="line">❯ git pull</span><br><span class="line">当前分支没有跟踪信息。</span><br><span class="line">请指定您要合并哪一个分支。</span><br><span class="line">详见 git-pull(1)。</span><br><span class="line">    </span><br><span class="line">    git pull &lt;远程&gt; &lt;分支&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">如果您想要为此分支创建跟踪信息，您可以执行：</span><br><span class="line"></span><br><span class="line">git branch --set-upstream-to=markdown/&lt;分支&gt; master</span><br><span class="line"></span><br><span class="line">❯ git pull markdown master</span><br><span class="line">来自 162.14.78.140:sun/markdown</span><br><span class="line"></span><br><span class="line">- branch master -&gt; FETCH_HEAD</span><br><span class="line">已经是最新的。</span><br><span class="line"></span><br><span class="line">git stash pop</span><br><span class="line">自动合并 贪心/贪心.md</span><br><span class="line">冲突（内容）：合并冲突于 贪心/贪心.md</span><br><span class="line">位于分支 master</span><br><span class="line">未合并的路径：</span><br><span class="line">（使用 <span class="string">&quot;git restore --staged &lt;文件&gt;...&quot;</span> 以取消暂存）</span><br><span class="line">（使用 <span class="string">&quot;git add &lt;文件&gt;...&quot;</span> 标记解决方案）</span><br><span class="line">双方修改：   <span class="string">&quot;\350\264\252\345\277\203/\350\264\252\345\277\[203.md](http://203.md/)&quot;</span></span><br><span class="line"></span><br><span class="line">未跟踪的文件:</span><br><span class="line">（使用 <span class="string">&quot;git add &lt;文件&gt;...&quot;</span> 以包含要提交的内容）</span><br><span class="line"><span class="string">&quot;\350\264\252\345\277\203/\350\264\252\345\277\203.assets/paste-10ad1da7b2d84f5b3f963551b6864c3957f83d94.jpg&quot;</span></span><br><span class="line"><span class="string">&quot;\350\264\252\345\277\203/\350\264\252\345\277\203.assets/paste-3296a44faeab0ac65d14165366d9285e8601405d.jpg&quot;</span></span><br><span class="line"><span class="string">&quot;\350\264\252\345\277\203/\350\264\252\345\277\203.assets/paste-33e924cd4635c09fc25221a7ff34c4a00d95a92e.jpg&quot;</span></span><br><span class="line"><span class="string">&quot;\350\264\252\345\277\203/\350\264\252\345\277\203.assets/paste-627c079ef2df13f4a4b70f349548ab9adbafcf70.jpg&quot;</span></span><br><span class="line"><span class="string">&quot;\350\264\252\345\277\203/\350\264\252\345\277\203.assets/paste-ae009186a89d1142ddb6cebfadb0322cced8f309.jpg&quot;</span></span><br><span class="line"><span class="string">&quot;\350\264\252\345\277\203/\350\264\252\345\277\203.assets/paste-ea3d04820c96ea59a9f8659969f956aac099152f.jpg&quot;</span></span><br><span class="line"></span><br><span class="line">修改尚未加入提交（使用 <span class="string">&quot;git add&quot;</span> 和/或 <span class="string">&quot;git commit -a&quot;</span>）</span><br><span class="line">贮藏条目被保留以备您再次需要。</span><br><span class="line">❯ git add .</span><br><span class="line">❯ git stash pop</span><br></pre></td></tr></table></figure>



<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git pull 仓库名(origin) master</span><br></pre></td></tr></table></figure>

<h3 id="error-工作区中下列未跟踪的文件将会因为合并操作而被覆盖"><a href="#error-工作区中下列未跟踪的文件将会因为合并操作而被覆盖" class="headerlink" title="error: 工作区中下列未跟踪的文件将会因为合并操作而被覆盖"></a>error: 工作区中下列未跟踪的文件将会因为合并操作而被覆盖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><h2 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h2><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来， 开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd40d703776.png" alt="%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C%207cb4a09ca087478a9587a49c957dc3a9/Untitled.png"></p>
<h2 id="分支好处"><a href="#分支好处" class="headerlink" title="分支好处"></a>分支好处</h2><p>同时并行推进多个功能开发，提高开发效率。</p>
<p>  各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</p>
<h2 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h2><p>git branch   分支名            创建分支</p>
<p>git branch -v                     查看分支</p>
<p>git checkout 分支名          切换分支</p>
<p>git merge 分支名               把指定的分支合并到当前分支上（注意当前分支是主体）</p>
<h3 id="切换创建修改分支"><a href="#切换创建修改分支" class="headerlink" title="切换创建修改分支"></a>切换创建修改分支</h3><p><img src="https://tu.sunning.fit/i/2022/07/12/62cd40d9815cf.png" alt="%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C%207cb4a09ca087478a9587a49c957dc3a9/Untitled%201.png"></p>
<h3 id="分支合并（正常合并）"><a href="#分支合并（正常合并）" class="headerlink" title="分支合并（正常合并）"></a>分支合并（正常合并）</h3><p>转移到想要合并的分支git checkout 分支名，然后用git merge加上分支名</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd40dd35d22.png" alt="%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C%207cb4a09ca087478a9587a49c957dc3a9/Untitled%202.png"></p>
<h3 id="分支合并（冲突合并）"><a href="#分支合并（冲突合并）" class="headerlink" title="分支合并（冲突合并）"></a>分支合并（冲突合并）</h3><p><a href="https://www.notion.so/">https://www.notion.so</a></p>
<p>冲突</p>
<h3 id="冲突产生的原因"><a href="#冲突产生的原因" class="headerlink" title="冲突产生的原因"></a><strong>冲突产生的原因</strong></h3><p>并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。 Git 无法替我们决定使用哪一个，因此，必须<strong>人为决定</strong>新代码内容。</p>
<h3 id="产生冲突"><a href="#产生冲突" class="headerlink" title="产生冲突"></a><strong>产生冲突</strong></h3><p>首先，在master修改文件hello.txt最后一行内容，并提交</p>
<p>切换到master分支，然后将hot-fix分支的合并到master，冲突产生：</p>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a><strong>解决冲突</strong></h3><p>编辑有冲突的文件，<strong>删除特殊符号</strong>，决定要使用的内容</p>
<p>创建分支和切换分支<br>master、 hot-fix 其实都是指向具体版本记录的指针。当前所在的分支，其实是由 HEAD决定的。所以创建分支的本质就是多创建一个指针。</p>
<p><strong>理解</strong></p>
<p>HEAD 如果指向 master，那么我们现在就在 master 分支上。<br>HEAD 如果执行 hot-fix，那么我们现在就在 hot-fix 分支上。<br>所以切换分支的本质就是移动 HEAD 指针。</p>
<p>在master里面修改文件没有提交的话，此时转到hot-fix分支上之前的那个文件还是被修改的状态，如果master里面修改后提交文件，hot-fix分支上的那个文件则是没有被修改的状态</p>
<p>合并结束后master分支变成合并结束的状态， hot-fix分支还是没有修改的状态</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub操作</title>
    <url>/2022/07/21/GitHub%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="GitHub操作"><a href="#GitHub操作" class="headerlink" title="GitHub操作"></a>GitHub操作</h1><h2 id="创建远程仓库别名"><a href="#创建远程仓库别名" class="headerlink" title="创建远程仓库别名"></a>创建远程仓库别名</h2><p>git remote -v          查看当前所有远程地址别名</p>
<p>git remote add       别名 远程地址</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd414621029.png" alt="GitHub%E6%93%8D%E4%BD%9C%20e113a9d9deec4ca99fecc9023ca17b41/Untitled.png"></p>
<p>为什么别名有两个？ 因为别名既可以拉取又可以推送</p>
<h2 id="推送本地分支到远程仓库"><a href="#推送本地分支到远程仓库" class="headerlink" title="推送本地分支到远程仓库"></a>推送本地分支到远程仓库</h2><p>git push 别名 分支                这里面game是仓库的别名，网络原因要多试几次，然后会弹出左边的界面，选择上面的sign in with</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd4149738ff.png" alt="GitHub%E6%93%8D%E4%BD%9C%20e113a9d9deec4ca99fecc9023ca17b41/Untitled%201.png"></p>
<h2 id="拉取远程仓库到本地"><a href="#拉取远程仓库到本地" class="headerlink" title="拉取远程仓库到本地"></a>拉取远程仓库到本地</h2><p>git pull 别名 分支</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd414c80388.png" alt="GitHub%E6%93%8D%E4%BD%9C%20e113a9d9deec4ca99fecc9023ca17b41/Untitled%202.png"></p>
<h2 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h2><p>git clone 远程地址（克隆不需要登录）</p>
<p>clone 会做如下操作：</p>
<ol>
<li>拉取代码。</li>
<li>初始化本地仓库。</li>
<li>创建别名           这个别名默认是origin</li>
</ol>
<h2 id="邀请加入团队（看这里面对应的）-x2F-跨团队协作-x2F-SSH免密登录"><a href="#邀请加入团队（看这里面对应的）-x2F-跨团队协作-x2F-SSH免密登录" class="headerlink" title="邀请加入团队（看这里面对应的）&#x2F;跨团队协作&#x2F;SSH免密登录"></a>邀请加入团队（看这里面对应的）&#x2F;跨团队协作&#x2F;SSH免密登录</h2><p><a href="https://blog.csdn.net/u011863024/article/details/118562748">Git学习笔记_KISS-CSDN博客</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>github操作</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/2022/07/21/JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h1><h3 id="编程语言和标记语言区别"><a href="#编程语言和标记语言区别" class="headerlink" title="编程语言和标记语言区别"></a>编程语言和标记语言区别</h3><table>
<thead>
<tr>
<th>语言</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>编程语言</td>
<td>编程语言有很强的逻辑和行为能力。在编程语言里, 你会看到很多 if else 、for 、while等具有逻辑性和行为能力的指令，这是主动的。</td>
</tr>
<tr>
<td>标记语言</td>
<td>标记语言（html）不用于向计算机发出指令，常用于格式化和链接。标记语言的存在是用来被读取的, 他是被动的。</td>
</tr>
</tbody></table>
<h3 id="解释型语言和编译型语言"><a href="#解释型语言和编译型语言" class="headerlink" title="解释型语言和编译型语言"></a>解释型语言和编译型语言</h3><img src="https://tu.sunning.fit/i/2022/04/26/6267ec90f39e2.png" alt="image-20220417111621384" style="zoom:80%;" />

<h1 id="js介绍"><a href="#js介绍" class="headerlink" title="js介绍"></a>js介绍</h1><ul>
<li>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</li>
<li>现在也可以基于 Node.js 技术进行服务器端编程</li>
</ul>
<p><strong>作用</strong></p>
<ul>
<li>表单动态校验（密码强度检测） （ JS 产生最初的目的 ）</li>
<li>网页特效</li>
<li>服务端开发(Node.js)</li>
<li>桌面程序(Electron)</li>
<li>App(Cordova)</li>
<li>控制硬件-物联网(Ruff)</li>
<li>游戏开发(cocos2d-js)</li>
</ul>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ec95701b5.png"></p>
<blockquote>
<p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p>
</blockquote>
<p><strong>js的组成</strong></p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ec990dbf3.png"></p>
<blockquote>
<p>ECMAScript</p>
<p>ECMAScript 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p>
</blockquote>
<blockquote>
<p>DOM文档对象模型</p>
<p><strong>文档对象模型</strong>（DocumentObject Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）</p>
</blockquote>
<blockquote>
<p>BOM——浏览器对象模型</p>
<p><strong>浏览器对象模型</strong>(Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p>
</blockquote>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="async-和defer作用"><a href="#async-和defer作用" class="headerlink" title="async 和defer作用"></a>async 和defer作用</h2><p>defer：用于开启新的线程下载脚本文件，是脚本在文档解析完成后立即执行（延迟一波，等页面元素加载完再进行js的操作，这样文件位置放在哪里都不会影响加载顺序）</p>
<p>async：HTML5新增，异步下载脚本文件，下载完毕立即执行代码</p>
<p>所以async和defer的最主要的区别就是async是异步下载，下载完后立即执行，不影响文档的解析，defer是异步加载后解析文档。</p>
<p>如果有多个defer脚本，会按照顺序下载解析。而多个async脚本下载与解析的顺序是不一定的，所以如果脚本之间有依赖关系不要用async。</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul>
<li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li>
<li>注意单双引号的使用：在HTML中我们推荐使用双引号, JS 中我们推荐使用单引号</li>
<li>外部js方便文件复用</li>
<li>为了方便，变量用var 来初始化方便</li>
<li>变量命名规范<ul>
<li>小驼峰命名法</li>
<li>区分大小写</li>
</ul>
</li>
</ul>
<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>归属</th>
</tr>
</thead>
<tbody><tr>
<td>alert(msg)</td>
<td>浏览器弹出警示框</td>
<td>浏览器</td>
</tr>
<tr>
<td>console.log(msg)</td>
<td>浏览器控制台打印输出信息</td>
<td>浏览器</td>
</tr>
<tr>
<td>prompt(info)</td>
<td>浏览器弹出输入框，用户可以输入</td>
<td>浏览器</td>
</tr>
</tbody></table>
<ul>
<li>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</li>
</ul>
<h3 id="符号和函数"><a href="#符号和函数" class="headerlink" title="符号和函数"></a>符号和函数</h3><p>和c语言差不多,if,for,while,switch三目运算符都有</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>创建数组</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var 数组名 = new Array() ；</span><br><span class="line">var arr = new Array();   // 创建一个新的空数组</span><br><span class="line">//1. 使用数组字面量方式创建空的数组</span><br><span class="line">var  数组名 = []；</span><br><span class="line">//2. 使用数组字面量方式创建带初始值的数组</span><br><span class="line">var  数组名 = [&#x27;小白&#x27;,&#x27;小黑&#x27;,&#x27;大黄&#x27;,&#x27;瑞奇&#x27;];</span><br></pre></td></tr></table></figure>

<p><strong>元素的类型可以是任意的</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arrStus = [&#x27;小白&#x27;,12,true,28.9];</span><br></pre></td></tr></table></figure>

<p><strong>数组中新增元素</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数组[ 数组.length ] = 新数据;</span><br></pre></td></tr></table></figure>



<h3 id="Array-map-方法"><a href="#Array-map-方法" class="headerlink" title="Array map()方法"></a>Array map()方法</h3><p>map()方法返回一个数组，数组中的元素为原始数组元素调用函数处理后的值</p>
<blockquote>
<p>map不会对空数组检测</p>
<p>map不会改变原始数组</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>),thisValue)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>function(currentValue, index,arr)</em></td>
<td align="left">必须。函数，数组中的每个元素都会执行这个函数</td>
</tr>
<tr>
<td align="left"><em>thisValue</em></td>
<td align="left">可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。 如果省略了 thisValue，或者传入 null、undefined，那么回调函数的 this 为全局对象。</td>
</tr>
</tbody></table>
<p>对于function(currentValue,index,arr)中的参数说明： </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>currentValue</td>
<td>必须，当前元素的值</td>
</tr>
<tr>
<td>index</td>
<td>可选，当前元素的索引值</td>
</tr>
<tr>
<td>arr</td>
<td>可选，当前元素属于的数组对象</td>
</tr>
</tbody></table>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number=[<span class="number">65</span>,<span class="number">44</span>,<span class="number">12</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiplyArrayElement</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;multiplyWith&quot;</span>).<span class="property">value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = numbers.<span class="title function_">map</span>(multiplyArrayElement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Array-apply-方法"><a href="#Array-apply-方法" class="headerlink" title="Array.apply()方法"></a>Array.apply()方法</h3><p>作用：把数组各项添加到另一个数组</p>
<p><code>push</code> 的参数是数组，它会将该数组作为单个元素添加，而不是将这个数组内的每个元素添加进去，因此我们最终会得到一个数组内的数组。如果不想这样呢？<code>concat</code> 符合我们的需求，但它并不是将元素添加到现有数组，而是创建并返回一个新数组。然而我们需要将元素追加到现有数组……那么怎么做好？难道要写一个循环吗？别当然不是！</p>
<p><code>apply</code> 正派上用场！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> elements = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">array.<span class="property">push</span>.<span class="title function_">apply</span>(array, elements);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(array); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, 0, 1, 2]</span></span><br></pre></td></tr></table></figure>





<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 声明函数</span><br><span class="line">function 函数名() &#123;</span><br><span class="line">    //函数体代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 调用函数</span><br><span class="line">函数名();  // 通过调用函数名来执行函数体代码</span><br></pre></td></tr></table></figure>

<p>函数本身并不会执行代码，只有调用函数时才会执行函数体代码</p>
<h3 id="函数的俩种声明方式"><a href="#函数的俩种声明方式" class="headerlink" title="函数的俩种声明方式"></a>函数的俩种声明方式</h3><ul>
<li><p>自定义函数方式(命名函数)</p>
<p>利用函数关键字 function 自定义函数方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 声明定义方式</span><br><span class="line">function fn() &#123;...&#125;</span><br><span class="line">// 调用  </span><br><span class="line">fn();  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>因为有名字，所以也被称为命名函数</li>
<li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li>
</ul>
</li>
<li><p>函数表达式方式(匿名函数）</p>
<p>利用函数表达式方式的写法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这是函数表达式写法，匿名函数后面跟分号结束</span><br><span class="line">var fn = function()&#123;...&#125;；</span><br><span class="line">// 调用的方式，函数调用必须写到函数体下面</span><br><span class="line">fn();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>因为函数没有名字，所以也被称为匿名函数</li>
<li>这个fn 里面存储的是一个函数</li>
<li>函数表达式方式原理跟声明变量方式是一致的</li>
<li>函数调用的代码必须写到函数体后面</li>
</ul>
<p><strong>函数封装到对象里面</strong></p>
<p>arguments(i) 代表输入的第i个元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myMath=&#123;</span><br><span class="line">            PI:3.1415926,</span><br><span class="line">            max:function()&#123;</span><br><span class="line">                var temp=arguments[0];</span><br><span class="line">                for(var i=0;i&lt;arguments.length;i++)&#123;</span><br><span class="line">                    temp=temp&gt;arguments[i] ? temp : arguments[i];</span><br><span class="line">                &#125;</span><br><span class="line">                return temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>js没有块级作用域，java有块级作用域：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">  int num = 123;</span><br><span class="line">  system.out.print(num);  // 123</span><br><span class="line">&#125;</span><br><span class="line">system.out.print(num);    // 报错</span><br></pre></td></tr></table></figure>

<p>以上java代码会报错，是因为代码中 { } 即一块作用域，其中声明的变量 num，在 “{ }” 之外不能使用；</p>
<p>而与之类似的JavaScript代码，则不会报错</p>
<h2 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h2><p> 当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p>
<p>具有 length 属性</p>
<p>按索引方式储存数据</p>
<p>不具有数组的 push , pop 等方法</p>
<p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p>
<p><strong>arguments.length</strong></p>
<p>属性返回函数调用过程接收到的参数个数</p>
<p><strong>例：求任意个数的最大值</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        function fun()&#123;</span><br><span class="line">            var max=arguments[0];   //如果这里直接var max会返回undefined,未定义</span><br><span class="line">            for(var i=0;i&lt;arguments.length;i++)&#123;</span><br><span class="line">                if(max&lt;arguments[i])&#123;</span><br><span class="line">                    max=arguments[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return max;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(fun(1,2,3));</span><br><span class="line">        console.log(fun(1,3,5,2,3));</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>注意 var max&#x3D;arguments[0]; &#x2F;&#x2F;如果这里直接var max执行程序会返回undefined,未定义</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>在代码运行时，变量的数据类型是由 JS引擎 根据 &#x3D; 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = 6;           // x 为数字</span><br><span class="line">var x = &quot;Bill&quot;;      // x 为字符串    </span><br></pre></td></tr></table></figure>

<h2 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h2><p><img src="https://tu.sunning.fit/i/2022/04/26/6267eca0ab724.png"></p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol>
<li>引号嵌套</li>
</ol>
<p> JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var strMsg = &#x27;我是&quot;高帅富&quot;程序猿&#x27;;   // 可以用&#x27;&#x27;包含&quot;&quot;</span><br><span class="line">var strMsg2 = &quot;我是&#x27;高帅富&#x27;程序猿&quot;;  // 也可以用&quot;&quot; 包含&#x27;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>字符串转义符</li>
</ol>
<p> 类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p>
<p> 转义符都是 \ 开头的，常用的转义符及其说明如下：</p>
<table>
<thead>
<tr>
<th>转义符</th>
<th>解释说明</th>
</tr>
</thead>
<tbody><tr>
<td>\n</td>
<td>换行符，n 是 newline 的意思</td>
</tr>
<tr>
<td>\ \</td>
<td>斜杠 \ （因为\是转意字符，所以打印\就要 俩个“\ \ ”）</td>
</tr>
<tr>
<td>‘</td>
<td>‘ 单引号</td>
</tr>
<tr>
<td>“</td>
<td>”双引号</td>
</tr>
<tr>
<td>\t</td>
<td>tab 缩进</td>
</tr>
<tr>
<td>\b</td>
<td>空格 ，b 是 blank 的意思</td>
</tr>
</tbody></table>
<ol>
<li>字符串长度</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var strMsg = &quot;我是帅气多金的程序猿！&quot;;</span><br><span class="line">alert(strMsg.length); // 显示 11</span><br></pre></td></tr></table></figure>

<ol>
<li>字符串拼接</li>
</ol>
<ul>
<li>多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 &#x3D; 拼接之后的新字符串,拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li>
</ul>
<h3 id="数字型-Number"><a href="#数字型-Number" class="headerlink" title="数字型 Number"></a>数字型 Number</h3><h4 id="比parseInt更好的转换——js前面的-号"><a href="#比parseInt更好的转换——js前面的-号" class="headerlink" title="比parseInt更好的转换——js前面的 + 号"></a>比parseInt更好的转换——js前面的 + 号</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 16进制转换:</span></span><br><span class="line">+”<span class="number">0xFF</span>”;              <span class="comment">// -&gt; 255</span></span><br><span class="line"><span class="comment">// 获取当前的时间戳,相当于`new Date().getTime()`:</span></span><br><span class="line">+<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比 parseFloat()/parseInt()更加安全的解析字符串</span></span><br><span class="line"><span class="built_in">parseInt</span>(“<span class="number">1</span>,<span class="number">000</span>″);    <span class="comment">// -&gt; 1, not 1000</span></span><br><span class="line">+”<span class="number">1</span>,<span class="number">000</span>″;             <span class="comment">// -&gt; NaN, much better for testing user input</span></span><br><span class="line"><span class="built_in">parseInt</span>(“<span class="number">010</span>″);      <span class="comment">// -&gt; 8, because of the octal literal prefix</span></span><br><span class="line">+”<span class="number">010</span>″;               <span class="comment">// -&gt; 10, `Number()` doesn&#x27;t parse octal literals</span></span><br><span class="line"><span class="comment">//一些简单的缩写比如： if (someVar === null) &#123;someVar = 0&#125;;</span></span><br><span class="line">+<span class="literal">null</span>;                <span class="comment">// -&gt; 0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔型转换为整型</span></span><br><span class="line">+<span class="literal">true</span>;                <span class="comment">// -&gt; 1;</span></span><br><span class="line">+<span class="literal">false</span>;               <span class="comment">// -&gt; 0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其他:</span></span><br><span class="line">+”<span class="number">1e10</span>″;              <span class="comment">// -&gt; 10000000000</span></span><br><span class="line">+”<span class="number">1e-4</span>″;              <span class="comment">// -&gt; 0.0001</span></span><br><span class="line">+”-<span class="number">12</span>″;               <span class="comment">// -&gt; -12：</span></span><br></pre></td></tr></table></figure>





<p>JavaScript 数字类型既可以保存整数，也可以保存小数(浮点数）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var age = 21;       // 整数</span><br><span class="line">var Age = 21.3747;  // 小数     </span><br></pre></td></tr></table></figure>

<ol>
<li><p>数字型进制</p>
<p>最常见的进制有二进制、八进制、十进制、十六进制。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // 1.八进制数字序列范围：0~7</span><br><span class="line">var num1 = 07;   // 对应十进制的7</span><br><span class="line">var num2 = 019;  // 对应十进制的19</span><br><span class="line">var num3 = 08;   // 对应十进制的8</span><br><span class="line"> // 2.十六进制数字序列范围：0~9以及A~F</span><br><span class="line">var num = 0xA;   </span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p>现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x</p>
</li>
<li><p>数字型范围</p>
<p>JavaScript中数值的最大和最小值</p>
<ul>
<li>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</li>
<li>最小值：Number.MIN_VALUE，这个值为：5e-32</li>
</ul>
</li>
<li><p>数字型三个特殊值</p>
<ul>
<li>Number.Infinity ，代表无穷大，大于任何数值</li>
<li>-Number.Infinity ，代表无穷小，小于任何数值</li>
<li>NaN ，Not a number，代表一个非数值</li>
</ul>
</li>
<li><p>isNaN</p>
<p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p>
</li>
</ol>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecb1bca7b.png"></p>
<h3 id="Undefined和-Null"><a href="#Undefined和-Null" class="headerlink" title="Undefined和 Null"></a>Undefined和 Null</h3><p>一个声明后没有被赋值的变量会有一个默认值undefined ( 如果进行相连或者相加时，注意结果）</p>
<p>一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</p>
<h2 id="获取类型，转换类型"><a href="#获取类型，转换类型" class="headerlink" title="获取类型，转换类型"></a>获取类型，转换类型</h2><h3 id="获取类型"><a href="#获取类型" class="headerlink" title="获取类型"></a>获取类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num = 18;</span><br><span class="line">console.log(typeof num) // 结果 number      </span><br></pre></td></tr></table></figure>

<h3 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型"></a>转换类型</h3><p><strong>转换为字符串</strong></p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecb24e1a6.png"></p>
<p>toString() 和 String() 使用方式不一样。</p>
<p>三种转换方式，更多第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。</p>
<p>转换为数字型（重点）</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecb2076b4.png"></p>
<p>注意 parseInt 和 parseFloat 单词的大小写，这俩个函数是向下取整的</p>
<p>隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</p>
<p>parseFloat(14px) 转化的时候会自动去掉px 变成14</p>
<p>隐式转换的加法不能转换成数字类型</p>
<p><strong>转换为布尔型</strong></p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecb31d06b.png"></p>
<p>代表空、否定的值会被转换为 false ，如 ‘’、0、NaN、null、undefined</p>
<p>其余值都会被转换为 true</p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>在执行函数的时候，var i 是会一直存在的，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myUl=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> myLii=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(myUl.<span class="property">length</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;myUl.<span class="property">length</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">                myUl[i].<span class="property">firstElementChild</span>.<span class="property">onmouseover</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">                    myLii[<span class="number">4</span>*i-<span class="number">4</span>].<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">                    myLii[<span class="number">4</span>*i-<span class="number">3</span>].<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">                    myLii[<span class="number">4</span>*i-<span class="number">2</span>].<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">                    <span class="comment">// console.log(myLii[1]);</span></span><br><span class="line">                    <span class="comment">// console.log(myLii[4*i-4]);</span></span><br><span class="line">                    <span class="comment">// console.log(4*i+1);</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// for(var i=1;i&lt;myLi.length;i++)&#123;</span></span><br><span class="line">                    <span class="comment">//     console.log(myLi[i]); </span></span><br><span class="line">                    <span class="comment">// &#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">                myUl[i].<span class="property">firstElementChild</span>.<span class="property">onmouseout</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                    myLii[<span class="number">4</span>*i-<span class="number">4</span>].<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">                    myLii[<span class="number">4</span>*i-<span class="number">3</span>].<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">                    myLii[<span class="number">4</span>*i-<span class="number">2</span>].<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>这里面的函数方法 myLii[4*i-3] 将会一直是for循环执行完之后的i的样子 i&#x3D;4</p>
<p>循环进行注册完成之后,i一直等于4,如果有需要调用的时候才会接着执行代码里面的语句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myLii[<span class="number">4</span>*i-<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>不是在文件执行的时候直接生成</p>
<p><strong>函数调用才执行</strong></p>
<h1 id="JavaScript面向对象"><a href="#JavaScript面向对象" class="headerlink" title="JavaScript面向对象"></a>JavaScript面向对象</h1><h2 id="对象简介"><a href="#对象简介" class="headerlink" title="对象简介"></a>对象简介</h2><p>JavaScript 中的对象分为3种：<strong>自定义对象 、内置对象、 浏览器对象</strong> 前面两种对象是JS 基础 内容，属于 ECMAScript； 第三个浏览器对象属于 JS 独有的</p>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="键值对创建对象"><a href="#键值对创建对象" class="headerlink" title="键值对创建对象"></a>键值对创建对象</h3><ul>
<li>键：相当于属性名</li>
<li>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var star = &#123;</span><br><span class="line">    name : &#x27;pink&#x27;,</span><br><span class="line">    age : 18,</span><br><span class="line">    sex : &#x27;男&#x27;,</span><br><span class="line">    sayHi : function()&#123;</span><br><span class="line">        alert(&#x27;大家好啊~&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上述代码中 star即是创建的对象。</p>
<h3 id="利用-new-Object-创建对象"><a href="#利用-new-Object-创建对象" class="headerlink" title="利用 new Object 创建对象"></a>利用 new Object 创建对象</h3><p><strong>创建空对象</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var andy = new Obect();</span><br></pre></td></tr></table></figure>

<p>通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</p>
<p><strong>给空对象添加属性和方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">andy.name = &#x27;pink&#x27;;</span><br><span class="line">andy.age = 18;</span><br><span class="line">andy.sex = &#x27;男&#x27;;</span><br><span class="line">andy.sayHi = function()&#123;</span><br><span class="line">    alert(&#x27;大家好啊~&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h3><p><strong>构造函数</strong>：</p>
<p>是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p>
<p><strong>构造函数的封装格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function 构造函数名(形参1,形参2,形参3) &#123;</span><br><span class="line">     this.属性名1 = 参数1;</span><br><span class="line">     this.属性名2 = 参数2;</span><br><span class="line">     this.属性名3 = 参数3;</span><br><span class="line">     this.方法名 = 函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>构造函数的调用格式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = new 构造函数名(实参1，实参2，实参3)</span><br></pre></td></tr></table></figure>

<p>以上代码中，obj即接收到构造函数创建出来的对象。</p>
<p><strong>注意事项</strong></p>
<ol>
<li>构造函数约定<strong>首字母大写</strong>。</li>
<li>函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li>
<li>构造函数中<strong>不需要 return 返回结果</strong>。</li>
<li>当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li>
</ol>
<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p><strong>访问属性</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(star.name)     // 调用名字属性</span><br><span class="line">console.log(star[&#x27;name&#x27;])  // 调用名字属性</span><br></pre></td></tr></table></figure>

<p><strong>调用方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">star.sayHi();              // 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span><br></pre></td></tr></table></figure>

<p><strong>遍历对象</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for...in 语句用于对数组或者对象的属性进行循环操作。</span><br><span class="line"></span><br><span class="line">其语法如下：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (变量 in 对象名字) &#123;</span><br><span class="line">    // 在此执行代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var k in obj) &#123;</span><br><span class="line">    console.log(k);      // 这里的 k 是属性名</span><br><span class="line">    console.log(obj[k]); // 这里的 obj[k] 是属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>封装自己的对象</strong></p>
<p>把方法封装到对象里面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myMath=&#123;</span><br><span class="line">            PI:3.1415926,</span><br><span class="line">            max:function()&#123;</span><br><span class="line">                var temp=arguments[0];</span><br><span class="line">                for(var i=0;i&lt;arguments.length;i++)&#123;</span><br><span class="line">                    temp=temp&gt;arguments[i] ? temp : arguments[i];</span><br><span class="line">                &#125;</span><br><span class="line">                return temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">console.log(myMath.max(1,2,3,4,10,-5));</span><br></pre></td></tr></table></figure>

<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是<strong>最基本而必要的功能</strong>（属性和方法），内置对象最大的优点就是帮助我们快速开发</p>
<h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p> Math 对象不是构造函数，它具有数学常数和函数的属性和方法。</p>
<table>
<thead>
<tr>
<th>属性、方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Math.PI</td>
<td>圆周率</td>
</tr>
<tr>
<td>Math.floor()</td>
<td>向下取整</td>
</tr>
<tr>
<td>Math.ceil()</td>
<td>向上取整</td>
</tr>
<tr>
<td>Math.round()</td>
<td>四舍五入版 就近取整 注意 -3.5 结果是 -3</td>
</tr>
<tr>
<td>Math.abs()</td>
<td>绝对值</td>
</tr>
<tr>
<td>Math.max()&#x2F;Math.min()</td>
<td>求最大和最小值</td>
</tr>
<tr>
<td>Math.random()</td>
<td>获取范围在[0,1)内的随机值</td>
</tr>
</tbody></table>
<p> <strong>获取指定范围内的随机整数</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getRandom(min, max) &#123;</span><br><span class="line">  return Math.floor(Math.random() * (max - min + 1)) + min; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p> Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p>
<h4 id="使用Date实例化日期对象"><a href="#使用Date实例化日期对象" class="headerlink" title="使用Date实例化日期对象"></a>使用Date实例化日期对象</h4><ul>
<li>获取当前时间必须实例化：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var now = new Date();</span><br></pre></td></tr></table></figure>

<ul>
<li>获取指定时间的日期对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var future = new Date(&#x27;2019/5/1&#x27;);</span><br></pre></td></tr></table></figure>

<p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p>
<ul>
<li><p>使用Date实例的方法和属性</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecb295317.png"></p>
</li>
</ul>
<h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>因为每个时间都不相同，所以独一无二的东西常常用总毫秒数来表示</p>
<ul>
<li><p>总毫秒数的含义</p>
<p> 基于1970年1月1日（世界标准时间）起的毫秒数</p>
</li>
<li><p>获取总毫秒数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 实例化Date对象</span><br><span class="line">var now = new Date();</span><br><span class="line">// 1. 用于获取对象的原始值 这两个都是获得从1970年到现在经过的毫秒数</span><br><span class="line">console.log(date.valueOf())	  </span><br><span class="line">console.log(date.getTime())	</span><br><span class="line">// 2. 简单写可以这么做（最常用的写法）</span><br><span class="line">是 = + 不是+ = </span><br><span class="line">var now = + new Date();	</span><br><span class="line">// 3. HTML5中提供的方法，有兼容性问题</span><br><span class="line">var now = Date.now();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
<li><p>把剩余总的毫秒数转换成天时分秒</p>
<p>这个是毫秒数不是秒数，记得除1000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d=parseInt(总秒数/60/60/24);  // 计算天数</span><br><span class="line">h=parseInt(总秒数/60/60%24);  //计算小时</span><br><span class="line">m=parseInt(总秒数/60%60);  //计算分数</span><br><span class="line">s=parseInt(总秒数%60)；  //计算当前秒数</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>例子：倒计时</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myTime=&#123;</span><br><span class="line">            lastTime:function(time)&#123;</span><br><span class="line">                var nowtime = + new Date();</span><br><span class="line">                var target= + new Date(time);</span><br><span class="line">                var lastsecond=(target-nowtime)/1000;</span><br><span class="line">                var d=parseInt(lastsecond/60/60/24);</span><br><span class="line">                d= d&lt;10 ? &#x27;0&#x27;+d : d;</span><br><span class="line">                var h=parseInt(lastsecond/60/60%24);</span><br><span class="line">                h=h&lt;10 ? &#x27;0&#x27;+h : h;</span><br><span class="line">                var m=parseInt(lastsecond/60%60);</span><br><span class="line">                m=m&lt;10? &#x27;0&#x27;+m : m;</span><br><span class="line">                var s=parseInt(lastsecond % 60);</span><br><span class="line">                s=s&lt;10? &#x27;0&#x27;+s:s;</span><br><span class="line">                return d+&#x27;天&#x27;+h+&#x27;时&#x27;+m+&#x27;分&#x27;+s+&#x27;秒&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">console.log(myTime.lastTime(&#x27;2022-4-20 23:00:00&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><h4 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h4><ul>
<li><p>字面量方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1,&quot;test&quot;,true];</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>new Array()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = new Array();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</p>
<p> 参数传递规则如下：</p>
<ul>
<li>如果只传入一个参数，则参数规定了数组的长度</li>
<li>如果传入了多个参数，则参数是数组的元素</li>
</ul>
</li>
</ul>
<h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul>
<li>instanceof 运算符<ul>
<li><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 23];</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">console.log(arr instanceof Array); // true</span><br><span class="line">console.log(obj instanceof Array); // false</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Array.isArray()<ul>
<li><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 23];</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">console.log(Array.isArray(arr));   // true</span><br><span class="line">console.log(Array.isArray(obj));   // false</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="添加删除数组元素的方法"><a href="#添加删除数组元素的方法" class="headerlink" title="添加删除数组元素的方法"></a>添加删除数组元素的方法</h4><ul>
<li><p>数组中有进行增加、删除元素的方法，部分方法如下表</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecb2d4c0e.png"></p>
<p>注意：push、unshift为增加元素方法；pop、shift为删除元素的方法</p>
</li>
</ul>
<p><strong>筛选数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test=&#123;</span><br><span class="line">            <span class="attr">myArr</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                myarr=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable language_">arguments</span>[i]&lt;<span class="number">2000</span>)&#123;</span><br><span class="line">                        myarr.<span class="title function_">push</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> myarr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="title function_">myArr</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">300</span>,<span class="number">3000</span>,<span class="number">5000</span>,<span class="number">123</span>));</span><br></pre></td></tr></table></figure>

<h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul>
<li><p>数组中有对数组本身排序的方法，部分方法如下表</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecb358d15.png"></p>
<p>注意：sort方法需要传入参数来设置升序、降序排序</p>
<ul>
<li>如果传入“function(a,b){ return a-b;}”，则为升序</li>
<li>如果传入“function(a,b){ return b-a;}”，则为降序</li>
</ul>
<p>在sort方法里面扔进去一个函数即可</p>
<p>是a-b不是a&lt;b之类的</p>
</li>
</ul>
<h4 id="数组索引方法"><a href="#数组索引方法" class="headerlink" title="数组索引方法"></a>数组索引方法</h4><ul>
<li><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecb89d8f3.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;456&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;123&#x27;</span>)); 返回为<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>数组去重</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">newArr</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> myArr=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(!myArr.<span class="title function_">indexOf</span>(<span class="variable language_">arguments</span>[i]));  <span class="comment">//注意用这种写法得到的都是false</span></span><br><span class="line">                <span class="keyword">if</span>(myArr.<span class="title function_">indexOf</span>(<span class="variable language_">arguments</span>[i])===-<span class="number">1</span>)&#123;</span><br><span class="line">                    myArr.<span class="title function_">push</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(myArr);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="title function_">newArr</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>





<h4 id="数组转换为字符串"><a href="#数组转换为字符串" class="headerlink" title="数组转换为字符串"></a>数组转换为字符串</h4><ul>
<li><p>数组中有把数组转化为字符串的方法，部分方法如下表</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecb8cfa11.png"></p>
<p>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myarr=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">myarr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">546</span>,<span class="number">123</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myarr.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> myarr[<span class="number">3</span>]);     <span class="comment">//返回的是number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> myarr.<span class="title function_">toString</span>()[<span class="number">3</span>]);   <span class="comment">//返回的是string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myarr.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>));   <span class="comment">//1+2+34+546+123</span></span><br></pre></td></tr></table></figure>



<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul>
<li><p>数组中还有其他操作方法，同学们可以在课下自行查阅学习</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecbe1df2a.png"></p>
</li>
</ul>
<h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p> 为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p>
<p> 基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 下面代码有什么问题？</span><br><span class="line">var str = &#x27;andy&#x27;;</span><br><span class="line">console.log(str.length);</span><br></pre></td></tr></table></figure>

<p> 按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</p>
<p> js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span><br><span class="line">var temp = new String(&#x27;andy&#x27;);</span><br><span class="line">// 2. 赋值给我们声明的字符变量</span><br><span class="line">str = temp;</span><br><span class="line">// 3. 销毁临时变量</span><br><span class="line">temp = null;</span><br></pre></td></tr></table></figure>

<p>js规定里面简单数据类型有string</p>
<p>基本包装类型，严格来说不属于上面两个中的任意一个，但是又和这两种类型息息相关</p>
<h4 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h4><p> 指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p>
<p> 当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。 ​ 由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会因为开辟的空间太多死机</p>
<h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><p> 字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecc3cc0ef.png"></p>
<p> 案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p>
<ol>
<li>先查找第一个o出现的位置</li>
<li>然后 只要indexOf 返回的结果不是 -1 就继续往后查找</li>
<li>因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">&#x27;agsdgdasdfsdgfasdfssdaf&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> index=a.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="keyword">while</span>(index!==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">            index=a.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>,index+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p> 字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecc360370.png"></p>
<p> 在上述方法中，charCodeAt方法返回的是指定位置上字符对应的ASCII码，ASCII码对照表如下：</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecc4cb306.png"></p>
<p> 案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p>
<ol>
<li><p>核心算法：利用 charAt(） 遍历这个字符串</p>
</li>
<li><p>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</p>
</li>
<li><p>遍历对象，得到最大值和该字符</p>
<p> 注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">var str=<span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line">        var o=&#123;&#125;;</span><br><span class="line">        console.log(typeof o);  //返回的是object</span><br><span class="line">        <span class="keyword">for</span>(var i=0;i&lt;str.length;i++)&#123;</span><br><span class="line">            var char=str[i];</span><br><span class="line">            <span class="keyword">if</span>(o[char])&#123;   //判断o里面有没有char这个字符</span><br><span class="line">                o[char]++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                o[char]=1;  //如果没有加进去 ——添加可以用这种方法</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(o);</span><br><span class="line">        var max=0; //不能赋值成var max=o[0] 因为o不是数组</span><br><span class="line">        <span class="keyword">for</span>(var i <span class="keyword">in</span> o)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max&lt;o[i])&#123; //还是要结合下标</span><br><span class="line">                max=o[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(max);</span><br></pre></td></tr></table></figure>

<p>var o&#x3D;{} 这是声明了一个对象不是数组</p>
<h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p> 字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecc47b823.png"></p>
<p>substr(start,length) 第二个参数是长度不是截止位置</p>
<h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p> replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串.replace(被替换的字符串， 要替换为的字符串)；</span><br></pre></td></tr></table></figure>

<p>这个只是返回值是替换了的，原来的字符串还是原来的样子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> temp=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(temp);      <span class="comment">//返回 abcd </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(temp.<span class="title function_">replace</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;c&quot;</span>));  <span class="comment">//返回cbcd</span></span><br><span class="line">temp=temp.<span class="title function_">replace</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(temp);  <span class="comment">//返回cbcd</span></span><br></pre></td></tr></table></figure>



<h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><p> split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p>
<p> 其使用格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串.split(&quot;分割字符&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> temp=<span class="string">&quot;1234556&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(temp.<span class="title function_">split</span>(<span class="string">&quot;5&quot;</span>));  返回的是 [<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;6&quot;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="简单数据类型和复杂数据类型"><a href="#简单数据类型和复杂数据类型" class="headerlink" title="简单数据类型和复杂数据类型"></a>简单数据类型和复杂数据类型</h2><h3 id="简单数据类型-1"><a href="#简单数据类型-1" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>​		<strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p>
<p>但是null返回的是一个空的对象（一开始是设计错误）</p>
<p>如果有个变量我们以后打算存储为对象，暂时没想好放啥，这时候就给null</p>
<h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><p>​		<strong>复杂数据类型（引用类型）</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p>
<h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><ul>
<li>堆栈空间分配区别：</li>
</ul>
<p>　　1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p>
<p>简单数据类型存放到栈里面</p>
<p>　　2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecc399e1a.png"></p>
<ul>
<li><p>简单数据类型的存储方式</p>
<p>​		值类型变量的数据直接存放在变量（栈空间）中</p>
</li>
</ul>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecc43d09f.png"></p>
<ul>
<li><p>复杂数据类型的存储方式</p>
<p>​		引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p>
</li>
<li><h3 id="简单类型传参"><a href="#简单类型传参" class="headerlink" title="简单类型传参"></a>简单类型传参</h3></li>
</ul>
<p>​		函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么<strong>在方法内部对形参做任何修改，都不会影响到的外部变量</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);   <span class="comment">//返回11</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fn</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)；  <span class="comment">//返回10</span></span><br></pre></td></tr></table></figure>

<p>直接给的值，相互之间是不会进行影响的</p>
<img align="left" src="https://tu.sunning.fit/i/2022/04/26/6267ecc40fed1.png" alt="image-20220419152834078" style="zoom: 80%;" />

<h3 id="复杂数据类型传参"><a href="#复杂数据类型传参" class="headerlink" title="复杂数据类型传参"></a>复杂数据类型传参</h3><p>​		函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">x</span>) &#123; <span class="comment">// x = p</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 2. 这个输出什么 ?    刘德华</span></span><br><span class="line">    x.<span class="property">name</span> = <span class="string">&quot;张学友&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 3. 这个输出什么 ?    张学友</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);    <span class="comment">// 1. 这个输出什么 ?   刘德华</span></span><br><span class="line"><span class="title function_">f1</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);    <span class="comment">// 4. 这个输出什么 ?  张学友</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/04/26/6267ecc54c4a7.png" alt="image-20220419152716842"></p>
<p>这个就是直接设置成什么值就是什么值了</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>JavaScript基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/2022/07/21/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p>段落的换行是俩个以上的空格加上回车  </p>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p><em>斜体</em></p>
<p><strong>粗体</strong></p>
<p><em><strong>粗斜体</strong></em></p>
<p>分割线</p>
<hr>
<p><u>下划线</u></p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul>
<li>无序列表</li>
</ul>
<ol>
<li>有序列表<ol>
<li>列表嵌套（用tab即可）</li>
</ol>
</li>
</ol>
<p>想要取消上面的格式按回车即可</p>
<h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><blockquote>
<p>第一层</p>
<blockquote>
<p>第二层</p>
<blockquote>
<p>第三层</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>区块使用列表</p>
<ol>
<li>有序<ul>
<li>无序列表</li>
</ul>
</li>
</ol>
</blockquote>
<p><code>代码块</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">用三个```即可包裹</span><br></pre></td></tr></table></figure>



<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接名称</a></p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>现在还无法指定图片的高度和宽度，如果需要可以用img标签</p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><p>支持部分html</p>
<p>转义字符 * (在标号前面加上一个反斜杠即可)</p>
<h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"></span><br><span class="line">A[方形]--&gt;B[圆角]</span><br><span class="line"></span><br><span class="line">	B--&gt;C&#123;条件A&#125;</span><br><span class="line">	C--&gt;|a=2|D[结果]</span><br></pre></td></tr></table></figure>



<p><a href="https://blog.csdn.net/lis_12/article/details/80693975">https://blog.csdn.net/lis_12/article/details/80693975</a></p>
]]></content>
      <categories>
        <category>Markdown语法</category>
      </categories>
      <tags>
        <tag>Markdown语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象</title>
    <url>/2022/07/21/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>格式 extends 关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 父类 &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>java 不支持多继承，单支持多重继承</p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Penguin</span>  <span class="keyword">extends</span>  <span class="title class_">Animal</span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h3><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="super与this关键字"><a href="#super与this关键字" class="headerlink" title="super与this关键字"></a>super与this关键字</h3><p>super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p>
<p>this关键字：指向自己的引用。</p>
<p>但如果在子类里面没有自己重新声明一个相同的变量，this指的就是父类的那个变量了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>&#123;</span><br><span class="line">    String a=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span> <span class="keyword">extends</span> <span class="title class_">Test2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">haha</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.a);  <span class="comment">//这里的this，指的是Test2的a</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>&#123;</span><br><span class="line">    String a=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span> <span class="keyword">extends</span> <span class="title class_">Test2</span>&#123;</span><br><span class="line">    String a=<span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">haha</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.a);  <span class="comment">//这里的this，指的是现在这个类里面的a</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>final 可以用来修饰变量（包括类属性、对象属性、局部变量和形参）、方法（包括类方法和对象方法）和类</p>
<p>含义就是”最终的”</p>
<p>使用 final 关键字声明类，就是把类定义定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明类：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> class 类名 &#123;<span class="comment">//类体&#125;</span></span><br><span class="line"><span class="comment">//声明方法：</span></span><br><span class="line"></span><br><span class="line">修饰符(<span class="keyword">public</span>/<span class="keyword">private</span>/<span class="keyword">default</span>/<span class="keyword">protected</span>) <span class="keyword">final</span> 返回值类型 方法名()&#123;<span class="comment">//方法体&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>final定义的类，其中的属性，方法不是final的</p>
</blockquote>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul>
<li>子类不继承父类的构造器（构造方法或构造函数）的，它只是调用（隐式或显式）</li>
<li>如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。</li>
<li>如果父类构造器没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造器。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line">  SuperClass()&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;SuperClass()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  SuperClass(<span class="type">int</span> n) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;SuperClass(int n)&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SubClass 类继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass()&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass&quot;</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">SubClass</span><span class="params">(<span class="type">int</span> n)</span>&#123; </span><br><span class="line">    <span class="built_in">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass(int n):&quot;</span>+n);</span><br><span class="line">    <span class="built_in">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SubClass2 类继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass2</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass2()&#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass2&quot;</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">SubClass2</span><span class="params">(<span class="type">int</span> n)</span>&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass2(int n):&quot;</span>+n);</span><br><span class="line">    <span class="built_in">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSuperSub</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String args[])</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------SubClass 类继承------&quot;</span>);</span><br><span class="line">    <span class="type">SubClass</span> <span class="variable">sc1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass</span>();</span><br><span class="line">    <span class="type">SubClass</span> <span class="variable">sc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass</span>(<span class="number">100</span>); </span><br><span class="line">    System.out.println(<span class="string">&quot;------SubClass2 类继承------&quot;</span>);</span><br><span class="line">    <span class="type">SubClass2</span> <span class="variable">sc3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass2</span>();</span><br><span class="line">    <span class="type">SubClass2</span> <span class="variable">sc4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass2</span>(<span class="number">200</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="重写-Override-与重载-Overload"><a href="#重写-Override-与重载-Overload" class="headerlink" title="重写(Override)与重载(Overload)"></a>重写(Override)与重载(Overload)</h1><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><blockquote>
<p>抽象方法的集合，接口常以interface来声明，一个类通过继承接口的方式，实现接口的抽象方法</p>
<p> 接口可以让我们提前定义好一个类的类型和规范是什么样子，还可以给其他类继承，使多个类都能继承自同一个接口，使用同一个规范</p>
</blockquote>
<h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h2><blockquote>
<p>有许多的类对需要实现同一个功能，可以通过把相同的方法抽象出来，放在一起做成接口，给需要实现相同功能的类实现接口，</p>
<p>对类的实现做出规范，通过实现多个接口，间接达到多重继承的效果</p>
</blockquote>
<h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p><strong>声明接口：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[可见度] interface 接口名称 [extends 其他的接口名]&#123;</span><br><span class="line">    <span class="comment">//声明变量</span></span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现接口：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxx</span> implements 接口[，接口,。。。]&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Mock</title>
    <url>/2022/07/21/Mock/</url>
    <content><![CDATA[<h1 id="fastmock"><a href="#fastmock" class="headerlink" title="fastmock"></a>fastmock</h1><p><a href="https://www.fastmock.site/docs">https://www.fastmock.site/docs</a></p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="https://tu.sunning.fit/i/2022/07/06/62c5449f2e079.png" alt="image-20220609172204837"></p>
<h2 id="增加接口"><a href="#增加接口" class="headerlink" title="增加接口"></a>增加接口</h2><p><img src="https://tu.sunning.fit/i/2022/07/06/62c544ba58815.png" alt="image-20220609172318873"></p>
<h2 id="基础语法："><a href="#基础语法：" class="headerlink" title="基础语法："></a>基础语法：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Function使用："><a href="#Function使用：" class="headerlink" title="Function使用："></a>Function使用：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>: <span class="keyword">function</span>(<span class="params">&#123; _req &#125;</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> _req.<span class="property">query</span>.<span class="property">name</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params">&#123; _req, Mock &#125;</span>)&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> _req.<span class="property">query</span>.<span class="property">name</span> ? &#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;@id()&quot;</span>),</span><br><span class="line">     <span class="attr">cname</span>: <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;@cname()&quot;</span>),</span><br><span class="line">   &#125; : &#123;&#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="Function参数："><a href="#Function参数：" class="headerlink" title="Function参数："></a>Function参数：</h3><blockquote>
<p>_req.query. xxx 可以获得post提交的xxx参数</p>
<p>_req.body     当 post 请求以 x-www-form-urlencoded 方式提交时，我们可以拿到请求的参数对象</p>
</blockquote>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Mock</td>
<td>Mock 对象</td>
</tr>
<tr>
<td>_req.url</td>
<td>获得请求 url 地址</td>
</tr>
<tr>
<td>_req.method</td>
<td>获取请求方法</td>
</tr>
<tr>
<td>_req.params</td>
<td>获取 url 参数对象</td>
</tr>
<tr>
<td>_req.querystring</td>
<td>获取查询参数字符串(url中?后面的部分)，不包含 ?</td>
</tr>
<tr>
<td>_req.query</td>
<td>将查询参数字符串进行解析并以对象的形式返回，如果没有查询参数字字符串则返回一个空对象</td>
</tr>
<tr>
<td>_req.body</td>
<td>当 post 请求以 x-www-form-urlencoded 方式提交时，我们可以拿到请求的参数对象</td>
</tr>
<tr>
<td>_req.path</td>
<td>获取请求路径名</td>
</tr>
<tr>
<td>_req.header</td>
<td>获取请求头对象</td>
</tr>
<tr>
<td>_req.originalUrl</td>
<td>获取请求原始地址</td>
</tr>
<tr>
<td>_req.search</td>
<td>获取查询参数字符串，包含 ?</td>
</tr>
<tr>
<td>_req.host</td>
<td>获取 host (hostname:port)</td>
</tr>
<tr>
<td>_req.hostname</td>
<td>获取 hostname</td>
</tr>
<tr>
<td>_req.type</td>
<td>获取请求 Content-Type，不包含像 “charset” 这样的参数</td>
</tr>
<tr>
<td>_req.protocol</td>
<td>返回请求协议</td>
</tr>
<tr>
<td>_req.ip</td>
<td>请求远程地址</td>
</tr>
<tr>
<td>_req.get(field)</td>
<td>获取请求 header 中对应 field 的值</td>
</tr>
<tr>
<td>_req.cookies(field)</td>
<td>获取请求 cookies 中对应 field 的值</td>
</tr>
</tbody></table>
<h2 id="自定义响应"><a href="#自定义响应" class="headerlink" title="自定义响应"></a>自定义响应</h2><p>当定义的数据结构中包含 _res 字段的时候，会进入一个特殊逻辑，可以给返回的请求添加一些定制信息</p>
<p>这个只是对_res字段进行的操作</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>status</td>
<td>可以定制返回的 http status code，默认是 200</td>
</tr>
<tr>
<td>cookies</td>
<td>可以定制需要设置的 cookie（暂时不支持设置过期时间等）</td>
</tr>
<tr>
<td>headers</td>
<td>可以定制返回的 response 的 header</td>
</tr>
<tr>
<td>data</td>
<td>如果有这个字段，会以此数据直接覆盖整个返回的数据，并且此处不支持 mock 的语法（如果 _res.status 的值为 200，则不会覆盖默认定义的 mock 数据）</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: <span class="string">&quot;hah&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_res&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;success&quot;</span>: <span class="literal">false</span></span><br><span class="line">     &#125;,</span><br><span class="line">    <span class="string">&quot;cookies&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;test&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Power&quot;</span>: <span class="string">&quot;easy-mock&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以此定义为例，当 _res.status 的值为 400 的时候，用户端接收到的响应将会是 _res.data 中定义的数据，并且返回一个 status code 为 400 的响应，响应的 header 中会包含一个叫做 Power 的值，并为浏览器设置一个叫做 test 的 cookie。</p>
<p>当想要返回正常的 mock 数据的时候，修改 _res.status 为 200，或者将整个 _res 删掉即可。</p>
<h1 id="Mock语法"><a href="#Mock语法" class="headerlink" title="Mock语法"></a>Mock语法</h1><h1 id="PostMan"><a href="#PostMan" class="headerlink" title="PostMan"></a>PostMan</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S postman-bin</span><br></pre></td></tr></table></figure>

<p>安装postman是打不开的</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Mock</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2022/07/21/Nginx/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。2011年6月1日，nginx 1.0.4发布。</span><br><span class="line"></span><br><span class="line">高并发，大流量：需要面对高并发用户，大流量访问。举个例子，去往迪拜的飞机有200张票，但是有100w人都挤进系统买票，如何让这100w人能够看到票务的实时更新，以及顺利的买到一张票，都是一个网站架构师应该考虑的问题。这也许对于淘宝的“双十一”1000w的一分钟独立访问用户量来说，是个微不足道的数字，但是对于用户的体验以及网站的口碑来说，都是一项不小的挑战</span><br><span class="line"></span><br><span class="line">Nginx 是一个安装非常的简单、配置文件非常简洁（还能够支持perl语法）、Bug非常少的服务。Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。</span><br><span class="line"></span><br><span class="line">Nginx代码完全用C语言从头写成。官方数据测试表明能够支持高达 50,000 个并发连接数的响应。</span><br></pre></td></tr></table></figure>

<h2 id="正向代理，反向代理"><a href="#正向代理，反向代理" class="headerlink" title="正向代理，反向代理"></a>正向代理，反向代理</h2><p><img src="https://tu.sunning.fit/i/2022/07/16/62d2babe61a3a.png" alt="image-20220716211851545"></p>
<p><code>如果把局域网外的Internet想象成一个巨大的资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理（也就是大家常说的，通过正向代理进行上网功能）</code>（翻墙）</p>
<p><img src="https://tu.sunning.fit/i/2022/07/16/62d2bb040637f.png" alt="image-20220716212001116"></p>
<p>服务器不只一个，每次让不同的服务器来处理请求，反向代理</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>轮询</p>
<p>轮询方式是Nginx负载默认的方式，顾名思义，所有请求都按照时间顺序分配到不同的服务上，如果服务Down掉，可以自动剔除</p>
<p>权重</p>
<p>指定每个服务的权重比例，weight和访问比率成正比，通常用于后端服务机器性能不统一，将性能好的分配权重高来发挥服务器最大性能</p>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>在Web开发中，通常来说，动态资源其实就是指那些后台资源，而静态资源就是指HTML，JavaScript，CSS，img等文件。</p>
<p>一般来说，都需要将动态资源和静态资源分开，将静态资源部署在Nginx上，当一个请求来的时候，如果是静态资源的请求，就直接到nginx配置的静态资源目录下面获取资源，如果是动态资源的请求，nginx利用反向代理的原理，把请求转发给后台应用去处理，从而实现动静分离。</p>
<p>在使用前后端分离之后，可以很大程度的提升静态资源的访问速度，同时在开过程中也可以让前后端开发并行可以有效的提高开发时间，也可以有些的减少联调时间 。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装arch下贼简单</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S nginx-mainline</span><br></pre></td></tr></table></figure>

<p>启动服务<code>nginx.service</code></p>
<p>然后在开启的服务器的80默认端口就可以看到nginx了</p>
<p>默认在内网<code>[http://127.0.0.1](http://127.0.0.1/)</code>页面服务的页面是<code>/usr/share/nginx/html</code></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>可以通过编辑在<code>/etc/nginx/</code>下的文件来修改配置，主配置文件在<code>/etc/nginx/nginx.conf</code></p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>查看版本号：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure>

<p>停止nginx</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>服务端</category>
      </categories>
      <tags>
        <tag>服务端</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>PM2</title>
    <url>/2022/07/21/PM2/</url>
    <content><![CDATA[<h1 id="PM2介绍"><a href="#PM2介绍" class="headerlink" title="PM2介绍"></a>PM2介绍</h1><p>pm2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，因为在工作中遇到服务器重启后，需要一个个去重新启动每个服务，这样不仅繁琐、效率低，而且容易遗忘开启一些服务。</p>
<h2 id="PM2-的主要特性"><a href="#PM2-的主要特性" class="headerlink" title="PM2 的主要特性"></a>PM2 的主要特性</h2><p>内建负载均衡（使用 Node cluster 集群模块）<br>后台运行<br>0 秒停机重载<br>具有 Ubuntu 和 CentOS 的启动脚本<br>停止不稳定的进程（避免无限循环）<br>控制台检测<br>提供 HTTP API<br>远程控制和实时的接口 API ( Nodejs 模块,允许和 PM2 进程管理器交互 )</p>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i -g pm2</span><br></pre></td></tr></table></figure>

<p>安装结束后查看版本号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 -v</span><br></pre></td></tr></table></figure>

<h2 id="启动，使用"><a href="#启动，使用" class="headerlink" title="启动，使用"></a>启动，使用</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 start index.js</span><br></pre></td></tr></table></figure>

<p>命令行参数</p>
<ul>
<li><p>–watch：监听应用目录的变化，一旦发生变化，自动重启。</p>
</li>
<li><p>-i or –instance：启用多少个实例，可用于负载均衡，如果 -i 0 或者 -i max，则根据当前机器核数确定实例数目。</p>
<p>代表开启多少个实例</p>
<p><code>pm2 start index2.js -i 12 </code> 就会开启12个index2进程</p>
</li>
<li><p>–ignore-watch：排除监听的目录或文件，可以是特定的文件名，也可以是正则。</p>
</li>
</ul>
<p>例：</p>
<p><img src="https://tu.sunning.fit/i/2022/07/16/62d2ae14599b1.png" alt="image-20220716202434181"></p>
<p><strong>重启：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 restart index.js</span><br></pre></td></tr></table></figure>



<p><strong>停止命令:</strong></p>
<p>停止特定的应用，可以通过 pm2 list 先获取应用的名字或者进程的 id，然后再调用以下命令停止相应的应用；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pm2 stop app_name | app_id</span><br></pre></td></tr></table></figure>

<p>如果需要停止全部的应用，则使用以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 stop all</span><br></pre></td></tr></table></figure>



<p><strong>删除命令:</strong></p>
<p>删除特定的应用，可以通过 pm2 list 先获取应用的名字或者进程的 id，然后再调用以下命令删除相应的应用；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 delete app_name | app_id</span><br></pre></td></tr></table></figure>

<p>如果需要删除全部的应用，则使用以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 delete all</span><br></pre></td></tr></table></figure>



<p><strong>查看有哪些进程:</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 list</span><br></pre></td></tr></table></figure>



<p><strong>查看日志：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 monit</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/07/16/62d2b7ae3ba56.png" alt="image-20220716210546854"></p>
<p>这里是能看到访问者的ip地址的</p>
]]></content>
      <categories>
        <category>服务端</category>
      </categories>
      <tags>
        <tag>服务端</tag>
        <tag>PM2</tag>
      </tags>
  </entry>
  <entry>
    <title>Pinia</title>
    <url>/2022/07/21/Pinia/</url>
    <content><![CDATA[<h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line"></span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure>

<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p><strong>Vue3：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">import &#123;createApp&#125; from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">import App from <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">import &#123;createPinis&#125; from <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line">const store = createPinia()</span><br><span class="line"><span class="built_in">let</span> app=createApp(App)</span><br><span class="line"></span><br><span class="line">app.use(store)</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>调用它的createPinis的方法，是个钩子函数，需要调用它</p>
<p>然后用store来接住它，</p>
<p>想要用一个组件用Vue.use()即可</p>
<p><strong>Vue2:</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">import &#123; createPinia, PiniaVuePlugin &#125; from <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"> </span><br><span class="line">Vue.use(PiniaVuePlugin)</span><br><span class="line">const pinia = createPinia()</span><br><span class="line"> </span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  // other options...</span><br><span class="line">  // ...</span><br><span class="line">  // note the same `pinia` instance can be used across multiple Vue apps on</span><br><span class="line">  // the same page</span><br><span class="line">  pinia,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="初始化Store仓库"><a href="#初始化Store仓库" class="headerlink" title="初始化Store仓库"></a>初始化Store仓库</h1><h2 id="index文件"><a href="#index文件" class="headerlink" title="index文件"></a>index文件</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Names</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./store-name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTestStore = <span class="title function_">defineStore</span>(<span class="title class_">Names</span>.<span class="property">Test</span>, &#123;</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>defineStore需要传入两个参数</p>
<ul>
<li>一个是唯一的id值（可以当作一个命名空间）这个是必要的，Pania使用它来将商店连接到devtools</li>
<li>一个传入一个对象，对象里面state,getters,actions</li>
</ul>
</li>
<li><p>为了确保传入的数值是唯一的数值，所以创建了一个新的ts文件 store-name文件 枚举类型 （把名称抽离出去了）</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Names</span>&#123;</span><br><span class="line">    <span class="title class_">Test</span>=<span class="string">&#x27;Test&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>useTestStore：将返回的函数命名为*use…*是可组合项之间的约定，以使其使用习惯。</li>
</ul>
<h1 id="state"><a href="#state" class="headerlink" title="state"></a>state</h1><p>必须是一个箭头函数，返回值是一个对象</p>
<p>index中和state有关的部分：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">state</span>:()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">         <span class="attr">current</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是完整的index文件：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Names</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./store-namespace&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTestStore=<span class="title function_">defineStore</span>(<span class="title class_">Names</span>.<span class="property">Test</span>,&#123;</span><br><span class="line">     <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> &#123;</span><br><span class="line">             <span class="attr">current</span>:<span class="number">1</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">//类似于computed 可以帮我们去修饰我们的值</span></span><br><span class="line">     <span class="attr">getters</span>:&#123;</span><br><span class="line"> </span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">//可以操作异步 和 同步提交state</span></span><br><span class="line">     <span class="attr">actions</span>:&#123;</span><br><span class="line"> </span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如何在页面上面使用：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useTestStore <span class="keyword">from</span> <span class="string">&#x27;components/ExampleComponent.vue&#x27;</span>;<span class="comment">//引入创建的方法</span></span><br><span class="line"></span><br><span class="line">在setup里面</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Text</span>=<span class="title function_">useTestStore</span>();</span><br><span class="line">记得暴露出方法</span><br><span class="line"></span><br><span class="line">然后就可以使用<span class="title class_">Text</span>.<span class="property">xxx</span>来使用pinia里面的东西了</span><br></pre></td></tr></table></figure>

<h2 id="修改State值的五种方法"><a href="#修改State值的五种方法" class="headerlink" title="修改State值的五种方法"></a>修改State值的五种方法</h2><h3 id="直接修改"><a href="#直接修改" class="headerlink" title="直接修改"></a>直接修改</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Add</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title class_">Test</span>.<span class="property">current</span>++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="patch的普通修改方式"><a href="#patch的普通修改方式" class="headerlink" title="patch的普通修改方式"></a>patch的普通修改方式</h3><p>批量修改</p>
<p>它的实例上面有$patch方法可以批量修改多个值</p>
<p>但是这个不能进行函数的计算，是属性 冒号 值 的写法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Add</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  <span class="title class_">Test</span>.$patch(&#123;</span><br><span class="line">    <span class="attr">counter</span>:<span class="number">30</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="patch的函数修改方式"><a href="#patch的函数修改方式" class="headerlink" title="patch的函数修改方式"></a>patch的函数修改方式</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Test</span>.$patch(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(state.<span class="property">counter</span>&lt;<span class="number">12</span>)&#123;</span><br><span class="line">    state.<span class="property">counter</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="通过原始对象修改整个实例"><a href="#通过原始对象修改整个实例" class="headerlink" title="通过原始对象修改整个实例"></a>通过原始对象修改整个实例</h3><p><code>$state</code>您可以通过将store的属性设置为新对象来替换store的整个状态</p>
<p>这种方法要修改就是修改整个state对象里面的东西</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Add</span> ()=&gt;&#123;</span><br><span class="line">    <span class="title class_">Test</span>.<span class="property">$state</span>=&#123;</span><br><span class="line">        <span class="attr">current</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过Action修改"><a href="#通过Action修改" class="headerlink" title="通过Action修改"></a>通过Action修改</h3><h2 id="结构store"><a href="#结构store" class="headerlink" title="结构store"></a>结构store</h2><p>pinia不允许直接结构，因为会失去响应式</p>
<p>解决方式：</p>
<p>使用storeToRefs</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="title function_">useTestStore</span>()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> &#123; current, name &#125; = <span class="title function_">storeToRefs</span>(<span class="title class_">Test</span>)</span><br></pre></td></tr></table></figure>

<p>原理和toRefs一样的，给里面的数据包裹一层toref</p>
<blockquote>
<p>源码</p>
<p>循环store 通过 isRef isReactive 判断 如果是响应式对象直接拷贝一份给refs 对象 将其原始对象包裹toRef 使其变为响应式对象 </p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54565379bf.png" alt="image-20220611212405287"></p>
</blockquote>
<h1 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h1><p>和Vuex相比，去掉了Mutation，可以直接在action里面修改state属性</p>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>定义方法，调用的时候直接正常调用即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Add</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  <span class="title class_">Test</span>.<span class="title function_">increment</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>结合async await</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Names</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./store-naspace&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">isChu</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Login</span> = (): <span class="title class_">Promise</span>&lt;<span class="title class_">Result</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;小满&#x27;</span>,</span><br><span class="line">                <span class="attr">isChu</span>: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTestStore = <span class="title function_">defineStore</span>(<span class="title class_">Names</span>.<span class="property">TEST</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">user</span>: &lt;<span class="title class_">Result</span>&gt;&#123;&#125;,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="keyword">async</span> <span class="title function_">getLoginInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title class_">Login</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">user</span> = result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>调用正常调用即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;Add&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             &#123;&#123;Test.user&#125;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;useTestStore&#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="title function_">useTestStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">Add</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="title class_">Test</span>.<span class="title function_">getLoginInfo</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h1 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h1><p>主要的作用类似computed数据修饰并且有缓存</p>
<ul>
<li><p>使用箭头函数不能使用this，所以如果想要修改值需要用state</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getters:&#123;</span><br><span class="line">   newPrice:(state)=&gt;  `$$&#123;state.user.price&#125;`</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>


</li>
<li><p>普通函数形式可以使用this</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">getters</span>:&#123;</span><br><span class="line">   newCurrent ():<span class="built_in">number</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> ++<span class="variable language_">this</span>.<span class="property">current</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>getters互相调用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">getters</span>:&#123;</span><br><span class="line">   newCurrent ():<span class="built_in">number</span> | <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> ++<span class="variable language_">this</span>.<span class="property">current</span> + <span class="variable language_">this</span>.<span class="property">newName</span></span><br><span class="line">   &#125;,</span><br><span class="line">   newName ():<span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">`$-<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h1><h2 id="reset"><a href="#reset" class="headerlink" title="$ reset"></a>$ reset</h2><p>重置store到他的初始状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">state: () =&gt; (&#123;</span><br><span class="line">     user: &lt;Result&gt;&#123;&#125;,</span><br><span class="line">     name: &quot;default&quot;,</span><br><span class="line">     current:1</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>

<p>如果把值改变到了10</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">     <span class="title class_">Test</span>.<span class="property">current</span>++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用$reset() 会重置会原始状态</p>
<h2 id="订阅state的改变"><a href="#订阅state的改变" class="headerlink" title="订阅state的改变"></a>订阅state的改变</h2><p>类似于Vuex 的abscribe 只要有state 的变化就会走这个函数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Test</span>.$subscribe(<span class="function">(<span class="params">args,state</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(args,state);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>args是新值旧值</p>
<p>state就是state的新旧值</p>
<p>加入组件写在之后还想要继续调用设置detached:true</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Test</span>.$subscribe(<span class="function">(<span class="params">args,state</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(args,state);</span><br><span class="line"></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">detached</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>返回值</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5456f9cd7b.png" alt="image-20220611215539667"></p>
<h2 id="订阅actions的调用"><a href="#订阅actions的调用" class="headerlink" title="订阅actions的调用"></a>订阅actions的调用</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Test</span>.$onAction(<span class="function">(<span class="params">args</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(args); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5457403bdb.png" alt="image-20220611215558402"></p>
<h1 id="pinia插件"><a href="#pinia插件" class="headerlink" title="pinia插件"></a>pinia插件</h1><p>pinia 和 vuex 都有一个通病 页面刷新状态会丢失，可以写一个pinia 插件缓存他的值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> __piniaKey = <span class="string">&#x27;__PINIAKEY__&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptPinia</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Options</span>&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> setStorage = (<span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">value</span>: <span class="built_in">any</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value))</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStorage</span> = (<span class="params">key: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key) ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key) <span class="keyword">as</span> <span class="built_in">string</span>) : &#123;&#125;) </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">piniaPlugin</span> = (<span class="params">options: OptPinia</span>) =&gt; &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">context: PiniaPluginContext</span>) =&gt;</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> &#123; store &#125; = context;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">getStorage</span>(<span class="string">`<span class="subst">$&#123;options?.key ?? __piniaKey&#125;</span>-<span class="subst">$&#123;store.$id&#125;</span>`</span>)</span><br><span class="line"> </span><br><span class="line">store.$subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">setStorage</span>(<span class="string">`<span class="subst">$&#123;options?.key ?? __piniaKey&#125;</span>-<span class="subst">$&#123;store.$id&#125;</span>`</span>, <span class="title function_">toRaw</span>(store.<span class="property">$state</span>));</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">...data</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">pinia.<span class="title function_">use</span>(<span class="title function_">piniaPlugin</span>(&#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">key</span>: <span class="string">&quot;pinia&quot;</span> </span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>Quasar</title>
    <url>/2022/07/21/Quasar/</url>
    <content><![CDATA[<h1 id="安装及构建"><a href="#安装及构建" class="headerlink" title="安装及构建"></a>安装及构建</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>要node.js 14以上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i -g @quasar/cli</span><br></pre></td></tr></table></figure>

<h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>在想要创建的位置使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init quasar</span><br></pre></td></tr></table></figure>

<p>&amp;&amp;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn create quasar</span><br></pre></td></tr></table></figure>





<p>项目构建的设置</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5457d0d25c.png" alt="image-20220529110836606"></p>
<p>check the features needed for ….</p>
<ul>
<li>eslint 代码检查工具</li>
<li>state management (Pinia) （和Vuex一样）</li>
<li>Vue-il8n 多语言支持</li>
</ul>
<p>pick an eslint preset </p>
<ul>
<li>prettier 代码风格</li>
</ul>
<h2 id="创建新的文件"><a href="#创建新的文件" class="headerlink" title="创建新的文件"></a>创建新的文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar <span class="keyword">new</span> 目录 文件名</span><br></pre></td></tr></table></figure>



<h1 id="基础了解"><a href="#基础了解" class="headerlink" title="基础了解"></a>基础了解</h1><h2 id="给的api怎么读"><a href="#给的api怎么读" class="headerlink" title="给的api怎么读"></a>给的api怎么读</h2><p><img src="https://tu.sunning.fit/i/2022/07/06/62c54581f00f8.png" alt="image-20220529170753749"></p>
<p>behavior是设置这个组件有什么样子的功能</p>
<p>model是数据绑定可以绑什么东西，绑定之后有什么功能</p>
<p>style是样式</p>
<h2 id="css文件夹"><a href="#css文件夹" class="headerlink" title="css文件夹"></a>css文件夹</h2><p><img src="https://tu.sunning.fit/i/2022/07/06/62c545d45081c.png" alt="image-20220529150115508"></p>
<p>app里面是全局的css</p>
<p>quasar.variables里面是定义的全局的颜色变量（quasar自带的组件用的就是这个主题变量）</p>
<h2 id="quasar-config-js"><a href="#quasar-config-js" class="headerlink" title="quasar.config.js"></a>quasar.config.js</h2><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>全局搜css,定位到，然后把想要全局引入的东西放到样式表里面即可（但是想要引入的东西要是在css文件夹下面的东西）</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c545d860aca.png" alt="image-20220529151155909"></p>
<h3 id="boot"><a href="#boot" class="headerlink" title="boot"></a>boot</h3><p>boot文件夹里面是需要用的组件，在boot文件夹里面写完组件，要在quasar.config.js里面的boot写进去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">boot</span>: [</span><br><span class="line">  <span class="string">&#x27;i18n&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h3 id="extras"><a href="#extras" class="headerlink" title="extras"></a>extras</h3><p>extras里面配置的是需要用的图标</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">extras</span>: [</span><br><span class="line">  <span class="comment">// &#x27;ionicons-v4&#x27;,</span></span><br><span class="line">  <span class="comment">// &#x27;mdi-v5&#x27;,</span></span><br><span class="line">  <span class="comment">// &#x27;fontawesome-v6&#x27;,</span></span><br><span class="line">  <span class="comment">// &#x27;eva-icons&#x27;,</span></span><br><span class="line">  <span class="comment">// &#x27;themify&#x27;,</span></span><br><span class="line">  <span class="comment">// &#x27;line-awesome&#x27;,</span></span><br><span class="line">  <span class="comment">// &#x27;roboto-font-latin-ext&#x27;, // this or either &#x27;roboto-font&#x27;, NEVER both!</span></span><br><span class="line">  <span class="string">&#x27;roboto-font&#x27;</span>, <span class="comment">// optional, you are not bound to it</span></span><br><span class="line">  <span class="string">&#x27;material-icons&#x27;</span>, <span class="comment">// optional, you are not bound to it</span></span><br><span class="line">  <span class="string">&#x27;bootstrap-icons&#x27;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>有个默认没有的但是很常用的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;bootstrap-icons&#x27;</span></span><br></pre></td></tr></table></figure>







<h3 id="bulid-和编译相关的"><a href="#bulid-和编译相关的" class="headerlink" title="bulid 和编译相关的"></a>bulid 和编译相关的</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">build</span>: &#123;</span><br><span class="line">      <span class="attr">vueRouterMode</span>: <span class="string">&#x27;hash&#x27;</span>, <span class="comment">// available values: &#x27;hash&#x27;, &#x27;history&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// transpile: false,</span></span><br><span class="line">      <span class="comment">// publicPath: &#x27;/&#x27;,</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add dependencies for transpiling with Babel (Array of string/regex)</span></span><br><span class="line">      <span class="comment">// (from node_modules, which are by default not transpiled).</span></span><br><span class="line">      <span class="comment">// Applies only if &quot;transpile&quot; is set to true.</span></span><br><span class="line">      <span class="comment">// transpileDependencies: [],</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// rtl: true, // https://quasar.dev/options/rtl-support</span></span><br><span class="line">      <span class="comment">// preloadChunks: true,</span></span><br><span class="line">      <span class="comment">// showProgress: false,</span></span><br><span class="line">      <span class="comment">// gzip: true,</span></span><br><span class="line">      <span class="comment">// analyze: true,</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Options below are automatically set depending on the env, set them if you want to override</span></span><br><span class="line">      <span class="comment">// extractCSS: false,</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// https://v2.quasar.dev/quasar-cli-webpack/handling-webpack</span></span><br><span class="line">      <span class="comment">// &quot;chain&quot; is a webpack-chain object https://github.com/neutrinojs/webpack-chain</span></span><br><span class="line"></span><br><span class="line">      chainWebpack (chain) &#123;</span><br><span class="line">        chain.<span class="title function_">plugin</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>)</span><br><span class="line">          .<span class="title function_">use</span>(<span class="title class_">ESLintPlugin</span>, [&#123; <span class="attr">extensions</span>: [ <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;vue&#x27;</span> ] &#125;])</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>路由的模式默认是哈希</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chainWebpack (chain) &#123;</span><br><span class="line">        chain.<span class="title function_">plugin</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>)</span><br><span class="line">          .<span class="title function_">use</span>(<span class="title class_">ESLintPlugin</span>, [&#123; <span class="attr">extensions</span>: [ <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;vue&#x27;</span> ] &#125;])</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>可以通过这里更改webpack的配置</p>
<h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">server</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;http&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">      <span class="attr">open</span>: <span class="literal">true</span> <span class="comment">// opens browser window automatically</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>开发时开的服务器，代理服务器的设置和配置</p>
<h3 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">      <span class="attr">config</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">cssAddon</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// iconSet: &#x27;material-icons&#x27;, // Quasar icon set</span></span><br><span class="line">      <span class="comment">// lang: &#x27;en-US&#x27;, // Quasar language pack</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// For special cases outside of where the auto-import strategy can have an impact</span></span><br><span class="line">      <span class="comment">// (like functional components as one of the examples),</span></span><br><span class="line">      <span class="comment">// you can manually specify Quasar components/directives to be available everywhere:</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// components: [],</span></span><br><span class="line">      <span class="comment">// directives: [],</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Quasar plugins</span></span><br><span class="line">      <span class="attr">plugins</span>: [],</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>



<p><code>// lang: &#39;en-US&#39;, // Quasar language pack</code> 配置语言的，后面组件如果用到这个会使用不同的语言</p>
<p>中文是 zh-CN</p>
<p>plugins 配置需要使用的quasar的插件，添加完插件还要在config配置项里面写上对应的配置</p>
<p>Quasar插件是您可以在Vue文件中以及在其外部使用的功能，如Notify、BottomSheet、AppVisibility等。</p>
<p>要使用它们，您需要在<code>/quasar.conf.js</code>中添加对它们的引用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;Notify&#x27;</span>, <span class="string">&#x27;BottomSheet&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="animations"><a href="#animations" class="headerlink" title="animations"></a>animations</h3><p>动画</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// animations: &#x27;all&#x27;, // --- includes all animations</span></span><br><span class="line"><span class="comment">// https://quasar.dev/options/animations</span></span><br><span class="line"><span class="attr">animations</span>: [],</span><br></pre></td></tr></table></figure>

<p>如果用<code>animations: &#39;all&#39;</code>是引入所有的动画</p>
<p>如果只要用部分的动画，就在animation里面的配置上面写上即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">animations</span>:[<span class="string">&#x27;bounceInLeft&#x27;</span>,<span class="string">&#x27;bounceOutRight&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">Example</span> <span class="keyword">with</span> wrapping only one <span class="variable constant_">DOM</span> element / component --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">transition</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">appear</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">enter-active-class</span>=<span class="string">&quot;animated fadeIn&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">leave-active-class</span>=<span class="string">&quot;animated fadeOut&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- Wrapping only one DOM element, defined by QBtn --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">q-btn</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">icon</span>=<span class="string">&quot;mail&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">label</span>=<span class="string">&quot;Email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="boot配置-启动文件"><a href="#boot配置-启动文件" class="headerlink" title="boot配置 (启动文件)"></a>boot配置 (启动文件)</h3><p>因为quasar没有main.js（为了多端适配，所以去掉了，用boot来代替）</p>
<p>Quasar应用程序的一个常见用例是<strong>在实例化根Vue应用程序实例之前运行代码</strong>，例如注入和初始化您自己的依赖项（例如：Vue组件、库…）或者只是配置一些启动代码应用程序。</p>
<p>由于您无法访问任何<code>/main.js</code>文件（因此Quasar CLI可以无缝初始化并为SPA&#x2F;PWA&#x2F;SSR&#x2F;Cordova&#x2F;Electron构建相同的代码库）Quasar提供了该问题的优雅解决方案——允许用户定义所谓的启动文件。</p>
<p>文件可以用quasar来生成一个新启动文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ quasar <span class="keyword">new</span> boot &lt;name&gt; [--format ts]</span><br><span class="line">             文件夹位置  名字  如果写上表示用ts写</span><br></pre></td></tr></table></figure>

<p>最后一步是告诉Quasar使用你的新启动文件。 为了做到这一点，你需要在<code>/quasar.conf.js</code>中添加启动文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">boot</span>: [</span><br><span class="line">  <span class="comment">// references /src/boot/&lt;name&gt;.js</span></span><br><span class="line">  <span class="string">&#x27;&lt;name&gt;&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>引入boot启动文件的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; boot &#125; <span class="keyword">from</span> <span class="string">&#x27;quasar/wrappers&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> messages <span class="keyword">from</span> <span class="string">&#x27;src/i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">boot</span>(<span class="function">(<span class="params">&#123; app &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">    <span class="attr">locale</span>: <span class="string">&#x27;en-US&#x27;</span>,</span><br><span class="line">    messages</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set i18n instance on app</span></span><br><span class="line">  app.<span class="title function_">use</span>(i18n)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>import引入需要引入的东西</p>
<p>然后用app.use(xxx)使用即可</p>
<h2 id="router文件夹的路由配置"><a href="#router文件夹的路由配置" class="headerlink" title="router文件夹的路由配置"></a>router文件夹的路由配置</h2><p>在config.js里面的build里面把路由的默认值改成history</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;layouts/MainLayout.vue&quot;</span>),</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;pages/IndexPage.vue&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;oneone&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;pages/oneone.vue&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;twotwo&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;pages/twotwo.vue&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>这种先写个括号，然后写上对应的东西是懒加载，只有用到了才会加载</p>
<p>下面这种就是页面一开始就开始加载(layout的那个)</p>
<p><img src="https://tu.sunning.fit/i/2022/06/23/62b3c35b5d795.png" alt="image-20220529183554140"></p>
<p>在某个页面使用路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> $router=<span class="title function_">useRouter</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toStyle</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $router.<span class="title function_">push</span>(<span class="string">&#x27;/one&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在需要的地方用这个方法即可</p>
<p>另一种方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>









<p>组件一开始的页面使用路由对应不同的地方</p>
<p>在EssentialLink的对应地方使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">q-item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">clickable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">tag</span>=<span class="string">&quot;a&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>  //这个去掉</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:to</span>=<span class="string">&quot;link&quot;</span>   把默认的<span class="attr">href</span>改成<span class="attr">to</span>即可</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br></pre></td></tr></table></figure>





<h1 id="风格和特性"><a href="#风格和特性" class="headerlink" title="风格和特性"></a>风格和特性</h1><h2 id="Typography"><a href="#Typography" class="headerlink" title="Typography"></a>Typography</h2><p>排版</p>
<p>几个有点像md的东西</p>
<h2 id="Color-Palette"><a href="#Color-Palette" class="headerlink" title="Color Palette"></a>Color Palette</h2><p>可以使用的颜色，想用哪个颜色对着填就行</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c545e5b7fcf.png" alt="image-20220529145541053"></p>
<h2 id="Theming"><a href="#Theming" class="headerlink" title="Theming"></a>Theming</h2><p>选择对应的主题可以导出主题的颜色</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c545f0df65a.png" alt="image-20220529145622515"></p>
<h2 id="Dark-Mode"><a href="#Dark-Mode" class="headerlink" title="Dark Mode"></a>Dark Mode</h2><p>黑暗模式</p>
<p>只在在vue组件里的使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;$q.dark.toggle()&quot; class=&quot;shadow-16&quot;&gt;模式切换&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;useQuasar&#125; from &#x27;quasar&#x27; //引入脚本</span><br><span class="line">const $q=useQuasar(); //实例化，然后q里面有q.dark.toggle方法可以切换黑暗模式</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>还有另外一种方法,组件的$q里面本身就有dark.toggle方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;this.$q.dark.toggle()&quot;</span>&gt;<span class="number">123</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure>







<p>黑暗模式和白天模式的界面用</p>
<blockquote>
<p>这个只能修改自己写的组件的颜色，如果默认的组件的颜色也要修改，用上面全局主题（css quasar.variables.css）里面的 $dark变量</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">body</span>--light &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">body</span>--dark &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CSS-Spacing-Classes"><a href="#CSS-Spacing-Classes" class="headerlink" title="CSS Spacing Classes"></a>CSS Spacing Classes</h2><p>间距</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c545f78ca01.png" alt="image-20220529152719097"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;q-ma-lg&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>magin是large大小</p>
<h3 id="支持断点"><a href="#支持断点" class="headerlink" title="支持断点"></a>支持断点</h3><p>配置:</p>
<p>在quasar.config.js 的 framework 添加cssAddon: true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">      <span class="attr">config</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">cssAddon</span>:<span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在ma后面跟的是类似媒体查询的东西</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;q-ma-lg-lg&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Breakpoints"><a href="#Breakpoints" class="headerlink" title="Breakpoints"></a>Breakpoints</h2><p>断点</p>
<p>类似媒体查询</p>
<h2 id="CSS-Shadows-Elevation"><a href="#CSS-Shadows-Elevation" class="headerlink" title="CSS Shadows (Elevation)"></a>CSS Shadows (Elevation)</h2><p>阴影的样式，需要啥直接用就行</p>
<h2 id="CSS-Visibility"><a href="#CSS-Visibility" class="headerlink" title="CSS Visibility"></a>CSS Visibility</h2><h2 id="CSS-Positioning-Classes"><a href="#CSS-Positioning-Classes" class="headerlink" title="CSS Positioning Classes"></a>CSS Positioning Classes</h2><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="Flex-Grid"><a href="#Flex-Grid" class="headerlink" title="Flex Grid"></a>Flex Grid</h2><h3 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h3><p>直接在css的父类上面加上这些类就是对应的布局方式</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c545fea9441.png" alt="image-20220529152537912"></p>
<p>不同的类对应不同组件方式</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54602857c1.png" alt="image-20220529152629403"></p>
<h3 id="Grid-Row"><a href="#Grid-Row" class="headerlink" title="Grid Row"></a>Grid Row</h3><p>栅格系统</p>
<p>默认是12份</p>
<p>这个也支持断点</p>
<p>offset前面空多少份</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c546092968f.png" alt="image-20220529163317558"></p>
<h3 id="Grid-Gutter"><a href="#Grid-Gutter" class="headerlink" title="Grid Gutter"></a>Grid Gutter</h3><p>加上这个之后，它的所有子元素会有一个默认的边距</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5460f8f001.png" alt="image-20220529163520040"></p>
<p>q-gutter-md 加上外边距</p>
<p>q-col-gutter-md加上内边距</p>
<h3 id="Flex-Playground"><a href="#Flex-Playground" class="headerlink" title="Flex Playground"></a>Flex Playground</h3><p>这是一个方便的可视化的界面</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5461558a87.png" alt="image-20220529163813657"></p>
<h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><p><img src="https://tu.sunning.fit/i/2022/07/06/62c5461b9b8a2.png" alt="image-20220529165519366"></p>
<p>要头部</p>
<p>要尾部</p>
<p>要左弹出框</p>
<p>要右弹出框</p>
<p>要头部下面的切换页面的标签</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54620dc4c3.png" alt="image-20220529165701691"></p>
<p>h,f 大写，小写代表绝对定位还是相对定位</p>
<p>四个角的选项代表分别布局在哪些位置</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54627548ea.png" alt="image-20220529165825252"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54630a741d.png" alt="image-20220529165848993"></p>
<p>Header Reval标题的头上滑一定位置会消失</p>
<p>Behavior还可以选择模式，是在手机模式（侧边框会占很多的位置）还是在其他的模式</p>
<p>Left-side 中的Overlay mode是侧边框会不会把其他的位置挤出去</p>
<p>Separator type是控制没有没阴影</p>
<p>设置完成的东西直接导出，然后赋值粘贴到</p>
<h3 id="q-page"><a href="#q-page" class="headerlink" title="q-page"></a>q-page</h3><p>这个是布局用的，就包在最外层就行</p>
<h3 id="q-page-sticky"><a href="#q-page-sticky" class="headerlink" title="q-page-sticky"></a>q-page-sticky</h3><p>QPageSticky组件有助于将由它包裹的DOM元素&#x2F;组件放置到QPage内容区域中的静态位置，无论用户在哪里滚动。</p>
<h1 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h1><p>在quasar.config.js的extras用想用的icon类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">extras</span>: [</span><br><span class="line">    <span class="string">&#x27;bootstrap-icons&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;roboto-font&quot;</span>, <span class="comment">// optional, you are not bound to it</span></span><br><span class="line">    <span class="string">&quot;material-icons&quot;</span>, <span class="comment">// optional, you are not bound to it</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>



<p><a href="https://icons.getbootstrap.com/">https://icons.getbootstrap.com/</a></p>
<p>在想要用的页面上面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;q-btn @click=<span class="string">&quot;toStyle&quot;</span>&gt;<span class="number">123</span>&lt;/q-btn&gt;</span><br></pre></td></tr></table></figure>



<h1 id="Vuex使用"><a href="#Vuex使用" class="headerlink" title="Vuex使用"></a>Vuex使用</h1><p>在quasar中的目录结构</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── src/</span><br><span class="line">    └── store/               <span class="comment"># Vuex Store</span></span><br><span class="line">        ├── index.js         <span class="comment"># Vuex Store 定义</span></span><br><span class="line">        ├── &lt;folder&gt;         <span class="comment"># Vuex Store 模块...</span></span><br><span class="line">        └── &lt;folder&gt;         <span class="comment"># Vuex Store 模块...</span></span><br></pre></td></tr></table></figure>

<p>添加一个Vuex模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quasar new store &lt;&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Quasar</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/2022/07/21/React/</url>
    <content><![CDATA[<h1 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h1><p>官网</p>
<ol>
<li>英文官网: <a href="https://reactjs.org/">https://reactjs.org/</a></li>
<li>中文官网: <a href="https://react.docschina.org/">https://react.docschina.org/</a></li>
</ol>
<p>介绍描述</p>
<ol>
<li>用于动态构建用户界面的 JavaScript 库(只关注于视图)</li>
<li>由Facebook开源</li>
</ol>
<blockquote>
<p>正常写一个页面需要：</p>
<p>1.获取数据</p>
<p>2.处理数据</p>
<p>3.操作DOM呈现页面 ——React只关注这最后一步，前面的操作它不关心</p>
<p>所以React是一个把数据渲染为HTML视图的开源js库</p>
</blockquote>
<p>React的特点</p>
<ol>
<li>声明式编码</li>
<li>组件化编码</li>
<li>React Native 编写移动开发</li>
<li>高效（优秀的Diffing算法）</li>
</ol>
<p>React高效的原因</p>
<ol>
<li>使用虚拟(virtual)DOM, 不总是直接操作页面真实DOM。（操作真实DOM浏览器要一直绘制，性能消耗大，用DOM的API操作UI）</li>
<li>DOM Diffing算法, 最小化页面重绘。</li>
</ol>
<h1 id="React的基本使用"><a href="#React的基本使用" class="headerlink" title="React的基本使用"></a>React的基本使用</h1><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p><img src="https://tu.sunning.fit/i/2022/07/20/62d7cd5c08bf5.png"></p>
<h3 id="相关js库"><a href="#相关js库" class="headerlink" title="相关js库"></a>相关js库</h3><ol>
<li>react.js：React核心库。</li>
<li>react-dom.js：提供操作DOM的react扩展库。 </li>
<li>babel.min.js：解析JSX语法代码转为JS代码的库。</li>
</ol>
<h3 id="创建虚拟DOM的两种方式"><a href="#创建虚拟DOM的两种方式" class="headerlink" title="创建虚拟DOM的两种方式"></a>创建虚拟DOM的两种方式</h3><p><img src="https://tu.sunning.fit/i/2022/07/20/62d7cd5fb622e.png"></p>
<h4 id="纯JS方式-一般不用"><a href="#纯JS方式-一般不用" class="headerlink" title="纯JS方式(一般不用)"></a>纯JS方式(一般不用)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, &#123;<span class="attr">id</span>: <span class="string">&#x27;title&#x27;</span>&#125;, <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;Hello,React&#x27;</span>))</span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="JSX方式"><a href="#JSX方式" class="headerlink" title="JSX方式"></a>JSX方式</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Hello,React</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//2.渲染虚拟DOM到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure>



<h2 id="虚拟DOM与真实DOM"><a href="#虚拟DOM与真实DOM" class="headerlink" title="虚拟DOM与真实DOM"></a>虚拟DOM与真实DOM</h2><ol>
<li>React提供了一些API来创建一种 “特别” 的<strong>一般js对象</strong><ul>
<li>**const VDOM &#x3D; React.createElement(‘xx’,{id:’xx’},’xx’)**创建的就是一个简单的虚拟DOM对象</li>
</ul>
</li>
<li>虚拟DOM对象最终都会被React转换为真实的DOM</li>
<li>我们编码时基本只需要操作react的虚拟DOM相关数据, react会转换为真实DOM变化而更新界。</li>
<li>虚拟dom本质是Object类型的对象（一般对象）</li>
<li>虚拟dom比较轻，真实dom比较重，因为虚拟dom是react内部在用，无需真实dom上那么多的属性</li>
</ol>
<h1 id="React-JSX"><a href="#React-JSX" class="headerlink" title="React JSX"></a>React JSX</h1><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><ol>
<li><p>全称: JavaScript XML</p>
</li>
<li><p>react定义的一种类似于XML的JS扩展语法: JS + XML本质是**React.createElement(component, props, …children)**方法的语法糖</p>
</li>
<li><p>作用: 用来简化创建虚拟DOM</p>
<ol>
<li>写法：<strong>var ele &#x3D; &lt;h1&gt;Hello JSX!&lt;&#x2F;h1&gt;</strong></li>
<li>注意1：它不是字符串, 也不是HTML&#x2F;XML标签</li>
<li>注意2：它最终产生的就是一个JS对象</li>
</ol>
</li>
<li><p>标签名任意: HTML标签或其它标签</p>
</li>
<li><p>标签属性任意: HTML标签属性或其它</p>
</li>
<li><p>基本语法规则</p>
<ol>
<li>遇到 &lt;开头的代码, 以标签的语法解析: html同名标签转换为html同名元素, 其它标签需要特别解析</li>
<li>{ }，以JS语法解析: 标签中的js表达式必须用{ }包含</li>
<li>样式的类名指定不要用class,要用className</li>
<li>内联样式，要用<code>style=&#123;&#123;key:value&#125;&#125;</code>的形式去写（如果是font-size这种，要写成小驼峰，fontSize）</li>
<li>虚拟dom只能有一个根标签</li>
<li>标签必须闭合</li>
<li>标签首字母：<ol>
<li>若小写字母开头，则将该标签转为html中同名元素，若html中无改标签对应的同名元素，则报错</li>
<li>若大写字母开头，则react去渲染对应的组件，若组件没有定义，则报错</li>
</ol>
</li>
</ol>
<blockquote>
<p>{}中只能用js表达式:                        js语句（代码）与js表达式</p>
<p>表达式：</p>
<ol>
<li>a</li>
<li>a+b</li>
<li>demo(1)</li>
<li>arr.map()</li>
<li>function.map()</li>
<li>function test(){} &#x2F;&#x2F;函数本身也是个表达式，因为可以const xx&#x3D;function test(){}</li>
</ol>
<p>语句：</p>
<ol>
<li>if(){}</li>
<li>for(){}</li>
<li>switch(){case:xxx}</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        data.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>


</blockquote>
</li>
<li><p>babel.js的作用</p>
<ol>
<li>浏览器不能直接解析JSX代码, 需要babel转译为纯JS的代码才能运行</li>
<li>只要用了JSX，都要加上type&#x3D;”text&#x2F;babel”, 声明需要babel来处理</li>
</ol>
</li>
</ol>
<h2 id="渲染虚拟DOM-元素"><a href="#渲染虚拟DOM-元素" class="headerlink" title="渲染虚拟DOM(元素)"></a>渲染虚拟DOM(元素)</h2><ol>
<li>语法: <strong>ReactDOM.render(virtualDOM, containerDOM)</strong></li>
<li>作用: 将虚拟DOM元素渲染到页面中的真实容器DOM中显示</li>
<li>参数说明<ol>
<li>参数一: 纯js或jsx创建的虚拟dom对象</li>
<li>参数二: 用来包含虚拟DOM元素的真实dom元素对象(一般是一个div)</li>
</ol>
</li>
</ol>
<h2 id="模块与组件理解"><a href="#模块与组件理解" class="headerlink" title="模块与组件理解"></a>模块与组件理解</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ol>
<li>理解：向外提供特定功能的js程序, 一般就是一个js文件</li>
<li>为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂。</li>
<li>作用：复用js, 简化js的编写, 提高js运行效率</li>
</ol>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ol>
<li>理解：用来实现局部功能效果的代码和资源的集合(html&#x2F;css&#x2F;js&#x2F;image等等)</li>
<li>为什么要用组件： 一个界面的功能更复杂</li>
<li>作用：复用编码, 简化项目编码, 提高运行效率</li>
</ol>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>当应用的js都以模块来编写的, 这个应用就是一个模块化的应用</p>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>当应用是以多组件的方式实现, 这个应用就是一个组件化的应用</p>
<h1 id="React面向组件编程"><a href="#React面向组件编程" class="headerlink" title="React面向组件编程"></a>React面向组件编程</h1><h2 id="基本理解和使用"><a href="#基本理解和使用" class="headerlink" title="基本理解和使用"></a>基本理解和使用</h2><h3 id="使用React开发者工具调试"><a href="#使用React开发者工具调试" class="headerlink" title="使用React开发者工具调试"></a>使用React开发者工具调试</h3><p><img src="https://tu.sunning.fit/i/2022/07/20/62d7cd6d9954b.png"></p>
<h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><img src="https://tu.sunning.fit/i/2022/07/20/62d7cd71194a3.png" style="zoom: 50%;" />

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//此处的this是undefined,因为babel编译后开启了严格模式，不允许this指向window</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>用函数定义的简单组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>)); <span class="comment">//因为是函数式组件，所以组件名就是函数名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行完</span></span><br></pre></td></tr></table></figure>









<h3 id="类式组件："><a href="#类式组件：" class="headerlink" title="类式组件："></a>类式组件：</h3><img src="https://tu.sunning.fit/i/2022/07/20/62d7cd7484e25.png" style="zoom:33%;" />

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建类式组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;    <span class="comment">//这个render必须要写，同时，必须有返回值</span></span><br><span class="line">        <span class="comment">//render放在哪里——MyComponent的原型对象上，供实例使用</span></span><br><span class="line">        <span class="comment">//render中的this是谁 ——MyCompent的实例对象 也叫 组件实例对象（组件对象)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>用类定义的组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"><span class="comment">/*这句执行完成后——</span></span><br><span class="line"><span class="comment">* 1.React解析组件标签，找到了MyComponent组件</span></span><br><span class="line"><span class="comment">* 2.发现组件是使用类定义的，随后new出来类的实例，并通过该实例调用到原型上的render方法</span></span><br><span class="line"><span class="comment">* 3.将render返回的虚拟DOM转为真实DOM,呈现在页面中</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure>



<h1 id="组件实例的三大属性——（有实例的只有类式组件）"><a href="#组件实例的三大属性——（有实例的只有类式组件）" class="headerlink" title="组件实例的三大属性——（有实例的只有类式组件）"></a>组件实例的三大属性——（有实例的只有类式组件）</h1><p><img src="https://tu.sunning.fit/i/2022/07/21/62d90c19e1dfb.png" alt="image-20220721161934853"></p>
<h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><em>需求: 定义一个展示天气信息的组件</em></p>
<ol>
<li><em>默认展示天气炎热 或 凉爽</em></li>
<li><em>点击文字切换天气</em></li>
</ol>
<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><ol>
<li>state是组件对象最重要的属性, 值是对象(可以包含多个key-value的组合)</li>
<li>组件被称为”状态机”, 通过更新组件的state来更新对应的页面显示(重新渲染组件)</li>
</ol>
<h3 id="强烈注意"><a href="#强烈注意" class="headerlink" title="强烈注意"></a>强烈注意</h3><ol>
<li>组件中render方法中的this为组件实例对象</li>
<li>组件自定义的方法中this为undefined，如何解决？<ol>
<li>强制绑定this: 通过函数对象的bind()</li>
<li>箭头函数</li>
</ol>
</li>
<li>状态数据，不能直接修改或更新</li>
</ol>
<h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><em>需求: 自定义用来显示一个人员信息的组件</em></p>
<ol>
<li><em>姓名必须指定，且为字符串类型；</em></li>
<li><em>性别为字符串类型，如果性别没有指定，默认为男</em></li>
<li><em>年龄为字符串类型，且为数字类型，默认值为18</em></li>
</ol>
<p><img src="https://tu.sunning.fit/i/2022/07/20/62d7cd8088fac.png"></p>
<h3 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h3><ol>
<li>每个组件对象都会有props(properties的简写)属性</li>
<li>组件标签的所有属性都保存在props中</li>
</ol>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li>通过标签属性从组件外向组件内传递变化的数据</li>
<li>注意: 组件内部不要修改props数据</li>
</ol>
<h3 id="编码操作"><a href="#编码操作" class="headerlink" title="编码操作"></a>编码操作</h3><ol>
<li><p>内部读取某个属性值</p>
</li>
<li><p>对props中的属性值进行类型限制和必要性限制</p>
<p>第一种方式（React v15.5 开始已弃用）：</p>
</li>
</ol>
<p>第二种方式（新）：使用prop-types库进限制（需要引入prop-types库）</p>
<ol>
<li>扩展属性: 将对象的所有属性通过props传递</li>
<li>默认属性值：</li>
<li>组件类的构造函数</li>
</ol>
<h2 id="refs与事件处理"><a href="#refs与事件处理" class="headerlink" title="refs与事件处理"></a>refs与事件处理</h2><h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><em>需求: 自定义组件, 功能说明如下:</em></p>
<p><em>1. 点击按钮, 提示第一个输入框中的值</em></p>
<p><em>2. 当第2个输入框失去焦点时, 提示这个输入框中的值</em></p>
<p>效果如下：</p>
<h3 id="理解-2"><a href="#理解-2" class="headerlink" title="理解"></a>理解</h3><p>组件内的标签可以定义ref属性来标识自己</p>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ol>
<li>字符串形式的ref</li>
<li>回调形式的ref</li>
<li>createRef创建ref容器·</li>
</ol>
<h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ol>
<li>通过onXxx属性指定事件处理函数(注意大小写)<ol>
<li>React使用的是自定义(合成)事件, 而不是使用的原生DOM事件</li>
<li>React中的事件是通过事件委托方式处理的(委托给组件最外层的元素)</li>
</ol>
</li>
<li>通过event.target得到发生事件的DOM元素对象</li>
</ol>
<h1 id="2-5-收集表单数据"><a href="#2-5-收集表单数据" class="headerlink" title="2.5. 收集表单数据"></a>2.5. 收集表单数据</h1><h2 id="2-5-1-效果"><a href="#2-5-1-效果" class="headerlink" title="2.5.1. 效果"></a>2.5.1. 效果</h2><p><em>需求: 定义一个包含表单的组件</em></p>
<p><em>输入用户名密码后, 点击登录提示输入信息</em></p>
<h2 id="2-5-2-理解"><a href="#2-5-2-理解" class="headerlink" title="2.5.2. 理解"></a>2.5.2. 理解</h2><p>包含表单的组件分类</p>
<ol>
<li>受控组件<ol>
<li>非受控组件</li>
</ol>
</li>
</ol>
<h1 id="2-6-组件的生命周期"><a href="#2-6-组件的生命周期" class="headerlink" title="2.6. 组件的生命周期"></a>2.6. 组件的生命周期</h1><h2 id="2-6-1-效果"><a href="#2-6-1-效果" class="headerlink" title="2.6.1. 效果"></a>2.6.1. 效果</h2><p><em>需求:定义组件实现以下功能：</em></p>
<p><em>1. 让指定的文本做显示 &#x2F; 隐藏的渐变动画</em></p>
<p><em>2. 从完全可见，到彻底消失，耗时2S</em></p>
<p><em>3. 点击“不活了”按钮从界面中卸载组件</em></p>
<h2 id="2-6-2-理解"><a href="#2-6-2-理解" class="headerlink" title="2.6.2. 理解"></a>2.6.2. 理解</h2><ol>
<li>组件从创建到死亡它会经历一些特定的阶段。</li>
<li>React组件中包含一系列勾子函数(生命周期回调函数), 会在特定的时刻调用。</li>
<li>我们在定义组件时，会在特定的生命周期回调函数中，做特定的工作。</li>
</ol>
<h2 id="2-6-3-生命周期流程图-旧"><a href="#2-6-3-生命周期流程图-旧" class="headerlink" title="2.6.3. 生命周期流程图(旧)"></a>2.6.3. 生命周期流程图(旧)</h2><p><img src="https://tu.sunning.fit/i/2022/07/20/62d7cd8d8a23f.png"></p>
<p>生命周期的三个阶段（旧）</p>
<p><strong>1. 初始化阶段:</strong> 由ReactDOM.render()触发—初次渲染</p>
<ol>
<li>constructor()<ol>
<li>componentWillMount()<ol>
<li>render()<ol>
<li>componentDidMount()</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p><strong>2. 更新阶段:</strong> 由组件内部this.setSate()或父组件重新render触发</p>
<ol>
<li>shouldComponentUpdate()</li>
<li>componentWillUpdate()</li>
<li>render()</li>
<li>componentDidUpdate()</li>
</ol>
<p><strong>3. 卸载组件:</strong> 由ReactDOM.unmountComponentAtNode()触发</p>
<ol>
<li>componentWillUnmount()</li>
</ol>
<h2 id="2-6-4-生命周期流程图-新"><a href="#2-6-4-生命周期流程图-新" class="headerlink" title="2.6.4. 生命周期流程图(新)"></a>2.6.4. 生命周期流程图(新)</h2><p><img src="https://tu.sunning.fit/i/2022/07/20/62d7cdcfe92f5.png"></p>
<p>生命周期的三个阶段（新）</p>
<p><strong>1. 初始化阶段:</strong> 由ReactDOM.render()触发—初次渲染</p>
<ol>
<li>constructor()</li>
<li><strong>getDerivedStateFromProps</strong></li>
<li>render()</li>
<li>componentDidMount()</li>
</ol>
<p><strong>2. 更新阶段:</strong> 由组件内部this.setSate()或父组件重新render触发</p>
<ol>
<li><strong>getDerivedStateFromProps</strong></li>
<li>shouldComponentUpdate()</li>
<li>render()</li>
<li><strong>getSnapshotBeforeUpdate</strong></li>
<li>componentDidUpdate()</li>
</ol>
<p><strong>3. 卸载组件:</strong> 由ReactDOM.unmountComponentAtNode()触发</p>
<ol>
<li>componentWillUnmount()</li>
</ol>
<h2 id="2-6-5-重要的勾子"><a href="#2-6-5-重要的勾子" class="headerlink" title="2.6.5. 重要的勾子"></a>2.6.5. 重要的勾子</h2><ol>
<li>render：初始化渲染或更新渲染调用</li>
<li>componentDidMount：开启监听, 发送ajax请求</li>
<li>componentWillUnmount：做一些收尾工作, 如: 清理定时器</li>
</ol>
<h2 id="2-6-6-即将废弃的勾子"><a href="#2-6-6-即将废弃的勾子" class="headerlink" title="2.6.6. 即将废弃的勾子"></a>2.6.6. 即将废弃的勾子</h2><ol>
<li>componentWillMount</li>
<li>componentWillReceiveProps</li>
<li>componentWillUpdate</li>
</ol>
<p>现在使用会出现警告，下一个大版本需要加上UNSAFE_前缀才能使用，以后可能会被彻底废弃，不建议使用。</p>
<h1 id="2-7-虚拟DOM与DOM-Diffing算法"><a href="#2-7-虚拟DOM与DOM-Diffing算法" class="headerlink" title="2.7. 虚拟DOM与DOM Diffing算法"></a>2.7. 虚拟DOM与DOM Diffing算法</h1><h2 id="2-7-1-效果"><a href="#2-7-1-效果" class="headerlink" title="2.7.1. 效果"></a>2.7.1. 效果</h2><p><em>需求：验证虚拟DOM Diffing算法的存在</em></p>
<h2 id="2-7-2-基本原理图"><a href="#2-7-2-基本原理图" class="headerlink" title="2.7.2. 基本原理图"></a>2.7.2. 基本原理图</h2><p><img src="https://tu.sunning.fit/i/2022/07/20/62d7cdd52d6d7.png" alt="虚拟DOM与DOM diff"></p>
<p>第3章：React应用(基于React脚手架)</p>
<h1 id="3-1-使用create-react-app创建react应用"><a href="#3-1-使用create-react-app创建react应用" class="headerlink" title="3.1. 使用create-react-app创建react应用"></a>3.1. 使用create-react-app创建react应用</h1><h2 id="3-1-1-react脚手架"><a href="#3-1-1-react脚手架" class="headerlink" title="3.1.1. react脚手架"></a>3.1.1. react脚手架</h2><ol>
<li>xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目<ol>
<li>包含了所有需要的配置（语法检查、jsx编译、devServer…）</li>
<li>下载好了所有相关的依赖</li>
<li>可以直接运行一个简单效果</li>
</ol>
</li>
<li>react提供了一个用于创建react项目的脚手架库: create-react-app</li>
<li>项目的整体技术架构为: react + webpack + es6 + eslint</li>
<li>使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</li>
</ol>
<h2 id="3-1-2-创建项目并启动"><a href="#3-1-2-创建项目并启动" class="headerlink" title="3.1.2. 创建项目并启动"></a>3.1.2. 创建项目并启动</h2><p><strong>第一步</strong>，全局安装：npm i -g create-react-app</p>
<p><strong>第二步</strong>，切换到想创项目的目录，使用命令：create-react-app hello-react</p>
<p><strong>第三步</strong>，进入项目文件夹：cd hello-react</p>
<p><strong>第四步</strong>，启动项目：npm start</p>
<h2 id="3-1-3-react脚手架项目结构"><a href="#3-1-3-react脚手架项目结构" class="headerlink" title="3.1.3. react脚手架项目结构"></a>3.1.3. react脚手架项目结构</h2><p>public —- 静态资源文件夹</p>
<p>favicon.icon —— 网站页签图标</p>
<p><strong>index.html ——– 主页面</strong></p>
<p>logo192.png ——- logo图</p>
<p>logo512.png ——- logo图</p>
<p>manifest.json —– 应用加壳的配置文件</p>
<p>robots.txt ——– 爬虫协议文件</p>
<p>src —- 源码文件夹</p>
<p>App.css ——– App组件的样式</p>
<p><strong>App.js ——— App组件</strong></p>
<p>App.test.js —- 用于给App做测试</p>
<p>index.css —— 样式</p>
<p><strong>index.js ——- 入口文件</strong></p>
<p>logo.svg ——- logo图</p>
<p>reportWebVitals.js</p>
<p>-– 页面性能分析文件(需要web-vitals库的支持)</p>
<p>setupTests.js</p>
<p>-— 组件单元测试的文件(需要jest-dom库的支持)</p>
<h2 id="3-1-4-功能界面的组件化编码流程（通用）"><a href="#3-1-4-功能界面的组件化编码流程（通用）" class="headerlink" title="3.1.4. 功能界面的组件化编码流程（通用）"></a>3.1.4. 功能界面的组件化编码流程（通用）</h2><p>1. 拆分组件: 拆分界面,抽取组件</p>
<p>2. 实现静态组件: 使用组件实现静态页面效果</p>
<p>3. 实现动态组件</p>
<p>3.1 动态显示初始化数据</p>
<p>3.1.1 数据类型</p>
<p>3.1.2 数据名称</p>
<p>3.1.2 保存在哪个组件?</p>
<p>3.2 交互(从绑定事件监听开始)</p>
<h1 id="3-2-组件的组合使用-TodoList"><a href="#3-2-组件的组合使用-TodoList" class="headerlink" title="3.2. 组件的组合使用-TodoList"></a>3.2. 组件的组合使用-TodoList</h1><p><em>功能: 组件化实现此功能</em></p>
<p><em>1. 显示所有todo列表</em></p>
<p><em>2. 输入文本, 点击按钮显示到列表的首位, 并清除输入的文本</em></p>
<p>第4章：React ajax</p>
<h1 id="4-1-理解"><a href="#4-1-理解" class="headerlink" title="4.1. 理解"></a>4.1. 理解</h1><h2 id="4-1-1-前置说明"><a href="#4-1-1-前置说明" class="headerlink" title="4.1.1. 前置说明"></a>4.1.1. 前置说明</h2><ol>
<li>React本身只关注于界面, 并不包含发送ajax请求的代码</li>
<li>前端应用需要通过ajax请求与后台进行交互(json数据)</li>
<li>react应用中需要集成第三方ajax库(或自己封装)</li>
</ol>
<h2 id="4-1-2-常用的ajax请求库"><a href="#4-1-2-常用的ajax请求库" class="headerlink" title="4.1.2. 常用的ajax请求库"></a>4.1.2. 常用的ajax请求库</h2><ol>
<li>jQuery: 比较重, 如果需要另外引入不建议使用</li>
<li>axios: 轻量级, 建议使用<ol>
<li>封装XmlHttpRequest对象的ajax<ol>
<li>promise风格</li>
<li>可以用在浏览器端和node服务器端</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="4-2-axios"><a href="#4-2-axios" class="headerlink" title="4.2. axios"></a>4.2. axios</h1><h2 id="4-2-1-文档"><a href="#4-2-1-文档" class="headerlink" title="4.2.1. 文档"></a>4.2.1. 文档</h2><p><a href="https://github.com/axios/axios">https://github.com/axios/axios</a></p>
<h2 id="4-2-2-相关API"><a href="#4-2-2-相关API" class="headerlink" title="4.2.2. 相关API"></a>4.2.2. 相关API</h2><ol>
<li>GET请求</li>
</ol>
<table>
<thead>
<tr>
<th>axios.get(‘&#x2F;user?ID&#x3D;12345’)  .then(function (response) {  console.log(response.data);  })  .catch(function (error) {  console.log(error);  });  axios.get(‘&#x2F;user’, {  params: {  ID: 12345  }  })  .then(function (response) {  console.log(response);  })  .catch(function (error) {  console.log(error);  });</th>
</tr>
</thead>
</table>
<ol>
<li>POST请求</li>
</ol>
<table>
<thead>
<tr>
<th>axios.post(‘&#x2F;user’, {  firstName: ‘Fred’,  lastName: ‘Flintstone’ }) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); });</th>
</tr>
</thead>
</table>
<h1 id="4-3-案例—github用户搜索"><a href="#4-3-案例—github用户搜索" class="headerlink" title="4.3. 案例—github用户搜索"></a>4.3. 案例—github用户搜索</h1><h2 id="4-3-1-效果"><a href="#4-3-1-效果" class="headerlink" title="4.3.1. 效果"></a>4.3.1. 效果</h2><p>请求地址: <a href="https://api.github.com/search/users?q=xxxxxx">https://api.github.com/search/users?q=xxxxxx</a></p>
<h1 id="4-4-消息订阅-发布机制"><a href="#4-4-消息订阅-发布机制" class="headerlink" title="4.4. 消息订阅-发布机制"></a>4.4. 消息订阅-发布机制</h1><ol>
<li>工具库: PubSubJS</li>
<li>下载: npm install pubsub-js –save</li>
<li>使用:<ol>
<li>import PubSub from ‘pubsub-js’ &#x2F;&#x2F;引入<ol>
<li>PubSub.subscribe(‘delete’, function(data){ }); &#x2F;&#x2F;订阅<ol>
<li>PubSub.publish(‘delete’, data) &#x2F;&#x2F;发布消息</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="4-5-扩展：Fetch"><a href="#4-5-扩展：Fetch" class="headerlink" title="4.5. 扩展：Fetch"></a>4.5. 扩展：Fetch</h1><h2 id="4-5-1-文档"><a href="#4-5-1-文档" class="headerlink" title="4.5.1. 文档"></a>4.5.1. 文档</h2><ol>
<li><a href="https://github.github.io/fetch/">https://github.github.io/fetch/</a></li>
<li><a href="https://segmentfault.com/a/1190000003810652">https://segmentfault.com/a/1190000003810652</a></li>
</ol>
<h2 id="4-5-2-特点"><a href="#4-5-2-特点" class="headerlink" title="4.5.2. 特点"></a>4.5.2. 特点</h2><ol>
<li>fetch: 原生函数，不再使用XmlHttpRequest对象提交ajax请求</li>
<li>老版本浏览器可能不支持</li>
</ol>
<h2 id="4-5-3-相关API"><a href="#4-5-3-相关API" class="headerlink" title="4.5.3. 相关API"></a>4.5.3. 相关API</h2><ol>
<li>GET请求</li>
</ol>
<table>
<thead>
<tr>
<th>fetch(url).then(function(response) {  return response.json()  }).then(function(data) {  console.log(data)  }).catch(function(e) {  console.log(e)  });</th>
</tr>
</thead>
</table>
<ol>
<li>POST请求</li>
</ol>
<table>
<thead>
<tr>
<th>fetch(url, {  method: “POST”,  body: JSON.stringify(data),  }).then(function(data) {  console.log(data)  }).catch(function(e) {  console.log(e)  })</th>
</tr>
</thead>
</table>
<p>第5章：React路由</p>
<h1 id="5-1-相关理解"><a href="#5-1-相关理解" class="headerlink" title="5.1. 相关理解"></a>5.1. 相关理解</h1><h2 id="5-1-1-SPA的理解"><a href="#5-1-1-SPA的理解" class="headerlink" title="5.1.1. SPA的理解"></a>5.1.1. SPA的理解</h2><ol>
<li>单页Web应用（single page web application，SPA）。</li>
<li>整个应用只有<strong>一个完整的页面</strong>。</li>
<li>点击页面中的链接<strong>不会刷新</strong>页面，只会做页面的<strong>局部更新。</strong></li>
<li>数据都需要通过ajax请求获取, 并在前端异步展现。</li>
</ol>
<h2 id="5-1-2-路由的理解"><a href="#5-1-2-路由的理解" class="headerlink" title="5.1.2. 路由的理解"></a>5.1.2. 路由的理解</h2><ol>
<li><strong>什么是路由?</strong><ol>
<li>一个路由就是一个映射关系(key:value)</li>
<li>key为路径, value可能是function或component</li>
</ol>
</li>
<li><strong>路由分类</strong><ol>
<li>后端路由：<ol>
<li>理解： value是function, 用来处理客户端提交的请求。</li>
<li>注册路由： router.get(path, function(req, res))</li>
<li>工作过程：当node接收到一个请求时, 根据请求路径找到匹配的路由, 调用路由中的函数来处理请求, 返回响应数据</li>
</ol>
</li>
<li>前端路由：<ol>
<li>浏览器端路由，value是component，用于展示页面内容。</li>
<li>注册路由: &lt;Route path&#x3D;”&#x2F;test” component&#x3D;{Test}&gt;</li>
<li>工作过程：当浏览器的path变为&#x2F;test时, 当前路由组件就会变为Test组件</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="5-1-3-react-router-dom的理解"><a href="#5-1-3-react-router-dom的理解" class="headerlink" title="5.1.3. react-router-dom的理解"></a>5.1.3. react-router-dom的理解</h2><ol>
<li>react的一个插件库。</li>
<li>专门用来实现一个SPA应用。</li>
<li>基于react的项目基本都会用到此库。</li>
</ol>
<h1 id="5-2-react-router-dom相关API"><a href="#5-2-react-router-dom相关API" class="headerlink" title="5.2. react-router-dom相关API"></a>5.2. react-router-dom相关API</h1><h2 id="5-2-1-内置组件"><a href="#5-2-1-内置组件" class="headerlink" title="5.2.1. 内置组件"></a>5.2.1. 内置组件</h2><ol>
<li>&lt;BrowserRouter&gt;</li>
<li>&lt;HashRouter&gt;</li>
<li>&lt;Route&gt;</li>
<li>&lt;Redirect&gt;</li>
<li>&lt;Link&gt;</li>
<li>&lt;NavLink&gt;</li>
<li>&lt;Switch&gt;</li>
</ol>
<h2 id="5-2-2-其它"><a href="#5-2-2-其它" class="headerlink" title="5.2.2. 其它"></a>5.2.2. 其它</h2><ol>
<li>history对象</li>
<li>match对象</li>
<li>withRouter函数</li>
</ol>
<h1 id="5-3-基本路由使用"><a href="#5-3-基本路由使用" class="headerlink" title="5.3. 基本路由使用"></a>5.3. 基本路由使用</h1><h2 id="5-3-1-效果"><a href="#5-3-1-效果" class="headerlink" title="5.3.1. 效果"></a>5.3.1. 效果</h2><h2 id="5-3-2-准备"><a href="#5-3-2-准备" class="headerlink" title="5.3.2. 准备"></a>5.3.2. 准备</h2><ol>
<li>下载react-router-dom: npm install –save react-router-dom</li>
<li>引入bootstrap.css: &lt;link rel&#x3D;”stylesheet” href&#x3D;”&#x2F;css&#x2F;bootstrap.css”&gt;</li>
</ol>
<h2 id="5-4-嵌套路由使用"><a href="#5-4-嵌套路由使用" class="headerlink" title="5.4. 嵌套路由使用"></a>5.4. 嵌套路由使用</h2><h3 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h3><h2 id="5-5-向路由组件传递参数数据"><a href="#5-5-向路由组件传递参数数据" class="headerlink" title="5.5. 向路由组件传递参数数据"></a>5.5. 向路由组件传递参数数据</h2><h3 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h3><h2 id="5-6-多种路由跳转方式"><a href="#5-6-多种路由跳转方式" class="headerlink" title="5.6. 多种路由跳转方式"></a>5.6. 多种路由跳转方式</h2><h3 id="效果-5"><a href="#效果-5" class="headerlink" title="效果"></a>效果</h3><h1 id="6-1-流行的开源React-UI组件库"><a href="#6-1-流行的开源React-UI组件库" class="headerlink" title="6.1.流行的开源React UI组件库"></a>6.1.流行的开源React UI组件库</h1><h2 id="6-1-1-material-ui-国外"><a href="#6-1-1-material-ui-国外" class="headerlink" title="6.1.1. material-ui(国外)"></a>6.1.1. material-ui(国外)</h2><ol>
<li>官网: <a href="http://www.material-ui.com/#/">http://www.material-ui.com/#&#x2F;</a></li>
<li>github: <a href="https://github.com/callemall/material-ui">https://github.com/callemall/material-ui</a></li>
</ol>
<h2 id="6-1-2-ant-design-国内蚂蚁金服"><a href="#6-1-2-ant-design-国内蚂蚁金服" class="headerlink" title="6.1.2. ant-design(国内蚂蚁金服)"></a>6.1.2. ant-design(国内蚂蚁金服)</h2><ol>
<li>官网: <a href="https://ant.design/index-cn">https://ant.design/index-cn</a></li>
<li>Github: <a href="https://github.com/ant-design/ant-design/">https://github.com/ant-design/ant-design/</a></li>
</ol>
<p>第7章：redux</p>
<h1 id="7-1-redux理解"><a href="#7-1-redux理解" class="headerlink" title="7.1. redux理解"></a>7.1. redux理解</h1><h2 id="7-1-1-学习文档"><a href="#7-1-1-学习文档" class="headerlink" title="7.1.1. 学习文档"></a>7.1.1. 学习文档</h2><ol>
<li>英文文档: <a href="https://redux.js.org/">https://redux.js.org/</a></li>
<li>中文文档: <a href="http://www.redux.org.cn/">http://www.redux.org.cn/</a></li>
<li>Github: <a href="https://github.com/reactjs/redux">https://github.com/reactjs/redux</a></li>
</ol>
<h2 id="7-1-2-redux是什么"><a href="#7-1-2-redux是什么" class="headerlink" title="7.1.2. redux是什么"></a>7.1.2. redux是什么</h2><ol>
<li>redux是一个专门用于做<strong>状态管理</strong>的JS库(不是react插件库)。</li>
<li>它可以用在react, angular, vue等项目中, 但基本与react配合使用。</li>
<li>作用: 集中式管理react应用中多个组件<strong>共享</strong>的状态。</li>
</ol>
<h2 id="7-1-3-什么情况下需要使用redux"><a href="#7-1-3-什么情况下需要使用redux" class="headerlink" title="7.1.3. 什么情况下需要使用redux"></a>7.1.3. 什么情况下需要使用redux</h2><ol>
<li>某个组件的状态，需要让其他组件可以随时拿到（共享）。</li>
<li>一个组件需要改变另一个组件的状态（通信）。</li>
<li>总体原则：能不用就不用, 如果不用比较吃力才考虑使用。</li>
</ol>
<h2 id="7-1-4-redux工作流程"><a href="#7-1-4-redux工作流程" class="headerlink" title="7.1.4. redux工作流程"></a>7.1.4. redux工作流程</h2><p><img src="https://tu.sunning.fit/i/2022/07/20/62d7cde1f404a.png"></p>
<h1 id="7-2-redux的三个核心概念"><a href="#7-2-redux的三个核心概念" class="headerlink" title="7.2. redux的三个核心概念"></a>7.2. redux的三个核心概念</h1><h2 id="7-2-1-action"><a href="#7-2-1-action" class="headerlink" title="7.2.1. action"></a>7.2.1. action</h2><ol>
<li>动作的对象</li>
<li>包含2个属性<ul>
<li>type：标识属性, 值为字符串, 唯一, 必要属性</li>
<li>data：数据属性, 值类型任意, 可选属性</li>
</ul>
</li>
<li>例子：{ type: ‘ADD_STUDENT’,data:{name: ‘tom’,age:18} }</li>
</ol>
<h2 id="7-2-2-reducer"><a href="#7-2-2-reducer" class="headerlink" title="7.2.2. reducer"></a>7.2.2. reducer</h2><ol>
<li>用于初始化状态、加工状态。</li>
<li>加工时，根据旧的state和action， 产生新的state的<strong>纯函数。</strong></li>
</ol>
<h2 id="7-2-3-store"><a href="#7-2-3-store" class="headerlink" title="7.2.3. store"></a>7.2.3. store</h2><ol>
<li>将state、action、reducer联系在一起的对象</li>
<li>如何得到此对象?<ol>
<li>import {createStore} from ‘redux’<ol>
<li>import reducer from ‘.&#x2F;reducers’<ol>
<li>const store &#x3D; createStore(reducer)</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>此对象的功能?<ol>
<li>getState(): 得到state<ol>
<li>dispatch(action): 分发action, 触发reducer调用, 产生新的state<ol>
<li>subscribe(listener): 注册监听, 当产生了新的state时, 自动调用</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="7-3-redux的核心API"><a href="#7-3-redux的核心API" class="headerlink" title="7.3. redux的核心API"></a>7.3. redux的核心API</h1><h2 id="7-3-1-createstore"><a href="#7-3-1-createstore" class="headerlink" title="7.3.1. createstore()"></a>7.3.1. createstore()</h2><p>作用：创建包含指定reducer的store对象</p>
<h2 id="7-3-2-store对象"><a href="#7-3-2-store对象" class="headerlink" title="7.3.2. store对象"></a>7.3.2. store对象</h2><ol>
<li>作用: redux库最核心的管理对象</li>
<li>它内部维护着:<ol>
<li>state<ol>
<li>reducer</li>
</ol>
</li>
</ol>
</li>
<li>核心方法:<ol>
<li>getState()<ol>
<li>dispatch(action)<ol>
<li>subscribe(listener)</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>具体编码:<ol>
<li>store.getState()<ol>
<li>store.dispatch({type:’INCREMENT’, number})<ol>
<li>store.subscribe(render)</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="7-3-3-applyMiddleware"><a href="#7-3-3-applyMiddleware" class="headerlink" title="7.3.3. applyMiddleware()"></a>7.3.3. applyMiddleware()</h2><p>作用：应用上基于redux的中间件(插件库)</p>
<h2 id="7-3-4-combineReducers"><a href="#7-3-4-combineReducers" class="headerlink" title="7.3.4. combineReducers()"></a>7.3.4. combineReducers()</h2><p>作用：合并多个reducer函数</p>
<h2 id="7-4-使用redux编写应用"><a href="#7-4-使用redux编写应用" class="headerlink" title="7.4. 使用redux编写应用"></a>7.4. 使用redux编写应用</h2><p><strong>效果</strong></p>
<h2 id="7-5-redux异步编程"><a href="#7-5-redux异步编程" class="headerlink" title="7.5. redux异步编程"></a>7.5. redux异步编程</h2><h3 id="7-5-1理解："><a href="#7-5-1理解：" class="headerlink" title="7.5.1理解："></a>7.5.1理解：</h3><ol>
<li>redux默认是不能进行异步处理的,</li>
<li>某些时候应用中需要在<strong>redux中执行异步任务</strong>(ajax, 定时器)</li>
</ol>
<h3 id="7-5-2-使用异步中间件"><a href="#7-5-2-使用异步中间件" class="headerlink" title="7.5.2. 使用异步中间件"></a>7.5.2. 使用异步中间件</h3><p>npm install –save redux-thunk</p>
<h2 id="7-6-react-redux"><a href="#7-6-react-redux" class="headerlink" title="7.6. react-redux"></a>7.6. react-redux</h2><h3 id="7-6-1-理解"><a href="#7-6-1-理解" class="headerlink" title="7.6.1. 理解"></a>7.6.1. 理解</h3><ol>
<li>一个react插件库</li>
<li>专门用来简化react应用中使用redux</li>
</ol>
<h3 id="7-6-2-react-Redux将所有组件分成两大类"><a href="#7-6-2-react-Redux将所有组件分成两大类" class="headerlink" title="7.6.2. react-Redux将所有组件分成两大类"></a>7.6.2. react-Redux将所有组件分成两大类</h3><ol>
<li>UI组件<ol>
<li>只负责 UI 的呈现，不带有任何业务逻辑<ol>
<li>通过props接收数据(一般数据和函数)</li>
<li>不使用任何 Redux 的 API</li>
<li>一般保存在components文件夹下</li>
</ol>
</li>
</ol>
</li>
<li>容器组件<ol>
<li>负责管理数据和业务逻辑，不负责UI的呈现<ol>
<li>使用 Redux 的 API</li>
<li>一般保存在containers文件夹下</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="7-6-3-相关API"><a href="#7-6-3-相关API" class="headerlink" title="7.6.3. 相关API"></a>7.6.3. 相关API</h3><ol>
<li>Provider：让所有组件都可以得到state数据</li>
<li>connect：用于包装 UI 组件生成容器组件</li>
<li>mapStateToprops：将外部的数据（即state对象）转换为UI组件的标签属性</li>
<li>mapDispatchToProps：将分发action的函数转换为UI组件的标签属性</li>
</ol>
<h2 id="7-7-使用上redux调试工具"><a href="#7-7-使用上redux调试工具" class="headerlink" title="7.7. 使用上redux调试工具"></a>7.7. 使用上redux调试工具</h2><h3 id="7-7-1-安装chrome浏览器插件"><a href="#7-7-1-安装chrome浏览器插件" class="headerlink" title="7.7.1. 安装chrome浏览器插件"></a>7.7.1. 安装chrome浏览器插件</h3><p><img src="https://tu.sunning.fit/i/2022/07/20/62d7cded320fd.png"></p>
<h3 id="7-7-2-下载工具依赖包"><a href="#7-7-2-下载工具依赖包" class="headerlink" title="7.7.2. 下载工具依赖包"></a>7.7.2. 下载工具依赖包</h3><p>npm install –save-dev redux-devtools-extension</p>
<h2 id="7-8-纯函数和高阶函数"><a href="#7-8-纯函数和高阶函数" class="headerlink" title="7.8. 纯函数和高阶函数"></a>7.8. 纯函数和高阶函数</h2><h3 id="7-8-1-纯函数"><a href="#7-8-1-纯函数" class="headerlink" title="7.8.1. 纯函数"></a>7.8.1. 纯函数</h3><ol>
<li>一类特别的函数: 只要是同样的输入(实参)，必定得到同样的输出(返回)</li>
<li>必须遵守以下一些约束<ol>
<li>不得改写参数数据<ol>
<li>不会产生任何副作用，例如网络请求，输入和输出设备</li>
<li>不能调用Date.now()或者Math.random()等不纯的方法</li>
</ol>
</li>
</ol>
</li>
<li>redux的reducer函数必须是一个纯函数</li>
</ol>
<h3 id="7-8-2-高阶函数"><a href="#7-8-2-高阶函数" class="headerlink" title="7.8.2. 高阶函数"></a>7.8.2. 高阶函数</h3><ol>
<li>理解: 一类特别的函数<ol>
<li>情况1: 参数是函数<ol>
<li>情况2: 返回是函数</li>
</ol>
</li>
</ol>
</li>
<li>常见的高阶函数:<ol>
<li>定时器设置函数<ol>
<li>数组的forEach()&#x2F;map()&#x2F;filter()&#x2F;reduce()&#x2F;find()&#x2F;bind()</li>
<li>promise</li>
<li>react-redux中的connect函数</li>
</ol>
</li>
</ol>
</li>
<li>作用: 能实现更加动态, 更加可扩展的功能</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Sakurairo主题设置</title>
    <url>/2022/07/21/Sakurairo%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Sakurairo-主题设置"><a href="#Sakurairo-主题设置" class="headerlink" title="Sakurairo 主题设置"></a>Sakurairo 主题设置</h1><h2 id="页尾附加信息"><a href="#页尾附加信息" class="headerlink" title="页尾附加信息"></a>页尾附加信息</h2><p>全局设置——页尾选项</p>
<p><strong>页尾信息</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">网站已勉强运行了：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;sitetime&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: pink&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">Copyright © by 遇到困难睡大觉 All Rights Reserved.</span><br></pre></td></tr></table></figure>

<p><strong>页尾附加代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;sitetime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">siteTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="string">&quot;siteTime()&quot;</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> seconds = <span class="number">1000</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> minutes = seconds * <span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> hours = minutes * <span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> days = hours * <span class="number">24</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> years = days * <span class="number">365</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> todayYear = today.<span class="title function_">getFullYear</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> todayMonth = today.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> todayDate = today.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> todayHour = today.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> todayMinute = today.<span class="title function_">getMinutes</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> todaySecond = today.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        year - 作为date对象的年份，为4位年份值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        month - 0-11之间的整数，做为date对象的月份</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        day - 1-31之间的整数，做为date对象的天数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        minutes - 0-59之间的整数，做为date对象的分钟数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        seconds - 0-59之间的整数，做为date对象的秒数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> t1 = <span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">2022</span>,<span class="number">4</span>,<span class="number">26</span>,<span class="number">22</span>,<span class="number">30</span>,<span class="number">0</span>); <span class="comment">//北京时间2016-12-1 00:00:00</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> t2 = <span class="title class_">Date</span>.<span class="title function_">UTC</span>(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> diff = t2-t1;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> diffYears = <span class="title class_">Math</span>.<span class="title function_">floor</span>(diff/years);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> diffDays = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff/days)-diffYears*<span class="number">365</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> diffHours = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff-(diffYears*<span class="number">365</span>+diffDays)*days)/hours);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> diffMinutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours)/minutes);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> diffSeconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sitetime&quot;</span>).<span class="property">innerHTML</span>=diffYears+<span class="string">&quot; 年 &quot;</span>+diffDays+<span class="string">&quot; 天 &quot;</span>+diffHours+<span class="string">&quot; 时 &quot;</span>+diffMinutes+<span class="string">&quot; 分 &quot;</span>+diffSeconds+<span class="string">&quot; 秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">siteTime</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="其他好看的设置"><a href="#其他好看的设置" class="headerlink" title="其他好看的设置"></a>其他好看的设置</h2><p>导航菜单设置——导航菜单收缩比率61.8%</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Router</title>
    <url>/2022/07/21/Router/</url>
    <content><![CDATA[<h1 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h1><p>由路由器进行渲染的组件被称为路由组件（放在pages文件夹里面），由自己引入并在页面里面写标签的组件被称为一般组件（放在components文件夹里面）</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pnpm i vue-router</span><br></pre></td></tr></table></figure>

<p>vue3安装router4</p>
<p>vue2安装router3</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h3><p>引入的方式和vuex类似</p>
<p>在src&#x2F;router&#x2F;index.js里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p> main.js里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入路由对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, createWebHashHistory, createMemoryHistory, <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//vue2 mode history vue3 createWebHistory</span></span><br><span class="line"><span class="comment">//vue2 mode  hash  vue3  createWebHashHistory</span></span><br><span class="line"><span class="comment">//vue2 mode abstact vue3  createMemoryHistory</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//路由数组的类型 RouteRecordRaw</span></span><br><span class="line"><span class="comment">// 定义一些路由</span></span><br><span class="line"><span class="comment">// 每个路由都需要映射到一个组件。</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/a.vue&#x27;</span>)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/b.vue&#x27;</span>)</span><br><span class="line">&#125;]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//导出router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>然后在main.ts上面挂载</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>







<p>实现切换的设置 router-link</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> to=<span class="string">&quot;/about&quot;</span>&gt;<span class="title class_">About</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<p>这个相当于加了一层封装，routerlink本身会把上面的东西变成一个a标签,使得 Vue Router 可以在不重新加载页面的情况下更改 URL，处理 URL 的生成以及编码</p>
<p>指定组件的呈现位置 router-view</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span> <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>每一个路由组件都有自己的route和router,route的配置信息是都不一样的，是每个人独有的，router的配置信息每个人都是一样的就是全局的那唯一一个路由器</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5464e3242a.png" alt="image-20220521231834131"></p>
<p>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载</p>
<p>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息</p>
<p>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到</p>
<h1 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h1><p>作用：给路由命名，化简路由的跳转</p>
<p>给路由命名直接在配置项里面加上name参数即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">children</span>:[</span><br><span class="line">				&#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line">					<span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">					<span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br></pre></td></tr></table></figure>

<p>化简跳转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/demo/test/welcome&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转,注意<span class="string">&#x27;：&#x27;</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">	<span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		name:&#x27;hello&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		query:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		    id:666,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            title:&#x27;你好&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">	&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="多级-嵌套-路由"><a href="#多级-嵌套-路由" class="headerlink" title="多级(嵌套)路由"></a>多级(嵌套)路由</h1><p><strong>配置项里面</strong></p>
<p>一级路由是直接写在index文件里面的</p>
<p>二级路由就要卸载一级路由里面,用children[{},{}] 配置项，里面是一个数组，但是子里面的配置项路径 是不需要加上 &#x2F;的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>如果想要默认就展示某一个页面：</p>
<p>这样就会一开始展示login页面</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/footer.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;&quot;</span>, <span class="comment">//这里啥也不写</span></span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/login.vue&#x27;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;reg&quot;</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;Reg&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/reg.vue&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">]</span><br></pre></td></tr></table></figure>





<p><strong>使用的时候</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;router-link to=&quot;/user&quot;&gt;login&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link style=&quot;margin-left:10px;&quot; to=&quot;/user/reg&quot;&gt;reg&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<p>二级路由要把它的爸爸一起带上去，要写完整路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link <span class="keyword">class</span>=<span class="string">&quot;list-group-item&quot;</span> active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> to=<span class="string">&quot;/home/news&quot;</span>&gt; </span><br></pre></td></tr></table></figure>



<h1 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h1><h2 id="路由传参-query"><a href="#路由传参-query" class="headerlink" title="路由传参(query)"></a>路由传参(query)</h2><p>传参的方法和axios传递参数的方法类似</p>
<p>？后面跟着需要传递的参数，如果有多个参数，用&amp;分开</p>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><h4 id="跳转并携带query参数，to的字符串写法"><a href="#跳转并携带query参数，to的字符串写法" class="headerlink" title="跳转并携带query参数，to的字符串写法"></a>跳转并携带query参数，to的字符串写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot; `/home/message/detail?id=$&#123;xxx&#125; &amp;title=$&#123;xxx&#125;` &quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>jm mo用：把后面的东西变成js语法，然后包上 &#96;&#96;变成模板字符串</p>
<p>如果需要引用文件里面的变量，用${} 的形式</p>
<h4 id="跳转并携带query参数，to的对象写法"><a href="#跳转并携带query参数，to的对象写法" class="headerlink" title="跳转并携带query参数，to的对象写法"></a>跳转并携带query参数，to的对象写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">	path:&#x27;/home/message/detail&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">	query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">		id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">        title:&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">	&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="参数访问"><a href="#参数访问" class="headerlink" title="参数访问"></a>参数访问</h3><p><strong>Vue2:</strong></p>
<p> this.$route.query.xxx想要访问的东西</p>
<p>后面props配置可以化简这部分的写法</p>
<p><strong>Vue3:</strong></p>
<p>注意这里导入的是route不是router</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">const route = useRoute()</span><br><span class="line"></span><br><span class="line"> &lt;div&gt;品牌：&#123;&#123; route.query?.name &#125;&#125;&lt;/div&gt;</span><br><span class="line"> &lt;div&gt;价格：&#123;&#123; route.query?.price &#125;&#125;&lt;/div&gt;</span><br><span class="line"> &lt;div&gt;ID：&#123;&#123; route.query?.id &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h2 id="Params路由传参"><a href="#Params路由传参" class="headerlink" title="Params路由传参"></a>Params路由传参</h2><h3 id="参数传递-1"><a href="#参数传递-1" class="headerlink" title="参数传递"></a>参数传递</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">toDetail</span> = (<span class="params">item: Item</span>) =&gt; &#123;</span><br><span class="line">    router.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Reg&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: item</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/home/message/detail/666/你好&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				</span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">		name:&#x27;xiangqing&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">		params:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">		   id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">            title:&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">		&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">	&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p>
</blockquote>
<h3 id="参数访问-1"><a href="#参数访问-1" class="headerlink" title="参数访问"></a>参数访问</h3><p><strong>Vue2:</strong></p>
<p>使用参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">xxx</span></span><br></pre></td></tr></table></figure>



<p><strong>Vue3:</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"></span><br><span class="line">&lt;div&gt;品牌：&#123;&#123; route.<span class="property">params</span>?.<span class="property">name</span> &#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>价格：&#123;&#123; route.params?.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ID：&#123;&#123; route.params?.id &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="动态路由传参-params"><a href="#动态路由传参-params" class="headerlink" title="动态路由传参+params"></a>动态路由传参+params</h2><p>只用params的时候，刷新页面会失去拿到的参数</p>
<p>很多时候，我们需要将给定匹配模式的路由映射到同一个组件。例如，我们可能有一个 <code>User</code> 组件，它应该对所有用户进行渲染，但用户 ID 不同。在 Vue Router 中，我们可以在路径中使用一个动态字段来实现，我们称之为 <em>路径参数</em> </p>
<p>路由参数要修改为 ‘&#x2F;login&#x2F;:username’（官方称为动态路由或者参数暂位符）</p>
<p>但是这样就不会类似于 post 请求，他会把接收到的参数替换作为地址。</p>
<p>假如传入参数为：params: { username: ‘admin’}，那么最终访问的地址为：<a href="http://localhost:8080/home/admin">http://localhost:8080/home/admin</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>:<span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;Login&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/login.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//动态路由参数</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/reg/:id&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;Reg&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/reg.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">toDetail</span> = (<span class="params">item: Item</span>) =&gt; &#123;</span><br><span class="line">    router.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Reg&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: item.<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; data &#125; <span class="keyword">from</span> <span class="string">&#x27;./list.json&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> item = data.<span class="title function_">find</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">id</span> === <span class="title class_">Number</span>(route.<span class="property">params</span>.<span class="property">id</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Array.prototype.find()</p>
<p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</p>
<p>const array1 &#x3D; [5, 12, 8, 130, 44];</p>
<p>const found &#x3D; array1.find(element &#x3D;&gt; element &gt; 10);</p>
<p>console.log(found);<br>&#x2F;&#x2F; expected output: 12</p>
<p>findIndex方法返回数组中找到的元素的索引，而不是值</p>
</blockquote>
<h1 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h1><p>命名视图可以在同一级（同一个组件）中展示更多的路由视图，而不是嵌套显示。 命名视图可以让一个组件中具有多个路由渲染出口，这对于一些特定的布局组件非常有用。 命名视图的概念非常类似于“具名插槽”，并且视图的默认名称也是 <code>default</code>。</p>
<p>用components配置（带上s）</p>
<p>components里面放的就是一个对象了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">            <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/layout/menu.vue&#x27;</span>),</span><br><span class="line">            <span class="attr">header</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/layout/header.vue&#x27;</span>),</span><br><span class="line">            <span class="attr">content</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/layout/content.vue&#x27;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>对应Router-view 通过name 对应组件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h1 id="别名—重定向"><a href="#别名—重定向" class="headerlink" title="别名—重定向"></a>别名—重定向</h1><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="字符串形式："><a href="#字符串形式：" class="headerlink" title="字符串形式："></a>字符串形式：</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">redirect</span>:<span class="string">&#x27;/user1&#x27;</span>,</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/root.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">redirect</span>:<span class="string">&#x27;/user1&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;/user1&#x27;</span>,</span><br><span class="line">                <span class="attr">components</span>:&#123;</span><br><span class="line">                    <span class="attr">default</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/A.vue&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;/user2&#x27;</span>,</span><br><span class="line">                <span class="attr">components</span>:&#123;</span><br><span class="line">                    <span class="attr">bbb</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/B.vue&#x27;</span>),</span><br><span class="line">                    <span class="attr">ccc</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/C.vue&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="对象形式："><a href="#对象形式：" class="headerlink" title="对象形式："></a>对象形式：</h3><p>里面是一个对象，对象里面可以用path或者name属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">redirect</span>: &#123; <span class="attr">path</span>: <span class="string">&#x27;/user1&#x27;</span> &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="函数形式"><a href="#函数形式" class="headerlink" title="函数形式"></a>函数形式</h3><p>传入一个参数to,to里面是当前路由的信息，可以传参</p>
<p>需要返回路径或者name</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/root.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">redirect</span>: <span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/user1&#x27;</span>,</span><br><span class="line">                <span class="attr">query</span>: &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;sun&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/user1&#x27;</span>,</span><br><span class="line">                <span class="attr">components</span>: &#123;</span><br><span class="line">                    <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/A.vue&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/user2&#x27;</span>,</span><br><span class="line">                <span class="attr">components</span>: &#123;</span><br><span class="line">                    <span class="attr">bbb</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/B.vue&#x27;</span>),</span><br><span class="line">                    <span class="attr">ccc</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/C.vue&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="别名-alias"><a href="#别名-alias" class="headerlink" title="别名 alias"></a>别名 alias</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/root.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">alias</span>:[<span class="string">&quot;/root&quot;</span>,<span class="string">&quot;/root2&quot;</span>,<span class="string">&quot;/root3&quot;</span>],</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;user1&#x27;</span>,</span><br><span class="line">                <span class="attr">components</span>: &#123;</span><br><span class="line">                    <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/A.vue&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;user2&#x27;</span>,</span><br><span class="line">                <span class="attr">components</span>: &#123;</span><br><span class="line">                    <span class="attr">bbb</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/B.vue&#x27;</span>),</span><br><span class="line">                    <span class="attr">ccc</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/C.vue&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>访问&#x2F;root,&#x2F;root2,&#x2F;root3都会导航到起这个别名的界面</p>
<h1 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h1><p>作用：让路由更加方便地收到参数</p>
<p>谁接收东西，就在哪个地方写组建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">      <span class="comment">//props的第一种写法，值为对象，该对象中的所有key-value都会以props的形式传给Detail组件。</span></span><br><span class="line">	  <span class="comment">// props:&#123;a:1,b:&#x27;hello&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给Detail组件。</span></span><br><span class="line">	<span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//props的第三种写法，值为函数</span></span><br><span class="line">	<span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			<span class="attr">id</span>:$route.<span class="property">params</span>.<span class="property">id</span>,</span><br><span class="line">			<span class="attr">title</span>:$route.<span class="property">params</span>.<span class="property">title</span>,</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>第一种写法只能传递固定的数据</p>
<p>获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;a&#125;&#125;   &#123;&#123;b&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>第二种写法难以把路由传递过去的参数和本来的参数做出区分，而且不能传递query的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">上面的params占位符是id 和 title</span><br><span class="line">所以可以直接使用的是&#123;&#123;id&#125;&#125;  &#123;&#123;title&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>第三种写法写成一个函数，每一组keyvalue和第一种一样作为props传递过去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			<span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">			<span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span>,</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>函数定义的时候默认获取$route就可以通过 route来获取参数了</p>
<p>还可以用解构赋值的方式化简写法</p>
<blockquote>
<p><strong>解构赋值</strong>语法是一种 Javascript 表达式。通过<strong>解构赋值,</strong> 可以将属性&#x2F;值从对象&#x2F;数组中取出,赋值给其他变量。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">props</span>(<span class="params">&#123;query&#125;</span>)&#123;  <span class="comment">//解构赋值，直接拿到query</span></span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			<span class="attr">id</span>:query.<span class="property">id</span>,</span><br><span class="line">			<span class="attr">title</span>:query.<span class="property">title</span>,</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>继续简写  结构赋值的连续写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">props</span>(<span class="params">&#123;query：&#123;id,title&#125;&#125;</span>)&#123;  <span class="comment">//解构赋值，拿出query再在query里面拿出id和title</span></span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			id,title</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>ps这也是个回调函数</p>
<blockquote>
<p>回调函数</p>
<p>被作为实参传入另一函数，并在该外部函数内被调用，用以来完成某些任务的函数，称为回调函数。</p>
</blockquote>
<h1 id="路由跳转push和repalce方法"><a href="#路由跳转push和repalce方法" class="headerlink" title="路由跳转push和repalce方法"></a>路由跳转push和repalce方法</h1><ol>
<li><p>作用：控制路由跳转时操作浏览器历史记录的模式</p>
</li>
<li><p>浏览器的历史记录有两种写入方式：push和replace，其中push是追加历史记录，replace是替换当前记录。路由跳转时候默认为push方式</p>
</li>
<li><p>开启replace模式：  加上个replace参数即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link replace ...&gt;<span class="title class_">News</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>默认方法(push)：</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54664356c1.png" alt="image-20220522115345284"><template><br>  <div class="q-pa-md"><br>    <div ref="myList" class="row justify-center q-gutter-sm"><br>      <q-intersection
        v-for="index in 60"
        :key="index"
        :root="listEl"
        transition="scale"
        class="example-item"
      ><br>        <q-card class="q-ma-sm"><br>          <img src="https://cdn.quasar.dev/img/mountains.jpg"></p>
<pre><code>      &lt;q-card-section&gt;
        &lt;div class=&quot;text-h6&quot;&gt;Card #&#123;&#123; index &#125;&#125;&lt;/div&gt;
        &lt;div class=&quot;text-subtitle2&quot;&gt;by John Doe&lt;/div&gt;
      &lt;/q-card-section&gt;
    &lt;/q-card&gt;
  &lt;/q-intersection&gt;
&lt;/div&gt;
</code></pre>
  </div>
</template>

<p>repalce方法：</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5466d61e6c.png" alt="image-20220522115515885"></p>
<p>这种类似替换的动作，就没法前进后退了</p>
<h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><p>用$router.xxx可以使用对应的api完成相应的操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h1><p>作用：让不展示的路由组建保持挂载不被销毁</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//缓存一个路由组件</span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;News&quot;</span>&gt;</span> //include中写想要缓存的组件名，不写表示全部缓存</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//缓存多个路由组件</span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>include里面写的是缓存的组件的名字，不是路由的名字！</p>
<p>缓存多个组件可以用：把里面的东西变成js表达式，然后写一个数组即可</p>
<h1 id="activated和deactivated"><a href="#activated和deactivated" class="headerlink" title="activated和deactivated"></a>activated和deactivated</h1><ol>
<li><code>activated</code>和<code>deactivated</code>是路由组件所独有的两个钩子，用于捕获路由组件的激活状态</li>
<li>具体使用：<ol>
<li><code>activated</code>路由组件被激活时触发</li>
<li><code>deactivated</code>路由组件失活时触发</li>
</ol>
</li>
</ol>
<h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><p>对路由进行权限控制</p>
<p>全局守卫</p>
<p>to去哪个页面，from从哪里去，next放行</p>
<p>为了方便判断，可以写一个属性xxx表示是否需要权限验证，一般放在meta里面</p>
<p>meta叫做路由原信息，可以存需要的所有东西</p>
<p>这些都是写在路由配置项里面的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">meta</span>:&#123;isAuth：<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>



<p>全局前置路由守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">	<span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line">			<span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>全局后置路由守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">	<span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line">		<span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>独享守卫</p>
<p>写在单独的那个路由的配置项里面</p>
<p>这个是beforeEnter</p>
<p>ps.独享守卫没有后置独享守卫，只有前置守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>组件内守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;...&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;...&#125;,</span><br></pre></td></tr></table></figure>

<p>这个也是要执行next如果没有next就不会显示新的页面</p>
<p>大概的执行次序</p>
<p>前置全局守卫</p>
<p>后置全局守卫</p>
<p>mounted</p>
<p>组件内激活activeated</p>
<p>组件内的进入守卫</p>
<p>如果页面切换了，执行组件内的离开守卫</p>
<p>全局内的守卫是由路由调用，而组件内的守卫不一定由路由进行调用</p>
<h1 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h1><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值</p>
<p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器</p>
<p>hash模式：</p>
<p>地址中永远带着#号，不美观<br>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法<br>兼容性较好<br>history模式：</p>
<p>地址干净，美观<br>兼容性和hash模式相比略差<br>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass</title>
    <url>/2022/07/21/Sass/</url>
    <content><![CDATA[<h1 id="安装与编译"><a href="#安装与编译" class="headerlink" title="安装与编译"></a>安装与编译</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install sass -g</span><br></pre></td></tr></table></figure>



<h2 id="编译sass"><a href="#编译sass" class="headerlink" title="编译sass"></a>编译sass</h2><p>有了全局的sass环境之后就可以对sass文件编译了</p>
<p>sass文件后缀有两种,他们都是浏览器不认识的</p>
<ul>
<li><p><code>.sass</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> </span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span></span><br><span class="line">	height: <span class="number">200px</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.scss</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="实时编译"><a href="#实时编译" class="headerlink" title="实时编译"></a>实时编译</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实时监控 index.scss 文件，只要发生修改就自动编译，并放在 index.css 文件里面</span></span><br><span class="line">$ sass --watch index.scss:index.css</span><br></pre></td></tr></table></figure>

<h3 id="实时监控目录"><a href="#实时监控目录" class="headerlink" title="实时监控目录"></a>实时监控目录</h3><ul>
<li>只要修改 sass 文件夹下的内容，就会实时的相应在 css 文件夹中</li>
<li>新添加一个文件也会实时响应</li>
<li>但是删除一个文件，css 文件夹中不会自动删除，需要手动删除</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实时监控 sass 这个目录，只要有变化，就会实时响应在 css 文件夹下</span></span><br><span class="line">$ sass --watch sass:css</span><br></pre></td></tr></table></figure>



<h2 id="Sass语法"><a href="#Sass语法" class="headerlink" title="Sass语法"></a>Sass语法</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图</title>
    <url>/2022/07/21/UML%E7%B1%BB%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><h2 id="类图中具体类、抽象、接口和包的表示法"><a href="#类图中具体类、抽象、接口和包的表示法" class="headerlink" title="类图中具体类、抽象、接口和包的表示法"></a>类图中具体类、抽象、接口和包的表示法</h2><h2 id="具体类"><a href="#具体类" class="headerlink" title="具体类"></a>具体类</h2><ul>
<li>用矩形框表示</li>
<li>三层<ul>
<li>类名</li>
<li>类的成员变量</li>
<li>类的方法</li>
</ul>
</li>
<li>访问修饰符<ul>
<li>“+”表示 <code>public</code>；</li>
<li>“-”表示 <code>private</code>；</li>
<li>“#”表示 <code>protected</code>；</li>
<li>不带符号表示 <code>default</code>。</li>
</ul>
</li>
</ul>
<p><img src="https://tu.sunning.fit/i/2022/06/06/629deec5ed602.png" alt="image-20220605131720431"></p>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>也用矩形框表示，但是类名和抽象方法的名字都用斜体字表示</p>
<p><img src="https://tu.sunning.fit/i/2022/06/06/629deeda411b1.png" alt="image-20220605132123383"></p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>也用矩形框</p>
<ul>
<li>第一层用构造型 &lt;&lt; interface &gt;&gt;表示，下面是接口的名字</li>
<li>第二层是方法</li>
</ul>
<p><img src="https://tu.sunning.fit/i/2022/06/06/629deede992cc.png" alt="image-20220605132417555"></p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>类和接口一般都出现在包中，UML类图中包的表示形式如图4所示</p>
<p><img src="https://tu.sunning.fit/i/2022/06/06/629deee469a8d.png" alt="image-20220605132434597"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>UML类图</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim</title>
    <url>/2022/07/21/Vim%20/</url>
    <content><![CDATA[<h1 id="vi和vim的基本介绍"><a href="#vi和vim的基本介绍" class="headerlink" title="vi和vim的基本介绍"></a>vi和vim的基本介绍</h1><p><img src="https://tu.sunning.fit/i/2022/07/12/62cd3a760da20.png" alt="Untitled"></p>
<ul>
<li><p>各个模式之间的切换图</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd3a7af239c.png" alt="Untitled"></p>
</li>
<li><p>快捷键（了解常用的这几个即可）</p>
<ol>
<li>拷贝当前行  拷贝当前行向下的5行  拷贝当前行向上的5行   粘贴<br>yy(copy)                5yy                           yy5                             p(paste)</li>
<li>删除当前行 删除当前行向下的5行<br>dd               5dd</li>
<li>在文件中查找某个单词   查找下一个     &#x2F;加上需要的单词   n就是重复查找动作<br>搜索后，我们打开别的文件，发现也被高亮了，怎么关闭高亮？<br>命令模式下，输入:nohlsearch  也可以:set nohlsearch； 当然，可以简写，noh或者set noh</li>
<li>设置文件行号  取消文件行号  :set nu      :set nonu</li>
<li>快捷键移动到最末行和最首行 一般模式下 gg   G</li>
<li>输入后撤销某个动作 一般模式下 u</li>
<li>光标移动到某一行 一般模式下 行号+gg</li>
</ol>
</li>
</ul>
<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><p>a (append 追加) 在当前字母的后面追加</p>
<p>i (insert)  在当前字母的前面插入</p>
<p>o (open a line)  接着打开一个新行（在下面）</p>
<p>对应的大写字母表示在这个行的对应位置操作，A在当前行的最后面追加，I在当前行的最前面追加，O在当前行的上面插入一个新行</p>
<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><p>d (delete)</p>
<p>dw(delete word) 删除单词</p>
<p>dd(删除一行) </p>
<p>x(删除一个字符)</p>
<h3 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h3><p>diw（delete inner word）删除单词不包括单词旁边的空格</p>
<p>daw(delete around word) 删除单词，包括单词旁边的空格</p>
<h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><p>c (change)</p>
<p>ciw (change inner word)  删除这个单词，并且进入插入模式</p>
<p>ct) 修改到括号  （change to）</p>
<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>find</p>
<p>f+查找的字母</p>
<p>; 是重复查到下一个</p>
<p>&#x2F; + 查找的单词</p>
<p>vim里面大小写基本是同功能但是相反，&#x2F;大写是从这一行的上面查找，F也是从上面开始查找 </p>
<h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><p>hjkl 左下上右  一般下是用到最多的，所以放在j这个最容易被摸到的按键的地方</p>
<p>w(word) 移动到单词开头</p>
<p>b(begin) 移动到上一个单词开头</p>
<p>： + 行数 移动到对应的行</p>
<p>0移动到开头，$移动到行尾</p>
<p>gg 文件开头  G 文件结尾</p>
<p>ctrl+F（forward） 翻页</p>
<p>ctrl+u （upward）</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>u （undo）撤销操作</p>
<p>y （yank） 粘贴</p>
<p>p (put)  输出</p>
<h1 id="浏览器插件Surfingkeys"><a href="#浏览器插件Surfingkeys" class="headerlink" title="浏览器插件Surfingkeys"></a>浏览器插件Surfingkeys</h1><p><img src="https://tu.sunning.fit/i/2022/07/12/62cd395fc273b.png" alt="surfingkeys快捷键.png"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd396d9c089.png" alt="Untitled"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd3978948c4.png" alt="Untitled"></p>
<p> ctrl+T 新建标签页</p>
<p>ctrl+w 删除标签页</p>
<h2 id="normal模式"><a href="#normal模式" class="headerlink" title="normal模式"></a>normal模式</h2><p>gi 定位到第一个搜索框 </p>
<p>j k 下上移动</p>
<p>f 识别到对应的点击点</p>
<p>空格就直接是下一页 </p>
<p>&#x2F;是搜索，按n是进行下一个搜索项 </p>
<p>E R 跳转到左右的标签页x</p>
<p>xx 关闭当前标签也</p>
<p>X 恢复当前标签页</p>
<blockquote>
<blockquote>
<p>向左移动当前标签页</p>
</blockquote>
</blockquote>
<p>&lt;&lt;向右移动当前标签页</p>
<p>T 搜索打开的标签页</p>
<p>b搜索书签</p>
<h2 id="插入模式-回到normal按exc"><a href="#插入模式-回到normal按exc" class="headerlink" title="插入模式  回到normal按exc"></a>插入模式  回到normal按exc</h2><p>编辑模式按 i 会选择在那个输入框编辑</p>
<p>在对应的编辑框里面可以用vim的方式进行编辑</p>
<h2 id="v-模式"><a href="#v-模式" class="headerlink" title="v 模式"></a>v 模式</h2><p>按v 选择地方，和vim相同</p>
<ul>
<li><p>设置所有网页以新标签页打开链接</p>
<p>  安装插件</p>
<p>  <strong>Tab Activate</strong></p>
<p>  谷歌的设置项里面勾选</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/12/62cd397dcde4b.png" alt="Untitled"></p>
</li>
</ul>
<p>这个markdown讲得非常好</p>
<p><a href="https://github.com/brookhong/Surfingkeys/blob/master/README_CN.md#%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7">Surfingkeys&#x2F;README_CN.md at master · brookhong&#x2F;Surfingkeys</a></p>
]]></content>
      <categories>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite</title>
    <url>/2022/07/21/Vite/</url>
    <content><![CDATA[<h1 id="初始化新项目"><a href="#初始化新项目" class="headerlink" title="初始化新项目"></a>初始化新项目</h1><p>使用vite的最新版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm init vite@latest </span><br></pre></td></tr></table></figure>

<p>然后填项目名称</p>
<p>选择项目模板</p>
<p>然后进入对应的文件夹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>



<p>package.json命令解析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span>, <span class="comment">// 启动开发服务器，别名：`vite dev`，`vite serve`</span></span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>, <span class="comment">// 为生产环境构建产物</span></span><br><span class="line">    <span class="string">&quot;preview&quot;</span>: <span class="string">&quot;vite preview&quot;</span> <span class="comment">// 本地预览生产构建产物</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>App.vue全局的组件,在这里写的css会影响全局</p>
<p>main.ts公共的ts文件,共同的api可以放到这里面去</p>
<p>index.html 这是和webpack不一样的地方，是通过index.html作为入口文件的，<strong>（webpack，rollup 他们的入口文件都是enrty input 是一个js文件 而Vite 的入口文件是一个html文件，他刚开始不会编译这些js文件 只有当你用到的时候 如script src&#x3D;”xxxxx.js” 会发起一个请求被vite拦截这时候才会解析js文件）</strong></p>
<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>    							<span class="comment">//配置</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc --noEmit &amp;&amp; vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.25&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>     <span class="comment">//依赖包</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.5.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.9.9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-tsc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.34.7&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>vite.config.ts是vite的配置文件</p>
<h2 id="npm-run-dev-详解"><a href="#npm-run-dev-详解" class="headerlink" title="npm run dev 详解"></a>npm run dev 详解</h2><p>npm run dev 我们在执行这个命令的时候回去找package.json的scripts，然后执行对应的dev指令</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c546794c8aa.png" alt="image-20220704215211940"></p>
<p>那直接执行vite命令不是更方便吗——因为我们的电脑上没有配置过相关命令， 所以无法直接执行</p>
<p>在我们执行npm install 的时候会在node_modules&#x2F;.bin&#x2F;创建好可执行文件.bin目录吗，这个目录不是任何npm包</p>
<p>目录下的文件表示这是一个个软链接</p>
<p>所有文件的开头都是#!&#x2F;usr&#x2F;bin&#x2F;env node这是一个脚本</p>
<p>当我们执行npm run xxx的时候，npm会通过软链接查找这个软链接存在于源码目录node_modules&#x2F;vite</p>
<p>查找规则是</p>
<p>1.先从当前项目的node_modlue &#x2F;bin去找,</p>
<p>2.找不到去全局的node_module&#x2F;bin 去找</p>
<p>3.再找不到 去环境变量去找</p>
<p>node_modules&#x2F;bin中有三个vite文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># unix Linux macOS 系默认的可执行文件，必须输入完整文件名</span></span><br><span class="line">vite</span><br><span class="line"> </span><br><span class="line"><span class="comment"># windows cmd 中默认的可执行文件，当我们不添加后缀名时，自动根据 pathext 查找文件</span></span><br><span class="line">vite</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Windows PowerShell 中可执行文件，可以跨平台</span></span><br><span class="line">vite</span><br></pre></td></tr></table></figure>

<p>arch当然用的也是第一个啦</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vs快捷键（ride也适用）</title>
    <url>/2022/07/21/Vs%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%88ride%E4%B9%9F%E9%80%82%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/2022/07/21/TypeScript/</url>
    <content><![CDATA[<h1 id="安装和介绍"><a href="#安装和介绍" class="headerlink" title="安装和介绍"></a>安装和介绍</h1><p>npm的–save 和 –save-dev区别</p>
<ul>
<li><code>--save</code> 表示应用在运行时依赖</li>
<li><code>--save-dev</code> 表示应用只在开发目的依赖</li>
</ul>
<p>全局安装编译器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --global typescript</span><br></pre></td></tr></table></figure>

<p>将ts文件编译成js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tsc xxx</span><br></pre></td></tr></table></figure>

<p>会把ts自动生成对应文件名的js文件</p>
<p>还可以用高级的js语法，ts可以帮我们在低级的浏览器上适配</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c544ff0b97e.png" alt="image-20220601003156917"></p>
<p>types：类型</p>
<p>新一代的特性（在旧的版本上进行编译）</p>
<p>js没有的特性</p>
<p>先进的变成特性 meta-programming features</p>
<p>丰富的配置选项</p>
<p>先进的编译工具</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54504611f7.png" alt="image-20220601004113735"></p>
<h1 id="Core-Types"><a href="#Core-Types" class="headerlink" title="Core Types"></a>Core Types</h1><p>js是动态类型，一个变量可能原来是数字，运行运行中变成字符串了，ts是静态类型，开发的时候就定义好了变量类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>例子</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>number</td>
<td>1,5.3,-10</td>
<td>all numbers,no differentiation between integers or floats<br />（js里面所有number都默认是float类型）</td>
</tr>
<tr>
<td>string</td>
<td>‘hi’,(被&#96;包起来的模板字符串)hi</td>
<td>all text values</td>
</tr>
<tr>
<td>boolean</td>
<td>true ,false</td>
<td>just these two</td>
</tr>
<tr>
<td>object</td>
<td>{age:10}</td>
<td>any javascript object,more specific types(type of boject) are possible</td>
</tr>
<tr>
<td>Array</td>
<td>[1,2,3]</td>
<td>any javascript array,type can be flexible or strict（regarding the element types）</td>
</tr>
<tr>
<td>Tuple</td>
<td>[1,2]</td>
<td>added by typescript:fixed-length array</td>
</tr>
<tr>
<td>Enum</td>
<td>enum{NEW,OLD}</td>
<td>added by typescript:automatically enumeratedc global constant identifiers</td>
</tr>
<tr>
<td>any</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="number-string-boolean"><a href="#number-string-boolean" class="headerlink" title="number,string,boolean"></a>number,string,boolean</h2> <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1:<span class="built_in">number</span>,num2:<span class="built_in">number</span>,showResults:<span class="built_in">boolean</span>,phrase:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result=num1+num2</span><br><span class="line">    <span class="keyword">if</span>(showResults)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(phrase+result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a=<span class="number">5</span>;  <span class="comment">//ts识别是a只能是number类型，而且a是const,所以不能修改  类型：const number</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="number">2.8</span>;  <span class="comment">//类型:let number  会自动识别，所以没必要 let b:number=2.8</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>:<span class="built_in">number</span> </span><br><span class="line"><span class="keyword">const</span> c;</span><br><span class="line">c=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> d=<span class="string">&#x27;result is:&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(a,b,c,d));</span><br></pre></td></tr></table></figure>

<h2 id="boject"><a href="#boject" class="headerlink" title="boject"></a>boject</h2><p>原来定义好了的对象，不能增加删除里面的属性，不能更改属性的类型</p>
<p>定义一个object  （推荐）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span>=&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;sun&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">21</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>);  <span class="comment">//可以</span></span><br></pre></td></tr></table></figure>

<p>相当于这样</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span>: <span class="built_in">object</span>=&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;sun&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">21</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>); <span class="comment">//不行，因为这个只告诉了是一个object,没告诉tsobject里面有什么东西 </span></span><br></pre></td></tr></table></figure>

<p>完整的写法（和上面的上面是一个作用）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span>: &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">   <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">&#125; =&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;sun&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">21</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>);  <span class="comment">//可以</span></span><br></pre></td></tr></table></figure>

<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>定义一个string类型的数组</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">favoriteActivities</span>:<span class="built_in">string</span>[];</span><br><span class="line">favoriteActivities=[<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>any类型的数组 和js数组一样存任意类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">favoriteActivities</span>:<span class="built_in">any</span>[];</span><br><span class="line">favoriteActivities=[<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h2 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h2><p> 元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 例如，可以定义一对值分别为 <code>string</code>和<code>number</code>类型的元组。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<p>当访问一个已知索引的元素，会得到正确的类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">1</span>)); <span class="comment">// OK</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">1</span>)); <span class="comment">// Error, &#x27;number&#x27; does not have &#x27;substr&#x27;</span></span><br></pre></td></tr></table></figure>

<p>访问一个越界的元素，会使用联合类型替代</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">x[<span class="number">3</span>] = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">5</span>].<span class="title function_">toString</span>()); <span class="comment">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span>; <span class="comment">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure>

<h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><p>当需要使用的东西是固定的，可以给他们起不同的别名，这时候枚举的作用就显现出来了 一组值和它们的映射值</p>
<p>类似C#中的枚举类型，用枚举类型可以为一组数值赋予友好的名字</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;<span class="title class_">Red</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span>&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br></pre></td></tr></table></figure>

<p>这样保证Color能表示的只有Red,Green,Blue （类似游戏角色的状态）</p>
<p>默认情况下从0开始元素编号，但是也可以手动指定成员的数值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;<span class="title class_">Red</span> = <span class="number">1</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span>&#125;  <span class="comment">//这样就是 1,2,3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;<span class="title class_">Red</span> = <span class="number">3</span>, <span class="title class_">Green</span>=<span class="number">1</span>, <span class="title class_">Blue</span>=<span class="number">6</span>&#125;  <span class="comment">//这样就是3 1 6 </span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;<span class="title class_">Red</span> = <span class="string">&#x27;qwer&#x27;</span>, <span class="title class_">Green</span>=<span class="string">&#x27;dccde&#x27;</span>, <span class="title class_">Blue</span>=<span class="number">6</span>&#125;  <span class="comment">//这样就是qwer dccde 6 </span></span><br></pre></td></tr></table></figure>

<p>是代表的东西是什么，不是用对应的下标访问</p>
<p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到Color里的哪个名字，我们可以查找相应的名字：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;<span class="title class_">Red</span> = <span class="number">1</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span>&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">colorName</span>: <span class="built_in">string</span> = <span class="title class_">Color</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colorName);  <span class="comment">// 显示&#x27;Green&#x27;因为上面代码里它的值是2</span></span><br></pre></td></tr></table></figure>

<h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><p>any 指定的东西，之后可以进行修改  （就相当于是普通的js）作用就是让ts不检查这个的类型了</p>
<p>在对现有代码进行改写的时候，<code>any</code>类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。 你可能认为 <code>Object</code>有相似的作用，就像它在其它语言中那样。 但是 <code>Object</code>类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure.<span class="title function_">ifItExists</span>(); <span class="comment">// okay, ifItExists might exist at runtime</span></span><br><span class="line">notSure.<span class="title function_">toFixed</span>(); <span class="comment">// okay, toFixed exists (but the compiler doesn&#x27;t check)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">prettySure</span>: <span class="title class_">Object</span> = <span class="number">4</span>;</span><br><span class="line">prettySure.<span class="title function_">toFixed</span>(); <span class="comment">// Error: Property &#x27;toFixed&#x27; doesn&#x27;t exist on type &#x27;Object&#x27;.</span></span><br></pre></td></tr></table></figure>



<h2 id="Union-Types"><a href="#Union-Types" class="headerlink" title="Union Types"></a>Union Types</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">input1</span>:<span class="built_in">number</span>|<span class="built_in">string</span>   <span class="comment">//代表可以是number类型或者是string类型</span></span><br></pre></td></tr></table></figure>



<p>但这样会带来变量不确定是什么类型，这时候一些操作需要确定类型后再操作</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params">input1:<span class="built_in">number</span>|<span class="built_in">string</span>,input2: <span class="built_in">number</span> | <span class="built_in">string</span> </span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> input1===<span class="string">&quot;number&quot;</span> &amp;&amp; <span class="keyword">typeof</span> input2===<span class="string">&quot;number&quot;</span>)&#123;</span><br><span class="line">    result =input1+input2;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result=input1.<span class="title function_">toString</span>()+input2.<span class="title function_">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Literal-Type"><a href="#Literal-Type" class="headerlink" title="Literal Type"></a>Literal Type</h2><blockquote>
<p>leteral 字面意义的，原文的</p>
</blockquote>
<p>把自己定义的 ‘值’ 当作 ‘类型’ 使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Gender</span> = <span class="string">&quot;male&quot;</span> | <span class="string">&quot;female&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">gender</span>: <span class="title class_">Gender</span>;</span><br><span class="line">gender = <span class="string">&quot;male&quot;</span>; <span class="comment">// Correct</span></span><br><span class="line">gender = <span class="string">&quot;Chinese&quot;</span>; <span class="comment">// Error: not assignable</span></span><br></pre></td></tr></table></figure>

<p>在上面这个例子里面gender只能是male 或者 female</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Cat</span> = <span class="string">&quot;whiteCat&quot;</span> | <span class="string">&quot;blackCat&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Dog</span> = <span class="string">&quot;husky&quot;</span> | <span class="string">&quot;corgi&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pets</span> = <span class="title class_">Cat</span> | <span class="title class_">Dog</span>; </span><br><span class="line"><span class="comment">// The same as: type Pets = &quot;whiteCat&quot; | &quot;blackCat&quot; | &quot;husky&quot; | &quot;corgi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Falsy</span> = <span class="string">&quot;&quot;</span> | <span class="number">0</span> | <span class="literal">false</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// 模拟JS的if条件判断规则</span></span><br></pre></td></tr></table></figure>

<h2 id="Type-Aliases-aliases-custom-types（自定义类型）"><a href="#Type-Aliases-aliases-custom-types（自定义类型）" class="headerlink" title="Type Aliases | aliases custom types（自定义类型）"></a>Type Aliases | aliases custom types（自定义类型）</h2><p>it’s common to want to use the same type more than once and refer to it by a single name.</p>
<p>自定义的类型可以是任何的东西</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Exactly the same as the earlier example</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: Point</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.<span class="property">x</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">printCoord</span>(&#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>可以是basic type 也可是Literal type</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">ID</span> = <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="number">1</span> | ‘<span class="number">123</span>’;</span><br></pre></td></tr></table></figure>

<h2 id="Function-Return-Types-amp-void"><a href="#Function-Return-Types-amp-void" class="headerlink" title="Function Return Types &amp; void"></a>Function Return Types &amp; void</h2><p>定义返回值的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFavoriteNumber</span>(<span class="params"></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">26</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不需要返回值 是void类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFavoriteNumber</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过，如果要打印这个void类型的函数，返回值是undefined</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getFavoriteNumber);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>undefined:</strong></p>
<p>undefined在js中是一个确定的值，值本身就是未定义</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">xxx</span>(<span class="params"></span>):<span class="literal">undefined</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ;  <span class="comment">//如果给函数定义一个undefined的返回值，一定要有return,而且return的东西是空的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="Function-as-types"><a href="#Function-as-types" class="headerlink" title="Function as types"></a>Function as types</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">combineValues</span>:<span class="title class_">Function</span>; <span class="comment">//给combineValues定义function类型</span></span><br></pre></td></tr></table></figure>

<p>如果要指定函数的样子——箭头函数——还可以简写</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">combineValues</span>:<span class="function">(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span></span><br></pre></td></tr></table></figure>

<h1 id="Function-as-types-amp-Callback-回调"><a href="#Function-as-types-amp-Callback-回调" class="headerlink" title="Function as types&amp;Callback(回调)"></a>Function as types&amp;Callback(回调)</h1><p>定义了一个函数，函数体里面计算出result,然后在这个函数里面直接调用传入了的这个函数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addAndHandle</span>(<span class="params">n1:<span class="built_in">number</span>,n2:<span class="built_in">number</span>,cb:(num:<span class="built_in">number</span>)=&gt;<span class="built_in">void</span></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> result=n1+n2;</span><br><span class="line">    <span class="title function_">cb</span>(result);</span><br><span class="line">&#125;<span class="comment">//如果这个传入的函数返回值是void,函数体有return也不会报错，只是外面的这个函数不会去处理返回的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">addAndHandle</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="unknown-type"><a href="#unknown-type" class="headerlink" title="unknown type"></a>unknown type</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">userInput</span>:<span class="built_in">unknown</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">userName</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">userInput=<span class="number">5</span>;</span><br><span class="line">userInput=<span class="string">&#x27;123&#x27;</span>;  <span class="comment">//可以赋值成任意类型，也可以类型转换</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> userInput===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">    userName=userInput;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>unknown type和any的区别是一个是unknown是严格的类型，使用之前必须确认是什么类型才可以进行使用</p>
<h2 id="never-type"><a href="#never-type" class="headerlink" title="never type"></a>never type</h2><p>这个是告诉编译器什么也不返回，不返回任何值，包括undefined</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generateError</span>(<span class="params">message:<span class="built_in">string</span>,code:<span class="built_in">number</span></span>):<span class="built_in">never</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span>&#123;<span class="attr">message</span>:message,<span class="attr">code</span>:code&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">generateError</span>(<span class="string">&#x27;an error occurred&#x27;</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<p>像这样自己定义的异常抛出的就是never,但是ts的提示还是void（因为没啥影响，还没被ts改）</p>
<h1 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h1><p>有时候我们希望接口允许有任意的属性，ts给我们提供了两种索引签名字符串和数字</p>
<p>我们在自定义类型的时候，有可能会希望一个接口允许有任意的属性签名，这时候 <code>任意属性</code> 就派上用场了。</p>
<p>任意属性有两种定义的方式：一种属性签名是 <code>string</code> 类型的，另一种属性签名是 <code>number</code> 类型的。</p>
<h2 id="string类型任意属性"><a href="#string类型任意属性" class="headerlink" title="string类型任意属性"></a>string类型任意属性</h2><p>属性签名是string,比如对象的属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    [<span class="attr">prop</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: A = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>[prop: string]: number</code> 的意思是，<code>A</code> 类型的对象可以有任意属性签名，<code>string</code> 指的是对象的键都是字符串类型的，<code>number</code> 则是指定了属性值的类型。</p>
<p><code>prop</code> 类似于函数的形参，是可以取其他名字的。</p>
<h2 id="number类型任意属性"><a href="#number类型任意属性" class="headerlink" title="number类型任意属性"></a>number类型任意属性</h2><p>属性签名是数组类型的比如数组下标</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: B = [<span class="string">&#x27;suukii&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p><code>[index: number]: string</code> 的意思是，<code>B</code> 类型的数组可以有任意的数字下标，而且数组的成员的类型必须是 <code>string</code>。</p>
<p>同样的，<code>index</code> 也只是类似于函数形参的东西，用其他标识符也是完全可以的。</p>
<h2 id="同时定义两种属性"><a href="#同时定义两种属性" class="headerlink" title="同时定义两种属性"></a>同时定义两种属性</h2><p>一个接口可以同时定义这两种任意属性，但是 <code>number</code> 类型的签名指定的值类型必须是 <code>string</code> 类型的签名指定的值类型的子集</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> C &#123;</span><br><span class="line">    [<span class="attr">prop</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;  <span class="comment">//这个是错的，index指定的类型是string,prop值的类型是number,string不是number的子集</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Numeric index type &#x27;string&#x27; is not assignable to string index type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>

<p>换成下面这样就是可以的，因为function是object的子集</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> C &#123;</span><br><span class="line">    [<span class="attr">prop</span>: <span class="built_in">string</span>]: <span class="built_in">object</span>;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="title class_">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这就像是 定义了一种东西，然后number类型就是可以在那一种东西里面在细分数组（只是类比，不一定对）</p>
</blockquote>
<h2 id="同时定义任意属性和其他类型的属性"><a href="#同时定义任意属性和其他类型的属性" class="headerlink" title="同时定义任意属性和其他类型的属性"></a>同时定义任意属性和其他类型的属性</h2><p><strong>一旦定义了任意属性，那么其他属性(确定属性、可选属性、只读属性等)的类型都必须是它的类型的子集</strong></p>
<p>比如想要一个Person接口，它有一个必选属性 <code>name</code> 和一个可选属性 <code>age</code>，另外还可以有其他 <code>string</code> 类型的任意属性签名。那么 <code>Person</code> 接口可能会被定义成这样：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [<span class="attr">prop</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Property &#x27;age&#x27; of type &#x27;number&#x27; is not assignable to string index type &#x27;string&#x27;.</span></span><br></pre></td></tr></table></figure>

<p>但其实这样子的定义是不成立的，因为 <code>[prop: string]: string</code> 的存在，规定了其他属性的类型也必须是 <code>string</code>，如果想要解决报错，我们可以使用联合类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [<span class="attr">prop</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于 <code>number</code> 类型的任意属性签名，情况也是一样的：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyArray</span> = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="built_in">string</span>;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Property &#x27;0&#x27; of type &#x27;string&#x27; is not assignable to numeric index type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>

<p>但是，<code>number</code> 类型的任意属性签名不会影响其他 <code>string</code> 类型的属性签名：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Arg</span> = &#123;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如上，虽然指定了 <code>number</code> 类型的任意属性的类型是 <code>number</code>，但 <code>length</code> 属性是 <code>string</code> 类型的签名，所以不受前者的影响。</p>
<p>但是反过来就不一样了，如果接口定义了 <code>string</code> 类型的任意属性签名，它不仅会影响其他 <code>string</code> 类型的签名，也会影响其他 <code>number</code> 类型的签名。这一点可以参考<strong>两种任意类型签名并存时，<code>number</code> 类型的签名指定的值类型必须是 <code>string</code> 类型的签名指定的值类型的子集</strong>这句话。</p>
<h1 id="Compiler-amp-Configuration-Deep-Dive"><a href="#Compiler-amp-Configuration-Deep-Dive" class="headerlink" title="Compiler&amp;Configuration Deep Dive"></a>Compiler&amp;Configuration Deep Dive</h1><h2 id="手动配置live-server"><a href="#手动配置live-server" class="headerlink" title="手动配置live-server"></a>手动配置live-server</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>这时候会有package.json文件</p>
<p>用默认值一直回车</p>
<p>安装node的第三方库 lite-server</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --save-dev lite-server</span><br></pre></td></tr></table></figure>

<p>接着在package.json里面添加配置 start 和devDependencies</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;understanding-ts&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;app.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;lite-server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;Maximilian Schwarzmüller&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;lite-server&quot;</span>: <span class="string">&quot;^2.5.4&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着使用</p>
<p>npm start 去启动这个脚本</p>
<h2 id="watch-model-amp-tsc-全局"><a href="#watch-model-amp-tsc-全局" class="headerlink" title="watch model &amp; tsc 全局"></a>watch model &amp; tsc 全局</h2><p>不用每次去编译同一个ts文件 ，开启watch model</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tsc xxx.ts --watch</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">tsc xxx.<span class="property">ts</span> -w</span><br></pre></td></tr></table></figure>



<p>监视一整个文件夹里面的内容</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<p>这时候会出现一个配置文件： tsconfig.json</p>
<p>这时候再执行</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">tsc</span><br></pre></td></tr></table></figure>

<p>就是编译所有存在的ts文件了</p>
<p>和watch mode一起使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">tsc --watch</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">tsc -w</span><br></pre></td></tr></table></figure>

<h2 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    /* Visit https://aka.ms/tsconfig to <span class="built_in">read</span> more about this file */</span><br><span class="line"></span><br><span class="line">    /* Projects */</span><br><span class="line">    // <span class="string">&quot;incremental&quot;</span>: <span class="literal">true</span>,                              /* Save .tsbuildinfo files to allow <span class="keyword">for</span> incremental compilation of projects. */</span><br><span class="line">    // <span class="string">&quot;composite&quot;</span>: <span class="literal">true</span>,                                /* Enable constraints that allow a TypeScript project to be used with project references. */</span><br><span class="line">    // <span class="string">&quot;tsBuildInfoFile&quot;</span>: <span class="string">&quot;./.tsbuildinfo&quot;</span>,              /* Specify the path to .tsbuildinfo incremental compilation file. */</span><br><span class="line">    // <span class="string">&quot;disableSourceOfProjectReferenceRedirect&quot;</span>: <span class="literal">true</span>,  /* Disable preferring <span class="built_in">source</span> files instead of declaration files when referencing composite projects. */</span><br><span class="line">    // <span class="string">&quot;disableSolutionSearching&quot;</span>: <span class="literal">true</span>,                 /* Opt a project out of multi-project reference checking when editing. */</span><br><span class="line">    // <span class="string">&quot;disableReferencedProjectLoad&quot;</span>: <span class="literal">true</span>,             /* Reduce the number of projects loaded automatically by TypeScript. */</span><br><span class="line"></span><br><span class="line">    /* Language and Environment */</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es2016&quot;</span>,                                  /* Set the JavaScript language version <span class="keyword">for</span> emitted JavaScript and include compatible library declarations. */</span><br><span class="line">    // <span class="string">&quot;lib&quot;</span>: [],                                        /* Specify a <span class="built_in">set</span> of bundled library declaration files that describe the target runtime environment. */</span><br><span class="line">    // <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,                                /* Specify what JSX code is generated. */</span><br><span class="line">    // <span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>,                   /* Enable experimental support <span class="keyword">for</span> TC39 stage 2 draft decorators. */</span><br><span class="line">    // <span class="string">&quot;emitDecoratorMetadata&quot;</span>: <span class="literal">true</span>,                    /* Emit design-type metadata <span class="keyword">for</span> decorated declarations <span class="keyword">in</span> <span class="built_in">source</span> files. */</span><br><span class="line">    // <span class="string">&quot;jsxFactory&quot;</span>: <span class="string">&quot;&quot;</span>,                                 /* Specify the JSX factory <span class="keyword">function</span> used when targeting React JSX emit, e.g. <span class="string">&#x27;React.createElement&#x27;</span> or <span class="string">&#x27;h&#x27;</span>. */</span><br><span class="line">    // <span class="string">&quot;jsxFragmentFactory&quot;</span>: <span class="string">&quot;&quot;</span>,                         /* Specify the JSX Fragment reference used <span class="keyword">for</span> fragments when targeting React JSX emit e.g. <span class="string">&#x27;React.Fragment&#x27;</span> or <span class="string">&#x27;Fragment&#x27;</span>. */</span><br><span class="line">    // <span class="string">&quot;jsxImportSource&quot;</span>: <span class="string">&quot;&quot;</span>,                            /* Specify module specifier used to import the JSX factory <span class="built_in">functions</span> when using <span class="string">&#x27;jsx: react-jsx*&#x27;</span>. */</span><br><span class="line">    // <span class="string">&quot;reactNamespace&quot;</span>: <span class="string">&quot;&quot;</span>,                             /* Specify the object invoked <span class="keyword">for</span> <span class="string">&#x27;createElement&#x27;</span>. This only applies when targeting <span class="string">&#x27;react&#x27;</span> JSX emit. */</span><br><span class="line">    // <span class="string">&quot;noLib&quot;</span>: <span class="literal">true</span>,                                    /* Disable including any library files, including the default lib.d.ts. */</span><br><span class="line">    // <span class="string">&quot;useDefineForClassFields&quot;</span>: <span class="literal">true</span>,                  /* Emit ECMAScript-standard-compliant class fields. */</span><br><span class="line">    // <span class="string">&quot;moduleDetection&quot;</span>: <span class="string">&quot;auto&quot;</span>,                        /* Control what method is used to detect module-format JS files. */</span><br><span class="line"></span><br><span class="line">    /* Modules */</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,                                /* Specify what module code is generated. */</span><br><span class="line">    // <span class="string">&quot;rootDir&quot;</span>: <span class="string">&quot;./&quot;</span>,                                  /* Specify the root folder within your <span class="built_in">source</span> files. */</span><br><span class="line">    // <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,                       /* Specify how TypeScript looks up a file from a given module specifier. */</span><br><span class="line">    // <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,                                  /* Specify the base directory to resolve non-relative module names. */</span><br><span class="line">    // <span class="string">&quot;paths&quot;</span>: &#123;&#125;,                                      /* Specify a <span class="built_in">set</span> of entries that re-map imports to additional lookup locations. */</span><br><span class="line">    // <span class="string">&quot;rootDirs&quot;</span>: [],                                   /* Allow multiple folders to be treated as one when resolving modules. */</span><br><span class="line">    // <span class="string">&quot;typeRoots&quot;</span>: [],                                  /* Specify multiple folders that act like <span class="string">&#x27;./node_modules/@types&#x27;</span>. */</span><br><span class="line">    // <span class="string">&quot;types&quot;</span>: [],                                      /* Specify <span class="built_in">type</span> package names to be included without being referenced <span class="keyword">in</span> a <span class="built_in">source</span> file. */</span><br><span class="line">    // <span class="string">&quot;allowUmdGlobalAccess&quot;</span>: <span class="literal">true</span>,                     /* Allow accessing UMD globals from modules. */</span><br><span class="line">    // <span class="string">&quot;moduleSuffixes&quot;</span>: [],                             /* List of file name suffixes to search when resolving a module. */</span><br><span class="line">    // <span class="string">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,                        /* Enable importing .json files. */</span><br><span class="line">    // <span class="string">&quot;noResolve&quot;</span>: <span class="literal">true</span>,                                /* Disallow <span class="string">&#x27;import&#x27;</span>s, <span class="string">&#x27;require&#x27;</span>s or <span class="string">&#x27;&lt;reference&gt;&#x27;</span>s from expanding the number of files TypeScript should add to a project. */</span><br><span class="line"></span><br><span class="line">    /* JavaScript Support */</span><br><span class="line">    // <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,                                  /* Allow JavaScript files to be a part of your program. Use the <span class="string">&#x27;checkJS&#x27;</span> option to get errors from these files. */</span><br><span class="line">    // <span class="string">&quot;checkJs&quot;</span>: <span class="literal">true</span>,                                  /* Enable error reporting <span class="keyword">in</span> type-checked JavaScript files. */</span><br><span class="line">    // <span class="string">&quot;maxNodeModuleJsDepth&quot;</span>: 1,                        /* Specify the maximum folder depth used <span class="keyword">for</span> checking JavaScript files from <span class="string">&#x27;node_modules&#x27;</span>. Only applicable with <span class="string">&#x27;allowJs&#x27;</span>. */</span><br><span class="line"></span><br><span class="line">    /* Emit */</span><br><span class="line">    // <span class="string">&quot;declaration&quot;</span>: <span class="literal">true</span>,                              /* Generate .d.ts files from TypeScript and JavaScript files <span class="keyword">in</span> your project. */</span><br><span class="line">    // <span class="string">&quot;declarationMap&quot;</span>: <span class="literal">true</span>,                           /* Create sourcemaps <span class="keyword">for</span> d.ts files. */</span><br><span class="line">    // <span class="string">&quot;emitDeclarationOnly&quot;</span>: <span class="literal">true</span>,                      /* Only output d.ts files and not JavaScript files. */</span><br><span class="line">    // <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,                                /* Create <span class="built_in">source</span> map files <span class="keyword">for</span> emitted JavaScript files. */</span><br><span class="line">    // <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./&quot;</span>,                                  /* Specify a file that bundles all outputs into one JavaScript file. If <span class="string">&#x27;declaration&#x27;</span> is <span class="literal">true</span>, also designates a file that bundles all .d.ts output. */</span><br><span class="line">    // <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./&quot;</span>,                                   /* Specify an output folder <span class="keyword">for</span> all emitted files. */</span><br><span class="line">    // <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>,                           /* Disable emitting comments. */</span><br><span class="line">    // <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,                                   /* Disable emitting files from a compilation. */</span><br><span class="line">    // <span class="string">&quot;importHelpers&quot;</span>: <span class="literal">true</span>,                            /* Allow importing helper <span class="built_in">functions</span> from tslib once per project, instead of including them per-file. */</span><br><span class="line">    // <span class="string">&quot;importsNotUsedAsValues&quot;</span>: <span class="string">&quot;remove&quot;</span>,               /* Specify emit/checking behavior <span class="keyword">for</span> imports that are only used <span class="keyword">for</span> types. */</span><br><span class="line">    // <span class="string">&quot;downlevelIteration&quot;</span>: <span class="literal">true</span>,                       /* Emit more compliant, but verbose and less performant JavaScript <span class="keyword">for</span> iteration. */</span><br><span class="line">    // <span class="string">&quot;sourceRoot&quot;</span>: <span class="string">&quot;&quot;</span>,                                 /* Specify the root path <span class="keyword">for</span> debuggers to find the reference <span class="built_in">source</span> code. */</span><br><span class="line">    // <span class="string">&quot;mapRoot&quot;</span>: <span class="string">&quot;&quot;</span>,                                    /* Specify the location <span class="built_in">where</span> debugger should locate map files instead of generated locations. */</span><br><span class="line">    // <span class="string">&quot;inlineSourceMap&quot;</span>: <span class="literal">true</span>,                          /* Include sourcemap files inside the emitted JavaScript. */</span><br><span class="line">    // <span class="string">&quot;inlineSources&quot;</span>: <span class="literal">true</span>,                            /* Include <span class="built_in">source</span> code <span class="keyword">in</span> the sourcemaps inside the emitted JavaScript. */</span><br><span class="line">    // <span class="string">&quot;emitBOM&quot;</span>: <span class="literal">true</span>,                                  /* Emit a UTF-8 Byte Order Mark (BOM) <span class="keyword">in</span> the beginning of output files. */</span><br><span class="line">    // <span class="string">&quot;newLine&quot;</span>: <span class="string">&quot;crlf&quot;</span>,                                /* Set the newline character <span class="keyword">for</span> emitting files. */</span><br><span class="line">    // <span class="string">&quot;stripInternal&quot;</span>: <span class="literal">true</span>,                            /* Disable emitting declarations that have <span class="string">&#x27;@internal&#x27;</span> <span class="keyword">in</span> their JSDoc comments. */</span><br><span class="line">    // <span class="string">&quot;noEmitHelpers&quot;</span>: <span class="literal">true</span>,                            /* Disable generating custom helper <span class="built_in">functions</span> like <span class="string">&#x27;__extends&#x27;</span> <span class="keyword">in</span> compiled output. */</span><br><span class="line">    // <span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>,                            /* Disable emitting files <span class="keyword">if</span> any <span class="built_in">type</span> checking errors are reported. */</span><br><span class="line">    // <span class="string">&quot;preserveConstEnums&quot;</span>: <span class="literal">true</span>,                       /* Disable erasing <span class="string">&#x27;const enum&#x27;</span> declarations <span class="keyword">in</span> generated code. */</span><br><span class="line">    // <span class="string">&quot;declarationDir&quot;</span>: <span class="string">&quot;./&quot;</span>,                           /* Specify the output directory <span class="keyword">for</span> generated declaration files. */</span><br><span class="line">    // <span class="string">&quot;preserveValueImports&quot;</span>: <span class="literal">true</span>,                     /* Preserve unused imported values <span class="keyword">in</span> the JavaScript output that would otherwise be removed. */</span><br><span class="line"></span><br><span class="line">    /* Interop Constraints */</span><br><span class="line">    // <span class="string">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,                          /* Ensure that each file can be safely transpiled without relying on other imports. */</span><br><span class="line">    // <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,             /* Allow <span class="string">&#x27;import x from y&#x27;</span> when a module doesn<span class="string">&#x27;t have a default export. */</span></span><br><span class="line"><span class="string">    &quot;esModuleInterop&quot;: true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables &#x27;</span>allowSyntheticDefaultImports<span class="string">&#x27; for type compatibility. */</span></span><br><span class="line"><span class="string">    // &quot;preserveSymlinks&quot;: true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */</span></span><br><span class="line"><span class="string">    &quot;forceConsistentCasingInFileNames&quot;: true,            /* Ensure that casing is correct in imports. */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Type Checking */</span></span><br><span class="line"><span class="string">    &quot;strict&quot;: true,                                      /* Enable all strict type-checking options. */</span></span><br><span class="line"><span class="string">    // &quot;noImplicitAny&quot;: true,                            /* Enable error reporting for expressions and declarations with an implied &#x27;</span>any<span class="string">&#x27; type. */</span></span><br><span class="line"><span class="string">    // &quot;strictNullChecks&quot;: true,                         /* When type checking, take into account &#x27;</span>null<span class="string">&#x27; and &#x27;</span>undefined<span class="string">&#x27;. */</span></span><br><span class="line"><span class="string">    // &quot;strictFunctionTypes&quot;: true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */</span></span><br><span class="line"><span class="string">    // &quot;strictBindCallApply&quot;: true,                      /* Check that the arguments for &#x27;</span><span class="built_in">bind</span><span class="string">&#x27;, &#x27;</span>call<span class="string">&#x27;, and &#x27;</span>apply<span class="string">&#x27; methods match the original function. */</span></span><br><span class="line"><span class="string">    // &quot;strictPropertyInitialization&quot;: true,             /* Check for class properties that are declared but not set in the constructor. */</span></span><br><span class="line"><span class="string">    // &quot;noImplicitThis&quot;: true,                           /* Enable error reporting when &#x27;</span>this<span class="string">&#x27; is given the type &#x27;</span>any<span class="string">&#x27;. */</span></span><br><span class="line"><span class="string">    // &quot;useUnknownInCatchVariables&quot;: true,               /* Default catch clause variables as &#x27;</span>unknown<span class="string">&#x27; instead of &#x27;</span>any<span class="string">&#x27;. */</span></span><br><span class="line"><span class="string">    // &quot;alwaysStrict&quot;: true,                             /* Ensure &#x27;</span>use strict<span class="string">&#x27; is always emitted. */</span></span><br><span class="line"><span class="string">    // &quot;noUnusedLocals&quot;: true,                           /* Enable error reporting when local variables aren&#x27;</span>t <span class="built_in">read</span>. */</span><br><span class="line">    // <span class="string">&quot;noUnusedParameters&quot;</span>: <span class="literal">true</span>,                       /* Raise an error when a <span class="keyword">function</span> parameter isn<span class="string">&#x27;t read. */</span></span><br><span class="line"><span class="string">    // &quot;exactOptionalPropertyTypes&quot;: true,               /* Interpret optional property types as written, rather than adding &#x27;</span>undefined<span class="string">&#x27;. */</span></span><br><span class="line"><span class="string">    // &quot;noImplicitReturns&quot;: true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */</span></span><br><span class="line"><span class="string">    // &quot;noFallthroughCasesInSwitch&quot;: true,               /* Enable error reporting for fallthrough cases in switch statements. */</span></span><br><span class="line"><span class="string">    // &quot;noUncheckedIndexedAccess&quot;: true,                 /* Add &#x27;</span>undefined<span class="string">&#x27; to a type when accessed using an index. */</span></span><br><span class="line"><span class="string">    // &quot;noImplicitOverride&quot;: true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */</span></span><br><span class="line"><span class="string">    // &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* Enforces using indexed accessors for keys declared using an indexed type. */</span></span><br><span class="line"><span class="string">    // &quot;allowUnusedLabels&quot;: true,                        /* Disable error reporting for unused labels. */</span></span><br><span class="line"><span class="string">    // &quot;allowUnreachableCode&quot;: true,                     /* Disable error reporting for unreachable code. */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* Completeness */</span></span><br><span class="line"><span class="string">    // &quot;skipDefaultLibCheck&quot;: true,                      /* Skip type checking .d.ts files that are included with TypeScript. */</span></span><br><span class="line"><span class="string">    &quot;skipLibCheck&quot;: true                                 /* Skip type checking all .d.ts files. */</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h3 id="exclude配置项"><a href="#exclude配置项" class="headerlink" title="exclude配置项"></a>exclude配置项</h3><p>排除哪些文件</p>
<p>要用双引号包裹，不能用单引号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    /* Visit https://aka.ms/tsconfig to <span class="built_in">read</span> more about this file */</span><br><span class="line"></span><br><span class="line">    ..........</span><br><span class="line"></span><br><span class="line">    /* Completeness */</span><br><span class="line">    // <span class="string">&quot;skipDefaultLibCheck&quot;</span>: <span class="literal">true</span>,                      /* Skip <span class="built_in">type</span> checking .d.ts files that are included with TypeScript. */</span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>                                 /* Skip <span class="built_in">type</span> checking all .d.ts files. */</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //这里添加exclude配置项 </span><br><span class="line">  “exclude”:[</span><br><span class="line">  	“analytics.ts” </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还可以用通配符</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;*.dev.ts&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;**/*.dev.ts&quot;</span></span><br></pre></td></tr></table></figure>

<p>代表所有符合这种格式的都排除</p>
<p>exclude默认排除”node_modules“ 配置项里面就不用写了</p>
<h3 id="include配置"><a href="#include配置" class="headerlink" title="include配置"></a>include配置</h3><p>如果设置了include类型，则在include以外的所有东西ts都不会进行操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;include&quot;</span>:[</span><br><span class="line">	<span class="string">&quot;app.ts&quot;</span>  </span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h3 id="files配置"><a href="#files配置" class="headerlink" title="files配置"></a>files配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;files&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;core.ts&quot;</span>,</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>



<p><code>&quot;files&quot;</code>指定一个<strong>包含相对或绝对文件路径的列表</strong>。 <code>&quot;include&quot;</code>和<code>&quot;exclude&quot;</code>属性指定一个文件glob匹配模式列表。 支持的glob通配符有：</p>
<ul>
<li><code>*</code> 匹配0或多个字符（不包括目录分隔符）</li>
<li><code>?</code> 匹配一个任意字符（不包括目录分隔符）</li>
<li><code>**/</code> 递归匹配任意子目录</li>
</ul>
<p>如果<code>&quot;files&quot;</code>和<code>&quot;include&quot;</code>都没有被指定，编译器默认包含当前目录和子目录下所有的TypeScript文件（<code>.ts</code>, <code>.d.ts</code> 和 <code>.tsx</code>），排除在<code>&quot;exclude&quot;</code>里指定的文件。JS文件（<code>.js</code>和<code>.jsx</code>）也被包含进来如果<code>allowJs</code>被设置成<code>true</code>。 如果指定了 <code>&quot;files&quot;</code>或<code>&quot;include&quot;</code>，编译器会将它们结合一并包含进来。 使用 <code>&quot;outDir&quot;</code>指定的目录下的文件永远会被编译器排除，除非你明确地使用<code>&quot;files&quot;</code>将其包含进来（这时就算用<code>exclude</code>指定也没用）。</p>
<p><strong>target</strong></p>
<p>编译完成后的目标js版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;target&quot;</span>: <span class="string">&quot;es2016&quot;</span>,                                 </span><br></pre></td></tr></table></figure>



<p><strong>lib</strong></p>
<p>如果不设置lib,则默认适配target指定的那个东西需要的库</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;lib&quot;</span>: [], </span><br></pre></td></tr></table></figure>

<p>lib的作用在于写代码的时候，document,map之类的是可以全局使用的，这个就是因为引入了对应的lib库</p>
<p><strong>allowJs</strong> <strong>checkJs</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// &quot;allowJs&quot;: true,                                  /* Allow JavaScript files to be a part of your program. Use the &#x27;checkJS&#x27; option to get errors from these files. */</span><br><span class="line">// &quot;checkJs&quot;: true,                                  /* Enable error reporting in type-checked JavaScript files. */</span><br></pre></td></tr></table></figure>

<p>ts编译器也会对js执行监视，代码检查等等</p>
<p><strong>sourceMap</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>, </span><br></pre></td></tr></table></figure>

<p>会生成xxx.js.map  chrome 代码检查工具看source这时候就可以识别到ts文件了</p>
<p>这时候甚至可以在代码检查工具里面设置断点</p>
<p><strong>outDir rootDir</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./&quot;</span>,  需要管理的ts文件在哪个位置</span><br><span class="line"><span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./&quot;</span>,   ts导出的js文件在哪个位置</span><br></pre></td></tr></table></figure>



<p><strong>removeComments</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>, </span><br></pre></td></tr></table></figure>

<p>如果ts有注释，js文件会把标的注释去掉</p>
<p><strong>noEmit</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>

<p>不生成js文件，ts只进行检查的工作</p>
<p><strong>downlevelIteration</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;downlevelIteration&quot;</span>: <span class="literal">true</span>, </span><br></pre></td></tr></table></figure>

<p>如果编译的js版本比较低，而且有4,5个循环的时候，打开这个可以提供更好的支持</p>
<p><strong>noEmitOnError</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure>

<p>即使ts文件有错误仍然可以生成js文件，配置项默认就是false</p>
<p><strong>strict</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>, </span><br></pre></td></tr></table></figure>

<p>严格模式，进行所有的类型检查</p>
<p><strong>noImplicitAny</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>

<p>没有隐含的any属性</p>
<p><strong>strictNullChecks</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;strictNullChecks&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>

<p>是否为非空的检查</p>
<p><strong>noImplicitReturns</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;noImplicitReturns&quot;</span>: <span class="literal">true</span>, </span><br></pre></td></tr></table></figure>

<p>不允许默认的return,这时候每个函数就算不返回值，也要写一个return</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addd</span>(<span class="params">n1:<span class="built_in">number</span>,n2:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n1+n2)&#123;</span><br><span class="line">        <span class="keyword">return</span> n1+n2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>strictBindCallApply</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;strictBindCallApply&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>

<p>检测有没有绑定到对应物体身上，默认是true，不能绑定null</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(button)&#123;</span><br><span class="line">    button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="title function_">clickHandler</span>(<span class="string">&#x27;123&#x27;</span>).<span class="title function_">bind</span>(<span class="literal">null</span>)); <span class="comment">//如果绑在了null上面就错了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>bind</strong></p>
<p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，</p>
<p>这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，</p>
<p>而其余参数将作为新函数的参数，供调用时使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">42</span>,</span><br><span class="line">  <span class="attr">getX</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unboundGetX = <span class="variable language_">module</span>.<span class="property">getX</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unboundGetX</span>()); <span class="comment">// The function gets invoked at the global scope</span></span><br><span class="line"><span class="comment">// expected output: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boundGetX = unboundGetX.<span class="title function_">bind</span>(<span class="variable language_">module</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">boundGetX</span>());</span><br><span class="line"><span class="comment">// expected output: 42</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<p>返回一个原函数的拷贝，并拥有指定的 <strong><code>this</code></strong> 值和初始参数。</p>
<p><strong>用法</strong></p>
<p><strong>创建绑定函数</strong></p>
<p>最简单的用法是创建一个函数，不论怎么调用，这个函数都有<strong>同样</strong>的 <strong><code>this</code></strong> 值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">JavaScript 新手经常犯的一个错误是将一个方法从对象中拿出来，然后再调用，期望方法中的 this 是原来的对象（比如在回调中传入这个方法）。如果不做特殊处理的话，一般会丢失原来的对象。基于这个函数，用原始的对象创建一个绑定函数，巧妙地解决了这个问题</span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">9</span>;    <span class="comment">// 在浏览器中，this 指向全局的 &quot;window&quot; 对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">81</span>,</span><br><span class="line">  <span class="attr">getX</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">getX</span>(); <span class="comment">// 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="variable language_">module</span>.<span class="property">getX</span>;</span><br><span class="line"><span class="title function_">retrieveX</span>();</span><br><span class="line"><span class="comment">// 返回 9 - 因为函数是在全局作用域中调用的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新函数，把 &#x27;this&#x27; 绑定到 module 对象</span></span><br><span class="line"><span class="comment">// 新手可能会将全局变量 x 与 module 的属性 x 混淆</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.<span class="title function_">bind</span>(<span class="variable language_">module</span>);</span><br><span class="line"><span class="title function_">boundGetX</span>(); <span class="comment">// 81</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>偏函数</strong></p>
<p><code>bind()</code> 的另一个最简单的用法是使一个函数拥有预设的初始参数。只要将这些参数（如果有的话）作为 <code>bind()</code> 的参数写在 <code>this</code> 后面。当绑定函数被调用时，这些参数会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数会跟在它们后面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">list</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addArguments</span>(<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list1 = <span class="title function_">list</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = <span class="title function_">addArguments</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个函数，它拥有预设参数列表。</span></span><br><span class="line"><span class="keyword">var</span> leadingThirtysevenList = list.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">37</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个函数，它拥有预设的第一个参数</span></span><br><span class="line"><span class="keyword">var</span> addThirtySeven = addArguments.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">37</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list2 = <span class="title function_">leadingThirtysevenList</span>();</span><br><span class="line"><span class="comment">// [37]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list3 = <span class="title function_">leadingThirtysevenList</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// [37, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result2 = <span class="title function_">addThirtySeven</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 37 + 5 = 42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result3 = <span class="title function_">addThirtySeven</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 37 + 5 = 42 ，第二个参数被忽略</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>配合setTimeout</strong></p>
<p>在默认情况下，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout"><code>window.setTimeout()</code></a> 时，<code>this</code> 关键字会指向 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window"><code>window</code></a>（或 <code>global</code>）对象。当类的方法中需要 <code>this</code> 指向类的实例时，你可能需要显式地把 <code>this</code> 绑定到回调函数，就不会丢失该实例的引用。</p>
</blockquote>
<h1 id="Anvance-JavaScript"><a href="#Anvance-JavaScript" class="headerlink" title="Anvance JavaScript"></a>Anvance JavaScript</h1><h2 id="设置默认的函数值"><a href="#设置默认的函数值" class="headerlink" title="设置默认的函数值"></a>设置默认的函数值</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">xxx</span>:<span class="function">(<span class="params">a:<span class="built_in">number</span>|<span class="built_in">number</span>,b:<span class="built_in">number</span>=<span class="number">1</span></span>)=&gt;</span><span class="built_in">void</span></span><br></pre></td></tr></table></figure>

<p>这样如果调用的时候不输入b默认的值就是1，但是有默认值的函数只能是在后面的，因为如果写在前面，函数处理的时候不知道输入的值是不是用传入的值还是默认的值</p>
<h2 id="对象-x3D-对象-vs-对象-x3D-…对象"><a href="#对象-x3D-对象-vs-对象-x3D-…对象" class="headerlink" title="对象&#x3D;对象 vs 对象&#x3D;{…对象}"></a>对象&#x3D;对象 vs 对象&#x3D;{…对象}</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Max&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> copiedPerson=person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copiedPerson=&#123;...person&#125;</span><br></pre></td></tr></table></figure>

<p>上面第一个的做法是copiedPerson的指针指向了person,如果对copiedPerson进行操作也是对person进行的操作</p>
<p>第二个的做法是把person的键值拆开来给copiedPerson,是完全创建一个新的</p>
<h2 id="Rest-Parameters"><a href="#Rest-Parameters" class="headerlink" title="Rest Parameters"></a>Rest Parameters</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add=(...<span class="attr">number</span>:<span class="built_in">number</span>[])&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">number</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">curResult,curValue</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curResult+curValue;</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当不确定输入的个数有多少个的时候,用…number代表传入的数据的个数</p>
<p>数组.reduce 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">number.<span class="title function_">reduce</span>(<span class="function">(<span class="params">curResult,curValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> curResult+curValue;</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>表示从0开始计数，curResult是每次持续的值，curValue相当于是遍历的每一个值</p>
<p>如果指定只能要3个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const add=(...number:number[number,number,number])&#123;</span><br><span class="line">    return number.reduce((curResult,curValue)=&gt;&#123;</span><br><span class="line">        return curResult+curValue;</span><br><span class="line">    &#125;,0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Array-amp-Object-Destructuring"><a href="#Array-amp-Object-Destructuring" class="headerlink" title="Array &amp; Object Destructuring"></a>Array &amp; Object Destructuring</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hobbies=[<span class="string">&#x27;eat&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>,<span class="string">&#x27;eateat&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [hobby1,hobby2,...remainingHobbies]=hobbies;</span><br><span class="line"><span class="comment">//hobby1代表hobbies的第一个元素，hobby2代表hobbies的第二个元素，...remainingHobbies是一个数组，代表剩下的所有的元素</span></span><br><span class="line"><span class="comment">//这个操作是不会对原来的数组产生影响的</span></span><br><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&#x27;sun&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;firstName,age&#125;=person</span><br><span class="line"><span class="comment">//firstName,age必须和person中的变量一致，因为对象里面不是一个有序数组，如果想要起别名，可以</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">firstName</span>:myName,age&#125;=person</span><br><span class="line">这样，person中的firstName,就等于变量myName了</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName);   <span class="comment">//sun</span></span><br></pre></td></tr></table></figure>



<p>上面这些都是es6本身就有的，和ts没关系，但是，如果在ts的配置文件里面把target改成es5,ts生成的js就会用另外的语法来完成上面的东西</p>
<h1 id="Class-amp-Interfaces"><a href="#Class-amp-Interfaces" class="headerlink" title="Class &amp; Interfaces"></a>Class &amp; Interfaces</h1><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;   <span class="comment">//规定类型</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">n:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xxx=<span class="keyword">new</span> <span class="title class_">Deaparment</span>(<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>constructor 是构造方法，当创建这个类的时候调用</p>
<p>顺便看一下在ts翻译成js成es5版本的情况</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Department</span>=(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Deaprtment</span>(<span class="params">n</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Deaprtment</span>;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>立即执行函数</p>
<p>通常有两种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">   ...</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>

<p>表示执行到这里的时候立刻调用这个函数</p>
</blockquote>
<p>对上面的例子添加一个函数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;   <span class="comment">//规定类型</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">n:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=n;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">describe</span>(<span class="params"><span class="variable language_">this</span>:Department</span>)&#123;  <span class="comment">//这个this是对调用describe的对象做出的限定，那个对象里面必须包含department类用到了的东西（这里是this.name）</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Department&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);   <span class="comment">//需要有this否则指全局的name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～</span><br><span class="line"><span class="keyword">const</span> accoutingCopy=&#123;<span class="attr">describe</span>:accounting.<span class="property">describe</span>&#125; </span><br><span class="line">accountingCopy.<span class="title function_">describe</span>();  <span class="comment">//错误，因为调用describe的不是department对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～</span><br><span class="line"><span class="keyword">const</span> accoutingCopy=&#123;<span class="attr">name</span>:<span class="string">&#x27;一个部门&#x27;</span>,<span class="attr">describe</span>:accounting.<span class="property">describe</span>&#125; </span><br><span class="line">accountingCopy.<span class="title function_">describe</span>(); <span class="comment">//这时候可以进行调用，因为这时候this指的是Department了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在需要public的对象上面可以加上public 修饰符</p>
<p>关于类的构造的更简单的声明方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>&#123;</span><br><span class="line">    <span class="comment">//private id:string;</span></span><br><span class="line">    <span class="comment">//private name:string;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">employees</span>:<span class="built_in">string</span>[]=[];</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> id:<span class="built_in">string</span>,<span class="keyword">public</span> name:<span class="built_in">string</span></span>)&#123;  <span class="comment">//这里一句顶地上这里注释掉的这四句话</span></span><br><span class="line">        <span class="comment">//this.id=id;</span></span><br><span class="line">        <span class="comment">//this.name=name;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>readonly 赋值之后就不能更改了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">xxx</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> isReadonly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Inheritance-继承"><a href="#Inheritance-继承" class="headerlink" title="Inheritance (继承)"></a>Inheritance (继承)</h2><blockquote>
<p>interface  界面(尤指屏幕布局和菜单);接口;接口程序;</p>
<p>Inheritance 继承物，遗产</p>
</blockquote>
<p>这个是继承不是接口啊，只是英语和接口的声明语句太像了</p>
<p>继承会从父类上面继承到所有的东西</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ITDepartment</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Department</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="对继承的对象扩展"><a href="#对继承的对象扩展" class="headerlink" title="对继承的对象扩展"></a>对继承的对象扩展</h3><p>在使用this之前一定要先使用super</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IDDepartment</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Department</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">admins</span>:<span class="built_in">string</span>[]</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">id:<span class="built_in">string</span>,admins:<span class="built_in">string</span>[]</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(id,<span class="string">&#x27;IT&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">admins</span>=admins;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单写法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IDDepartment</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Department</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">id:<span class="built_in">string</span>,<span class="keyword">public</span> admins:<span class="built_in">string</span>[]</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(id,<span class="string">&#x27;IT&#x27;</span>);<span class="comment">//这个相当于用父类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> accounting=<span class="keyword">new</span> <span class="title class_">ITDepartment</span>(<span class="string">&#x27;d1&#x27;</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]);</span><br></pre></td></tr></table></figure>



<h2 id="Getters-amp-Setters"><a href="#Getters-amp-Setters" class="headerlink" title="Getters &amp; Setters"></a>Getters &amp; Setters</h2><p>getter setter are property where you execute a function or a method when you retrieve（检索） a value</p>
<p>getters 是在读取的时候进行调用</p>
<p>定义的时候get要写成一个方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">mygetter</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">xxx</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> xxx</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;xxxx&#x27;</span>)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为这本质是一个属性，使用的时候就像是读属性一样用就行了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">xxx.<span class="property">mygetter</span>;</span><br></pre></td></tr></table></figure>



<p>setters 是在改变的时候调用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="title function_">mysetter</span>(<span class="params">input:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!input)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Please pass in a valid value&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">addReport</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用时候</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">xxx.<span class="property">mysetter</span>=xxxx</span><br></pre></td></tr></table></figure>



<h2 id="Static-properties-and-methods"><a href="#Static-properties-and-methods" class="headerlink" title="Static properties and methods"></a>Static properties and methods</h2><p>静态属性，静态方法</p>
<p>如果想要不通过实例化对象，就可以使用对象里面定义的方法或者属性，这时候就可以用静态属性&#x2F;方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">static</span> fiscalYear=<span class="number">2020</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">createEmployee</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果想要访问静态属性&#x2F;方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Department</span>.<span class="title function_">createEmployee</span>(<span class="string">&#x27;IT部门&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Department</span>.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>



<p>在有静态属性的类里面访问这个静态属性，和在外面用的访问方法一样 类名.属性名</p>
<p>不能用this.xxx来访问</p>
<h2 id="Override-and-Abstract"><a href="#Override-and-Abstract" class="headerlink" title="Override and Abstract"></a>Override and Abstract</h2><p>重写和抽象类</p>
<p>想要重写直接在被继承的类里面写上一个同名的方法即可</p>
<p>但是如果父类里面需要所有的子类都要重新实现一个方法，就要用到abstract方法了</p>
<ul>
<li>方法前加上abstract声明,方法只保留方法声明，去掉方法实现</li>
<li>在类前面加上abstract声明——这样这个类就不能自己实例化了</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="title function_">describe</span>(<span class="attr">this</span>:<span class="title class_">Department</span>):<span class="built_in">void</span></span><br></pre></td></tr></table></figure>



<h2 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h2><p>单例设计模式</p>
<p>现在类里面声明一个</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Department</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">lastReport</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>:<span class="title class_">AccountingDepartment</span>;<span class="comment">// 一个私有的单例，存的就是这个对象本身</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params">id:<span class="built_in">string</span>,<span class="keyword">private</span> reports:<span class="built_in">string</span>[]</span>)&#123;  <span class="comment">//private reports:string[] 是简写形式，相当于在这个类里面定义一个reports，传入的值就是reports</span></span><br><span class="line">        <span class="variable language_">super</span>(id,<span class="string">&#x27;Accounting&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lastReport</span>=reports[<span class="number">0</span>];  </span><br><span class="line">    &#125; <span class="comment">//构造方法变成私有的作用是为了在外面不能通过new xxx来创建一个新的实例</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">instance</span>)&#123;  <span class="comment">//虽然是使用static的东西，需要类.属性，但是在同一个类的static方法里面，可以直接使用this进行访问</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span>=<span class="keyword">new</span> <span class="title class_">AccountingDepartment</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想要使用这个单例就</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">AccountingDepartment</span>.<span class="title function_">getInstance</span>();</span><br></pre></td></tr></table></figure>

<p>所有得到的都是同一个AccountingDepartment单例</p>
<h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><h3 id="接口初探"><a href="#接口初探" class="headerlink" title="接口初探"></a>接口初探</h3><p>下面通过一个简单示例来观察接口是如何工作的：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(labelledObj.<span class="property">label</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&quot;Size 10 Object&quot;</span> &#125;;</span><br><span class="line"><span class="title function_">printLabel</span>(myObj);</span><br></pre></td></tr></table></figure>

<p>类型检查器会查看<code>printLabel</code>的调用。 <code>printLabel</code>有一个参数，并要求这个对象参数有一个名为<code>label</code>类型为<code>string</code>的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。 然而，有些时候TypeScript却并不会这么宽松，我们下面会稍做讲解。</p>
<p>下面我们重写上面的例子，这次使用接口来描述：必须包含一个<code>label</code>属性且类型为<code>string</code>：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">LabelledValue</span> &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(labelledObj.<span class="property">label</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123;<span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&quot;Size 10 Object&quot;</span>&#125;;</span><br><span class="line"><span class="title function_">printLabel</span>(myObj);</span><br></pre></td></tr></table></figure>

<p><code>LabelledValue</code>接口就好比一个名字，用来描述上面例子里的要求。 它代表了有一个 <code>label</code>属性且类型为<code>string</code>的对象。 需要注意的是，我们在这里并不能像在其它语言里一样，说传给 <code>printLabel</code>的对象实现了这个接口。我们只会去关注值的外形。 只要传入的对象满足上面提到的必要条件，那么它就是被允许的。</p>
<h3 id="规定"><a href="#规定" class="headerlink" title="规定"></a>规定</h3><p>接口的首字母一般大写，不是必须，但是是约定写法</p>
<p>接口可以让我们提前定义好一个类的类型和规范是什么样子，还可以给其他类继承，使多个类都能继承自同一个接口，使用同一个规范</p>
<p>定义一个接口，并按照这个接口实例化一个对象</p>
<p>如果用这种写法的话，user1不能再添加其他的方法或者属性了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;    <span class="comment">//对于目前的实现来说  变成 type Person=&#123;......&#125; 是没有区别的</span></span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>=<span class="string">&#x27;max&#x27;</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">greet</span>(<span class="attr">phrase</span>:<span class="built_in">string</span>):<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user1</span>:<span class="title class_">Person</span>;</span><br><span class="line"></span><br><span class="line">user1=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Max&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">30</span>,</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params">phrase:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(phrase+<span class="string">&#x27; &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>interface 和 type的区别</p>
<table>
<thead>
<tr>
<th>interface</th>
<th>type</th>
</tr>
</thead>
<tbody><tr>
<td>只能对类进行格式上的限制</td>
<td>不止对类做限制</td>
</tr>
<tr>
<td>一个对象可以继承多个接口，但是只能继承一个类</td>
<td></td>
</tr>
</tbody></table>
<p>和类的区别是只有接口只有声明，没有实现，而且对象可以继承多个接口</p>
<p>继承自接口</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Greetable</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继承了接口的对象还可以添加更多的方法或者属性</p>
<p>例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> xx&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xxx</span> <span class="keyword">implements</span> xx&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user1</span>:xx    <span class="comment">//这种是可以的，因为xxx本身就是实现了接口的对象</span></span><br><span class="line">user1=<span class="keyword">new</span> <span class="title function_">xxx</span>();</span><br></pre></td></tr></table></figure>



<p><strong>readonly:</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> xx&#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">name</span>:<span class="built_in">string</span>;    <span class="comment">//接口里面对变量的设置只能是readonly,不能public,private之类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xxx</span> <span class="keyword">implements</span> xx&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;   <span class="comment">//虽然没写readonly，但是因为实现了接口，所以也默认是readonly了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>接口可以继承接口，类也可以多重继承接口</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> test1&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> test2 <span class="keyword">extends</span> test1,test3&#123;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="attr">phrase</span>:<span class="built_in">string</span>):<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> iimplements test2&#123;  <span class="comment">//就要把test2定义的所有要求，以及test2继承的两个接口都实现</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>接口也可以组成一个type</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> test1&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> test2 <span class="keyword">extends</span> test1,test3&#123;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="attr">phrase</span>:<span class="built_in">string</span>):<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span>=test1|test2</span><br></pre></td></tr></table></figure>





<p>接口也能和type类型一样规定一个函数的样式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//type AddFn=(a:number,b:number)=&gt;number;</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AddFn</span>&#123;   <span class="comment">//接口里面直接写函数的配置，但是不像函数一样由 =&gt; 而是 :</span></span><br><span class="line">    (<span class="attr">a</span>:<span class="built_in">number</span>,<span class="attr">b</span>:<span class="built_in">number</span>):<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">add</span>:<span class="title class_">AddFn</span>;</span><br><span class="line">add=<span class="function">(<span class="params">n1:<span class="built_in">number</span>,n2:<span class="built_in">number</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1+n2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>optional properties</strong></p>
<p>如果想要一个属性可以存在也可以不存在,在这个变量的后面加一个？即可 </p>
<p>所有声明变量的地方都可以，不只是接口</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> xxx&#123;</span><br><span class="line">    xx?:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xxxx</span> <span class="keyword">implements</span> xxx&#123;</span><br><span class="line">    xxxxxx?:<span class="built_in">string</span>;</span><br><span class="line">    greet?():<span class="built_in">void</span>;  <span class="comment">//可选的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>ts 转换的时候怎么处理接口：</p>
<p>接口不会体现到js里面，接口只是ts用来规范代码用的</p>
<h2 id="Advanced-Types-amp-TypeScript-Features"><a href="#Advanced-Types-amp-TypeScript-Features" class="headerlink" title="Advanced Types &amp; TypeScript Features"></a>Advanced Types &amp; TypeScript Features</h2><h3 id="Intersection-Types"><a href="#Intersection-Types" class="headerlink" title="Intersection Types"></a>Intersection Types</h3><p>组合类型 allows us to combine other types</p>
<p>相同的功能也可以通过接口来实现</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Admin</span>=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">privileges</span>:<span class="built_in">string</span>[];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Employee</span>=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">startDate</span>:<span class="title class_">Date</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElevatedEmployee</span>=<span class="title class_">Admin</span>&amp;<span class="title class_">Employee</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">e1</span>:<span class="title class_">ElevatedEmployee</span>=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Max&#x27;</span>,</span><br><span class="line">    <span class="attr">privileges</span>:[<span class="string">&#x27;create-server&#x27;</span>],</span><br><span class="line">    <span class="attr">startDate</span>:<span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>如果组合类型被用来组合联合类型，则组合类型是联合类型的交集</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> e1=<span class="built_in">string</span> | int;</span><br><span class="line"><span class="keyword">type</span> e2=<span class="built_in">string</span> | <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> e3=e1&amp;e2;  <span class="comment">//这时候e3的类型是string</span></span><br></pre></td></tr></table></figure>



<h2 id="Type-Guards"><a href="#Type-Guards" class="headerlink" title="Type Guards"></a>Type Guards</h2><p>type guards is just a term（描述） that describes the idea or approach  checking if a certain property or method exists before you try to use it</p>
<p>判断一个变量是不是常规的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> b === <span class="string">&#x27;string&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>判断属性在没在类里面</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;privileges&#x27;</span> <span class="keyword">in</span> emp)</span><br></pre></td></tr></table></figure>

<p>判断这个类是什么类</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> <span class="title class_">Truck</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为什么不用 <code>typeof vehicle ===&#39;Truck&#39;</code>，因为这个是放到js里面判断的，js不认识Truck这个自己定义的类</p>
<p>instanceof 是js里面的方法，Truck ts认识，顺着Truck构造方法变成js认识的东西</p>
</blockquote>
<p>看这三种的具体用法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Admin</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">privileges</span>: <span class="built_in">string</span>[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Employee</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">startDate</span>: <span class="title class_">Date</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface ElevatedEmployee extends Employee, Admin &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElevatedEmployee</span> = <span class="title class_">Admin</span> &amp; <span class="title class_">Employee</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">e1</span>: <span class="title class_">ElevatedEmployee</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Max&#x27;</span>,</span><br><span class="line">  <span class="attr">privileges</span>: [<span class="string">&#x27;create-server&#x27;</span>],</span><br><span class="line">  <span class="attr">startDate</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Combinable</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Numeric</span> = <span class="built_in">number</span> | <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Universal</span> = <span class="title class_">Combinable</span> &amp; <span class="title class_">Numeric</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: Combinable, b: Combinable</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> b === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="title function_">toString</span>() + b.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UnknownEmployee</span> = <span class="title class_">Employee</span> | <span class="title class_">Admin</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printEmployeeInformation</span>(<span class="params">emp: UnknownEmployee</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Name: &#x27;</span> + emp.<span class="property">name</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;privileges&#x27;</span> <span class="keyword">in</span> emp) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Privileges: &#x27;</span> + emp.<span class="property">privileges</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;startDate&#x27;</span> <span class="keyword">in</span> emp) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start Date: &#x27;</span> + emp.<span class="property">startDate</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printEmployeeInformation</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Manu&#x27;</span>, <span class="attr">startDate</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Driving...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Truck</span> &#123;</span><br><span class="line">  <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Driving a truck...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">loadCargo</span>(<span class="params">amount: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Loading cargo ...&#x27;</span> + amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Vehicle</span> = <span class="title class_">Car</span> | <span class="title class_">Truck</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v1 = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="keyword">const</span> v2 = <span class="keyword">new</span> <span class="title class_">Truck</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useVehicle</span>(<span class="params">vehicle: Vehicle</span>) &#123;</span><br><span class="line">  vehicle.<span class="title function_">drive</span>();</span><br><span class="line">  <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> <span class="title class_">Truck</span>) &#123;</span><br><span class="line">    vehicle.<span class="title function_">loadCargo</span>(<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useVehicle</span>(v1);</span><br><span class="line"><span class="title function_">useVehicle</span>(v2);</span><br></pre></td></tr></table></figure>



<h2 id="Discriminated-Union"><a href="#Discriminated-Union" class="headerlink" title="Discriminated Union"></a>Discriminated Union</h2><blockquote>
<p>Discriminated 受歧视的，可辨别的， Discriminated Union 可辨识联合类型</p>
</blockquote>
<p>something that helps you with type guards</p>
<p>它的出现代表了三个：可辨识，联合类型，类型守卫</p>
<p>给需要辨别的类型不同的属性，自己起名字，一般是type</p>
<p>使用类型守卫思想的时候，可以通过type来判断这个属于哪一个类，然后分别进行对应的操作，通过switch(xxx) case ‘ xx’: xx break;</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Bird</span> &#123;  </span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;bird&#x27;</span>;</span><br><span class="line">  <span class="attr">flyingSpeed</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Horse</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;horse&#x27;</span>;</span><br><span class="line">  <span class="attr">runningSpeed</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = <span class="title class_">Bird</span> | <span class="title class_">Horse</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveAnimal</span>(<span class="params">animal: Animal</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> speed;</span><br><span class="line">  <span class="keyword">switch</span> (animal.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;bird&#x27;</span>:</span><br><span class="line">      speed = animal.<span class="property">flyingSpeed</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;horse&#x27;</span>:</span><br><span class="line">      speed = animal.<span class="property">runningSpeed</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving at speed: &#x27;</span> + speed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">moveAnimal</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;bird&#x27;</span>, <span class="attr">flyingSpeed</span>: <span class="number">10</span>&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="Type-Casting"><a href="#Type-Casting" class="headerlink" title="Type Casting"></a>Type Casting</h2><blockquote>
<p>cast 铸造  type casting 类型转换，强制类型转换</p>
</blockquote>
<p>ts有时候识别不出来变量的具体类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userInputElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;user-input&#x27;</span>);</span><br><span class="line">userInputElement.<span class="property">value</span>   <span class="comment">//fault</span></span><br></pre></td></tr></table></figure>

<p>上面的例子，userInputElement可能是HTMLElement,但不一定有value,这时候要告诉ts这个元素是什么类型，保证有value元素</p>
<p>两种方法：</p>
<ul>
<li><p>在想要转换的前面加上 &lt;&gt; 标签<br>但是和react的jsx语法重了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">HTMLInputElement</span>&gt;<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;user-input&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>as 然后后面加上变成什么类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userInputElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;user-input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (userInputElement) &#123;</span><br><span class="line">  (userInputElement <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>).<span class="property">value</span> = <span class="string">&#x27;Hi there!&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Index-properties"><a href="#Index-properties" class="headerlink" title="Index properties"></a>Index properties</h2><p>接口里面如果不确定一个类里面有多少的属性，但是所有的属性的类型都是确定的，就可以用index properties</p>
<p><code>[prop:string]:string</code></p>
<p>代表所有的属性的名称都是string类型,而且这些属性的类型都是string类型</p>
<p>如果想要在接口里面添加一个确定的属性，这个属性只能和index properties的类型相同</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ErrorContainer</span> &#123; <span class="comment">// &#123; email: &#x27;Not a valid email&#x27;, username: &#x27;Must start with a character!&#x27; &#125;</span></span><br><span class="line">  [<span class="attr">prop</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">   <span class="comment">// id:string  只能是string类型，要和[prop: string]的类型保持一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">errorBag</span>: <span class="title class_">ErrorContainer</span> = &#123;</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;Not a valid email!&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;Must start with a capital character!&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="Function-Overloads"><a href="#Function-Overloads" class="headerlink" title="Function Overloads"></a>Function Overloads</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: Combinable, b: Combinable</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> b === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="title function_">toString</span>() + b.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当add输入的都是number的时候，返回值一定是number，这时候就可以用重载了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: Combinable, b: Combinable</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> b === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="title function_">toString</span>() + b.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">add</span>(<span class="string">&#x27;Max&#x27;</span>, <span class="string">&#x27; Schwarz&#x27;</span>); <span class="comment">//这个的返回值就确定是string了</span></span><br></pre></td></tr></table></figure>



<h2 id="Optional-Chaining-Nullish-Coalescing"><a href="#Optional-Chaining-Nullish-Coalescing" class="headerlink" title="Optional Chaining | Nullish Coalescing"></a>Optional Chaining | Nullish Coalescing</h2><p>可能会遇到向后端取数据的时候，没有这个参数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myadmin?.<span class="property">startDate</span>?);</span><br></pre></td></tr></table></figure>

<p>在后面加上 ？ 来检测一下即可</p>
<p>Nullish Coalescing</p>
<blockquote>
<p>空值合并</p>
</blockquote>
<p>简单来说，在 <code>let x = foo ?? bar();</code> 中，如果 <code>foo</code> 为 <code>null</code> 或 <code>undefined</code> ,则 <code>x = bar()</code> , 否则 <code>x = foo</code> ;</p>
<p>和这个的作用一样</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = (foo !== <span class="literal">null</span> &amp;&amp; foo !== <span class="literal">undefined</span>)</span><br><span class="line">    ? foo</span><br><span class="line">    : <span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个错误的实现</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = foo || <span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<p>如果foo是0或者“”（空的字符串）之类的被识别成false的，x也会变成bar,这里出现了错误</p>
</blockquote>
<h1 id="Generics-范型"><a href="#Generics-范型" class="headerlink" title="Generics(范型)"></a>Generics(范型)</h1><p>是ts自己的,js没有</p>
<p>自带的泛型类型</p>
<p>Array&lt; string &gt; 代表这个数组里面存的都是string类型</p>
<p>promise&lt; number &gt; 代表promise里面存的都是数组</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">names</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = []; <span class="comment">// string[]</span></span><br><span class="line">names[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);  <span class="comment">//不能用这个方法，因为上面Array里面存的是number类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">promise</span>: <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;123&#x27;</span>);  <span class="comment">//resolve传入的值要和Promise&lt;string&gt;的string一致</span></span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="Generic-Functions-amp-Classes"><a href="#Generic-Functions-amp-Classes" class="headerlink" title="Generic Functions &amp; Classes"></a>Generic Functions &amp; Classes</h2><h3 id="Generic-Function"><a href="#Generic-Function" class="headerlink" title="Generic Function"></a>Generic Function</h3><p>当不用泛型的时候:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">objA: <span class="built_in">object</span>, objB: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(objA, objB);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mergedObj=<span class="title function_">merge</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;sun&#x27;</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">20</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergedObj.<span class="property">name</span>);  <span class="comment">//这里读不到mergedObj,因为ts以为这是个object类型</span></span><br></pre></td></tr></table></figure>



<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> merge&lt;T, U&gt;(<span class="attr">objA</span>: T, <span class="attr">objB</span>: U) &#123; <span class="comment">//T和U代表这是任意的类型，不关心具体是什么类型，前面的&lt; T,U &gt;代表类型是这两个类型的结合</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(objA, objB);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mergedObj = <span class="title function_">merge</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Max&#x27;</span>, <span class="attr">hobbies</span>: [<span class="string">&#x27;Sports&#x27;</span>] &#125;, &#123; <span class="attr">age</span>: <span class="number">30</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergedObj.<span class="property">name</span>);  <span class="comment">//这个是可以的，ts能识别到</span></span><br></pre></td></tr></table></figure>

<h3 id="Generic-Classes"><a href="#Generic-Classes" class="headerlink" title="Generic Classes"></a>Generic Classes</h3><p>需要这个类有一定的方法，但不关心这个传入的类的类型具体是什么东西，就可以用泛型啦</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataStorage</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>&gt; &#123;  </span><br><span class="line">  <span class="keyword">private</span> <span class="attr">data</span>: T[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addItem</span>(<span class="params">item: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeItem</span>(<span class="params">item: T</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">indexOf</span>(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">indexOf</span>(item), <span class="number">1</span>); <span class="comment">// -1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getItems</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [...<span class="variable language_">this</span>.<span class="property">data</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用的时候：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> textStorage = <span class="keyword">new</span> <span class="title class_">DataStorage</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">textStorage.<span class="title function_">addItem</span>(<span class="string">&#x27;Max&#x27;</span>);</span><br><span class="line">textStorage.<span class="title function_">addItem</span>(<span class="string">&#x27;Manu&#x27;</span>);</span><br><span class="line">textStorage.<span class="title function_">removeItem</span>(<span class="string">&#x27;Max&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(textStorage.<span class="title function_">getItems</span>());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>上面的removeItem的方法无法直接处理对象，</p>
<p>因为对象存的是一个指针，<code>this.data.indexOf(item)</code>找不到，只能返回-1,然后<code>this.data.splice(-1, 1)</code>就是把最后一个元素去除了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> objStorage = <span class="keyword">new</span> <span class="title class_">DataStorage</span>&lt;<span class="built_in">object</span>&gt;();</span><br><span class="line">objStorage.<span class="title function_">addItem</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Max&#x27;</span>&#125;);</span><br><span class="line">objStorage.<span class="title function_">addItem</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Manu&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">objStorage.<span class="title function_">removeItem</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Max&#x27;</span>&#125;);  <span class="comment">//因为对象存的是一个指针，这里是在找指针，找不到具体的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objStorage.<span class="title function_">getItems</span>());</span><br></pre></td></tr></table></figure>

<p>所以在找的时候，要传入完全相同的对象：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> objStorage = <span class="keyword">new</span> <span class="title class_">DataStorage</span>&lt;<span class="built_in">object</span>&gt;();</span><br><span class="line"><span class="keyword">const</span> maxObj = &#123;<span class="attr">name</span>: <span class="string">&#x27;Max&#x27;</span>&#125;;</span><br><span class="line">objStorage.<span class="title function_">addItem</span>(maxObj);</span><br><span class="line">objStorage.<span class="title function_">addItem</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Manu&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">objStorage.<span class="title function_">removeItem</span>(maxObj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objStorage.<span class="title function_">getItems</span>());</span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><blockquote>
<p>约束</p>
</blockquote>
<p>这里的objA,objB可以是任意的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> merge&lt;T, U&gt;(<span class="attr">objA</span>: T, <span class="attr">objB</span>: U)</span><br></pre></td></tr></table></figure>

<p>想要对T,U进行约束，使用extend关键字</p>
<p>下面是T和U都要是object类</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> merge&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, U <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(<span class="attr">objA</span>: T, <span class="attr">objB</span>: U)</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> merge&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(<span class="attr">objA</span>: T, <span class="attr">objB</span>: U)</span><br></pre></td></tr></table></figure>



<p>用接口来限制length属性，传入函数的可以是任意的类，但是一定要有length属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthy</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> countAndDescribe&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthy</span>&gt;(<span class="attr">element</span>: T): [T, <span class="built_in">string</span>] &#123;  <span class="comment">//不关心传入的element有什么，但是一定要符合Lengthy</span></span><br><span class="line">  <span class="keyword">let</span> descriptionText = <span class="string">&#x27;Got no value.&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (element.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    descriptionText = <span class="string">&#x27;Got 1 element.&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    descriptionText = <span class="string">&#x27;Got &#x27;</span> + element.<span class="property">length</span> + <span class="string">&#x27; elements.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [element, descriptionText];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countAndDescribe</span>([<span class="string">&#x27;Sports&#x27;</span>, <span class="string">&#x27;Cooking&#x27;</span>]));</span><br></pre></td></tr></table></figure>

<h4 id="The-keyof-Constraint"><a href="#The-keyof-Constraint" class="headerlink" title="The keyof Constraint"></a>The keyof Constraint</h4><p>在原声的js里面可以通过这个访问obj里面的key属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extractAndConvert</span>(<span class="params">obj,key</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于ts:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> extractAndConvert&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, U <span class="keyword">extends</span> keyof T&gt;(  <span class="comment">//U必须是T中的一个属性</span></span><br><span class="line">  <span class="attr">obj</span>: T,</span><br><span class="line">  <span class="attr">key</span>: U</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Value: &#x27;</span> + obj[key];  <span class="comment">//这样ts才能确定key是obj里面的一个属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Special-TypeScript-Types"><a href="#Special-TypeScript-Types" class="headerlink" title="Special TypeScript Types"></a>Special TypeScript Types</h2><h3 id="Partial-Type"><a href="#Partial-Type" class="headerlink" title="Partial Type"></a>Partial Type</h3><blockquote>
<p>Partial 偏爱的，部分的    可选属性</p>
</blockquote>
<p><code>Partial&lt;类型&gt;  </code></p>
<p>表示这个类型里面的变量不是一定要有的，是可选的</p>
<p>这样可以随时添加符合要求的属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CourseGoal</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completeUntil</span>: <span class="title class_">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCourseGoal</span>(<span class="params"></span></span><br><span class="line"><span class="params">  title: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  description: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  date: <span class="built_in">Date</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">CourseGoal</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">courseGoal</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">CourseGoal</span>&gt; = &#123;&#125;;</span><br><span class="line">  courseGoal.<span class="property">title</span> = title;</span><br><span class="line">  courseGoal.<span class="property">description</span> = description;  <span class="comment">//这样可以像js一样直接添加需要的属性</span></span><br><span class="line">  courseGoal.<span class="property">completeUntil</span> = date;</span><br><span class="line">  <span class="keyword">return</span> courseGoal <span class="keyword">as</span> <span class="title class_">CourseGoal</span>;  <span class="comment">//因为返回的时候要求是CourseGoal,所以需要声明类型到CourseGoal</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Readonly-Type"><a href="#Readonly-Type" class="headerlink" title="Readonly Type"></a>Readonly Type</h3><p>禁止修改</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">names</span>: <span class="title class_">Readonly</span>&lt;<span class="built_in">string</span>[]&gt; = [<span class="string">&#x27;Max&#x27;</span>, <span class="string">&#x27;Anna&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>这样，就不能对names这个string[]数组进行修改了</p>
<h1 id="Decorators-装饰器"><a href="#Decorators-装饰器" class="headerlink" title="Decorators(装饰器)"></a>Decorators(装饰器)</h1><p>在tsconfig.json里面确保这一句是开着的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>装饰者模式（Decorator Pattern）也称为装饰器模式，在不改变对象自身的基础上，动态增加额外的职责。属于结构型模式的一种。</p>
<p><strong>使用装饰者模式的优点：把对象核心职责和要装饰的功能分开了。</strong>非侵入式的行为修改。</p>
<p>举个例子来说，原本长相一般的女孩，借助美颜功能，也能拍出逆天的颜值。只要善于运用辅助的装饰功能，开启瘦脸，增大眼睛，来点磨皮后，咔嚓一拍，惊艳无比。</p>
<p>经过这一系列叠加的装饰，你还是你，长相不增不减，却能在镜头前增加了多重美。如果你愿意，还可以尝试不同的装饰风格，只要装饰功能做的好，你就能成为“百变星君”。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 女孩子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">  <span class="title function_">faceValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我原本的脸&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThinFace</span>  &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">girl</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">girl</span> = girl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">faceValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">girl</span>.<span class="title function_">faceValue</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开启瘦脸&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IncreasingEyes</span>  &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">girl</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">girl</span> = girl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">faceValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">girl</span>.<span class="title function_">faceValue</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;增大眼睛&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> girl = <span class="keyword">new</span> <span class="title class_">Girl</span>();</span><br><span class="line">girl = <span class="keyword">new</span> <span class="title class_">ThinFace</span>(girl);</span><br><span class="line">girl = <span class="keyword">new</span> <span class="title class_">IncreasingEyes</span>(girl);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闪瞎你的眼</span></span><br><span class="line">girl.<span class="title function_">faceValue</span>(); <span class="comment">// </span></span><br></pre></td></tr></table></figure>

<p>从代码的表现来看，将一个对象嵌入到另一个对象中，相当于通过一个对象对另一个对象进行包装，形成一条包装链。调用后，随着包装的链条传递给每一个对象，让每个对象都有处理的机会。</p>
<p>这种方式在增加删除装饰功能上都有极大的灵活性，假如你有勇气展示真实的脸，去掉瘦脸的包装即可，这对其他功能毫无影响；假如要增加磨皮，再来个功能类，继续装饰下去，对其他功能也无影响，可以并存运行。</p>
<p><img src="https://tu.sunning.fit/i/2022/06/06/629dc8c55e535.png" alt="image-20220606172834453"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>装饰器实际上就是一个函数，在使用时前面加上@符号，写在要装饰的声明之前，多个装饰器同时作用在一个声明时，可以写一行或换行写</p>
<p>多个装饰器组合在一起，在运行时注意调用顺序是从下至上依次调用，和书写的顺序相反</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Logger</span>(<span class="params">constructor: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Logging...&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(constructor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要改成Logger方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Logger</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">_:<span class="built_in">Function</span></span>)&#123;   <span class="comment">//</span></span><br><span class="line">        xxxxxxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Logger</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;Max&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Creating person object...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pers = <span class="keyword">new</span> <span class="title class_">Person</span>();  <span class="comment">//不用这句话，装饰器也一样工作，当找到constructor装饰器就开始工作了</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pers);</span><br></pre></td></tr></table></figure>

<h2 id="Decorator-Factories（装饰器工厂）"><a href="#Decorator-Factories（装饰器工厂）" class="headerlink" title="Decorator Factories（装饰器工厂）"></a>Decorator Factories（装饰器工厂）</h2><p>有时候要给装饰器传递一些参数，这要借助装饰器工厂函数。装饰器工厂函数实际上就是一个高阶函数，在调用后返回一个函数，返回的函数作为装饰器函数。</p>
<p>在装饰器工厂调用的顺序是</p>
<p>按照下面debug.log的1,2,3,4的顺序执行，因为装饰器工厂本质是一个函数，这个函数是js运行的，按照正常顺序执行</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">thinFace</span>(<span class="params">value: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1-瘦脸工厂方法&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`4-我是瘦脸的装饰器，要瘦脸<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">IncreasingEyes</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2-增大眼睛工厂方法&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`3-我是增大眼睛的装饰器，要<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@thinFace</span>(<span class="string">&#x27;50%&#x27;</span>)</span><br><span class="line"><span class="meta">@IncreasingEyes</span>(<span class="string">&#x27;增大一倍&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>通过传入的值来更改DOM元素</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">WithTemplate</span>(<span class="params">template: <span class="built_in">string</span>, hookId: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">constructor: <span class="built_in">any</span></span>) &#123;  <span class="comment">//通过constructor来操作被修饰了的元素</span></span><br><span class="line">    <span class="keyword">const</span> hookEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hookId);</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">    <span class="keyword">if</span> (hookEl) &#123;</span><br><span class="line">      hookEl.<span class="property">innerHTML</span> = template;</span><br><span class="line">      hookEl.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)!.<span class="property">textContent</span> = p.<span class="property">name</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Logger(&#x27;LOGGING - PERSON&#x27;)</span></span><br><span class="line"><span class="meta">@WithTemplate</span>(<span class="string">&#x27;&lt;h1&gt;My Person Object&lt;/h1&gt;&#x27;</span>, <span class="string">&#x27;app&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;Max&#x27;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Creating person object...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>angular有类似的更高级的实现</p>
<h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>类装饰器表达式会在运行时当作函数被调用，类的构造函数作为其唯一的参数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> decorateClass&lt;T&gt;(<span class="attr">constructor</span>: T) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(constructor === A) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@decorateClass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码可以看出类装饰器接收的参数<code>constructor === A.prototype.constructor</code>，即<code>constructor</code>为<code>class A</code>的构造函数。</p>
<p>如果类装饰器返回一个构造函数, 它会使用提供的构造函数来替换类之前的声明</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> decorateClass&lt;T <span class="keyword">extends</span> &#123; <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]): &#123;&#125; &#125;&gt;(<span class="attr">constructor</span>: T)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">constructor</span>&#123;</span><br><span class="line">    name = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@decorateClass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">A</span>().<span class="property">name</span>)  <span class="comment">// 输出 B</span></span><br></pre></td></tr></table></figure>





<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">classDecorator</span>(<span class="params">value: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">constructor</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收一个构造函数&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">thinFace</span>(<span class="params">constructor</span>)&#123;</span><br><span class="line">  constructor.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">thinFaceFeature</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;瘦脸功能&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@thinFace</span></span><br><span class="line"><span class="meta">@classDecorator</span>(<span class="string">&#x27;类装饰器&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="keyword">new</span> <span class="title class_">Girl</span>();</span><br><span class="line"></span><br><span class="line">g.<span class="title function_">thinFaceFeature</span>(); <span class="comment">// &#x27;瘦脸功能&#x27;</span></span><br></pre></td></tr></table></figure>





<h2 id="属性装饰器-Property-Decorato"><a href="#属性装饰器-Property-Decorato" class="headerlink" title="属性装饰器(Property Decorato)"></a>属性装饰器(Property Decorato)</h2><p>作用在类中定义的属性上，这些属性不是原型上的属性，而是通过类实例化得到的实例对象上的属性。</p>
<p>装饰器同样会接受两个参数，</p>
<ul>
<li><p>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</p>
</li>
<li><p>成员的名字</p>
</li>
</ul>
<p>没有属性描述对象，与TypeScript是如何初始化属性装饰器的有关。 目前没有办法在定义一个原型对象的成员时描述一个实例属性。</p>
<p>什么时候调用：</p>
<ul>
<li>当这个属性被js注册的时候就被调用了</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">propertyDecorator</span>(<span class="params">value: <span class="built_in">string</span>, Girl</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">prototype, key</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收原型对象，装饰的属性名，属性描述符&#x27;</span>, <span class="title class_">Girl</span>.<span class="property"><span class="keyword">prototype</span></span> === prototype)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">thinFace</span>(<span class="params">prototype, key</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(prototype, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">  <span class="meta">@thinFace</span></span><br><span class="line">  <span class="meta">@propertyDecorator</span>(<span class="string">&#x27;属性装饰器&#x27;</span>, <span class="title class_">Girl</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="keyword">new</span> <span class="title class_">Girl</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="property">age</span>); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure>



<h2 id="对象的属性描述符："><a href="#对象的属性描述符：" class="headerlink" title="对象的属性描述符："></a>对象的属性描述符：</h2><p>​	我们在给对象添加属性的时候, 第一反应就是通过<code>[key]: value</code> 添加属性, 但其实这个<code>value</code>只是这个key属性的其中一种<strong>特性</strong>, 而<strong>描述当前这个对象属性特性</strong>的设置 就是<code>属性描述符</code></p>
<blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">configurable</span>: 是否可删除</span><br><span class="line"><span class="attr">enumerable</span>: 是否可枚举(遍历)</span><br><span class="line"><span class="attr">value</span>: 属性值</span><br><span class="line"><span class="attr">writable</span>: 是否可修改</span><br></pre></td></tr></table></figure>

<p>直接通过<code>Object.defineProperty</code>添加的属性，除了value其他的三个属性都是false</p>
<p>直接添加属性的对象描述符四个全都是true</p>
<p>​	<strong>访问器修饰符</strong></p>
<p>就是用getter和setter替换掉了原来的value和writable属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&#x27;c&#x27;</span>, &#123;</span><br><span class="line"> <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">a</span> = newValue;</span><br><span class="line"> &#125;,</span><br><span class="line"> enumerable : <span class="literal">true</span>,</span><br><span class="line"> configurable : <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">c</span>, <span class="variable language_">window</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="variable language_">window</span>, <span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="Accessor-Decorators"><a href="#Accessor-Decorators" class="headerlink" title="Accessor  Decorators"></a>Accessor  Decorators</h2><p> The accessor decorator is applied to the <em>Property Descriptor</em> for the accessor and can be used to observe, modify, or replace an accessor’s definitions.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Log2</span>(<span class="params">target:<span class="built_in">any</span>,name:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>)&#123;</span><br><span class="line">    <span class="comment">//原型对象，名称，属性描述符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Log3</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">  name: <span class="built_in">string</span> | <span class="built_in">Symbol</span>,</span></span><br><span class="line"><span class="params">  descriptor: PropertyDescriptor</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Method decorator!&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log2</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">price</span>(<span class="params">val: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_price</span> = val;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid price - should be positive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log3</span></span><br><span class="line">  <span class="title function_">getPriceWithTax</span>(<span class="params"><span class="meta">@Log4</span> tax: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_price</span> * (<span class="number">1</span> + tax);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h2 id="Parameter-Decorators"><a href="#Parameter-Decorators" class="headerlink" title="Parameter Decorators"></a>Parameter Decorators</h2><blockquote>
<p>Parameter 参数</p>
</blockquote>
<p>原型对象，名字，参数在传入的第几个位置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Log4</span>(<span class="params">target: <span class="built_in">any</span>, name: <span class="built_in">string</span> | <span class="built_in">Symbol</span>, position: <span class="built_in">number</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPriceWithTax</span>(<span class="meta">@Log4</span> <span class="attr">tax</span>: <span class="built_in">number</span>) <span class="comment">//比如这个就一个参数，所以位置是0</span></span><br></pre></td></tr></table></figure>



<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Log4</span>(<span class="params">target: <span class="built_in">any</span>, name: <span class="built_in">string</span> | <span class="built_in">Symbol</span>, position: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Parameter decorator!&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(position);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPriceWithTax</span>(<span class="params"><span class="meta">@Log4</span> tax: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_price</span> * (<span class="number">1</span> + tax);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><p><em>方法装饰器</em>声明在一个方法的声明之前（紧靠着方法声明）。 它会被应用到方法的 <em>属性描述符</em>上，可以用来<strong>监视，修改或者替换</strong>方法定义。 </p>
<p>作用在类的方法上，有静态方法和原型方法。</p>
<ul>
<li>作用在静态方法上，装饰器函数接收的是类构造函数；</li>
<li>作用在原型方法上，装饰器函数接收的是原型对象。</li>
</ul>
<p>方法装饰器表达式会在运行时当作函数被调用，传入下列3个参数：</p>
<ol>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>成员的名字。</li>
<li>成员的<em>属性描述符</em>。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">methodDecorator</span>(<span class="params">value: <span class="built_in">string</span>, Girl</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">prototype, key, descriptor</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收原型对象，装饰的属性名，属性描述符&#x27;</span>, <span class="title class_">Girl</span>.<span class="property"><span class="keyword">prototype</span></span> === prototype)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">thinFace</span>(<span class="params">prototype, key, descriptor</span>)&#123;</span><br><span class="line">  <span class="comment">// 保留原来的方法逻辑</span></span><br><span class="line">  <span class="keyword">let</span> originalMethod = descriptor.<span class="property">value</span>;</span><br><span class="line">  <span class="comment">// 改写，增加逻辑，并执行原有逻辑</span></span><br><span class="line">  descriptor.<span class="property">value</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    originalMethod.<span class="title function_">call</span>(<span class="variable language_">this</span>);  <span class="comment">// 注意修改this的指向</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开启瘦脸模式&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@thinFace</span></span><br><span class="line">  <span class="meta">@methodDecorator</span>(<span class="string">&#x27;方法装饰器&#x27;</span>, <span class="title class_">Girl</span>)</span><br><span class="line">  <span class="title function_">faceValue</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是原本的面目&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="keyword">new</span> <span class="title class_">Girl</span>();</span><br><span class="line"></span><br><span class="line">g.<span class="title function_">faceValue</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>装饰器接收三个参数：</p>
<p>原型对象，方法名，描述对象</p>
</blockquote>
<p>要增强功能，可以保留原来的函数，改写描述对象的value为另一函数</p>
<p>当使用g.faceValue()访问方法时，访问的就是描述对象value对应的值</p>
<p>在改写的函数中增加逻辑，并执行原来保留的原函数，注意函数要用call或apply将this指向原型对象</p>
<h2 id="when-do-decoratos-execute"><a href="#when-do-decoratos-execute" class="headerlink" title="when do decoratos execute"></a>when do decoratos execute</h2><p>在被定义的时候执行，不是被实例化的时候执行</p>
<p>（假如是类装饰器，就在类被定义的时候装饰器就执行了，实例化类的时候不会执行</p>
<h2 id="Decorator-Return-Types"><a href="#Decorator-Return-Types" class="headerlink" title="Decorator Return Types"></a>Decorator Return Types</h2><h3 id="Returning-and-changing-a-Class-in-a-Class-Decorators"><a href="#Returning-and-changing-a-Class-in-a-Class-Decorators" class="headerlink" title="Returning(and changing) a Class in a Class Decorators"></a>Returning(and changing) a Class in a Class Decorators</h3><p>没有用这种写法之前的写法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">WithTemplate</span>(<span class="params">template: <span class="built_in">string</span>, hookId: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;TEMPLATE FACTORY&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">constructor: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Rendering template&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> hookEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hookId);</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">    <span class="keyword">if</span> (hookEl) &#123;</span><br><span class="line">      hookEl.<span class="property">innerHTML</span> = template;</span><br><span class="line">      hookEl.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)!.<span class="property">textContent</span> = p.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">WithTemplate</span>(<span class="params">template: <span class="built_in">string</span>, hookId: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;TEMPLATE FACTORY&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>&lt;T <span class="keyword">extends</span> &#123; <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]): &#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125; &#125;&gt;( </span><br><span class="line">    <span class="attr">originalConstructor</span>: T</span><br><span class="line">  ) &#123;  <span class="comment">//function&lt;T extends &#123; new (...args: any[]): &#123;name: string&#125; &#125;&gt; 这一整个是一个泛型，代表的是一个构造器：&#123; new (...args: any[]): &#123;name: string&#125; &#125; 是一个对象，里面有new 方法，方法可以接受任意的参数，另外其中一定会返回一个对象，属性是name（因为后面this.name用的上，需要告诉ts用的上）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> originalConstructor &#123; <span class="comment">//在这里可以写一个新的构造器用来代替旧的那个，这里写class是想要构造器写class是个语法糖，class后面不用写具体的名称，这里新写的类要继承自原来的构造函数</span></span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">..._: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();  <span class="comment">//因为继承要有super</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Rendering template&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> hookEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(hookId);</span><br><span class="line">        <span class="keyword">if</span> (hookEl) &#123;</span><br><span class="line">          hookEl.<span class="property">innerHTML</span> = template; </span><br><span class="line">          hookEl.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)!.<span class="property">textContent</span> = <span class="variable language_">this</span>.<span class="property">name</span>;  <span class="comment">//不用像上面一样实例化了，直接用this.就能获得了</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="other-decorator-return-types"><a href="#other-decorator-return-types" class="headerlink" title="other decorator return types"></a>other decorator return types</h3><p>属性或者参数的修饰器的返回值不会被使用</p>
<h2 id="Example-Creating-an-Autobind-Decorator"><a href="#Example-Creating-an-Autobind-Decorator" class="headerlink" title="Example Creating an Autobind Decorator"></a>Example Creating an Autobind Decorator</h2><p>js关于this的指向的一个坑</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Printer</span>&#123;</span><br><span class="line">    message=<span class="string">&#x27;this works!&#x27;</span>;</span><br><span class="line">    <span class="title function_">showMessage</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p=<span class="keyword">new</span> <span class="title class_">Printer</span>();</span><br><span class="line"><span class="keyword">const</span> button=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)!;</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,p.<span class="property">showMessage</span>.<span class="title function_">bind</span>(p));<span class="comment">//如果去掉bind这个属性，那么执行this.message的时候this指的是addEventListener这个绑定了的东西，而不是Printer里面的mess</span></span><br></pre></td></tr></table></figure>

<p>为了实现自动绑定，可以用一个方法装饰器</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Autobind</span>(<span class="params">_: <span class="built_in">any</span>, _2: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;  <span class="comment">//这是获取方法原来的操作</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">adjDescriptor</span>: <span class="title class_">PropertyDescriptor</span> = &#123;  <span class="comment">//返回一个新的descriptor（ 即改写原来被装饰的方法</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> boundFn = originalMethod.<span class="title function_">bind</span>(<span class="variable language_">this</span>);  <span class="comment">//这里相当于改写了被装饰的方法</span></span><br><span class="line">      <span class="keyword">return</span> boundFn;  <span class="comment">//改写了get属性，记得return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> adjDescriptor;  <span class="comment">//把改写了的方法返回回去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Decorators-for-Validation"><a href="#Decorators-for-Validation" class="headerlink" title="Decorators for Validation"></a>Decorators for Validation</h2><blockquote>
<p>Validation 生效；批准；验证；确认；证实；核实</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ValidatorConfig</span> &#123;</span><br><span class="line">  [<span class="attr">property</span>: <span class="built_in">string</span>]: &#123;</span><br><span class="line">    [<span class="attr">validatableProp</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>[]; <span class="comment">// [&#x27;required&#x27;, &#x27;positive&#x27;]</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是任意属性里面又包了一层任意属性</p>
<h1 id="Namespaces-amp-Modules"><a href="#Namespaces-amp-Modules" class="headerlink" title="Namespaces&amp;Modules"></a>Namespaces&amp;Modules</h1><blockquote>
<p>syntax 语法</p>
</blockquote>
<table>
<thead>
<tr>
<th>Namespace &amp; File Bunding</th>
<th align="left">ES6 Imports&#x2F;Exports</th>
</tr>
</thead>
<tbody><tr>
<td>Use “namespace” code syntax to group code</td>
<td align="left">Use ES6 import&#x2F;export syntax</td>
</tr>
<tr>
<td>Per-file or bundled compilation is possible</td>
<td align="left">Per-file compilation but single &lt; script &gt; import</td>
</tr>
</tbody></table>
<p>命名空间可以放所有的东西</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Draggable</span> &#123;  <span class="comment">//这个接口没有暴露，只能在这个命名空间里面使用</span></span><br><span class="line">    <span class="title function_">dragStartHandler</span>(<span class="attr">event</span>: <span class="title class_">DragEvent</span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">dragEndHandler</span>(<span class="attr">event</span>: <span class="title class_">DragEvent</span>): <span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">DragTarget</span> &#123;  <span class="comment">//这个接口已经暴露在外面了，在不在命名空间里面都可以使用</span></span><br><span class="line">    <span class="title function_">dragOverHandler</span>(<span class="attr">event</span>: <span class="title class_">DragEvent</span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">dropHandler</span>(<span class="attr">event</span>: <span class="title class_">DragEvent</span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">dragLeaveHandler</span>(<span class="attr">event</span>: <span class="title class_">DragEvent</span>): <span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>&#x2F;&#x2F;&#x2F; 是ts的语法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt; reference path=&quot;drag-drop-interfaces.ts&quot;/&gt;</span></span><br></pre></td></tr></table></figure>



<p>下面的例子里，把所有与验证器相关的类型都放到一个叫做<code>Validation</code>的命名空间里。 因为我们想让这些接口和类在命名空间之外也是可访问的，所以需要使用 <code>export</code>。 相反的，变量 <code>lettersRegexp</code>和<code>numberRegexp</code>是实现的细节，不需要导出，因此它们在命名空间外是不能访问的。</p>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><h3 id="命名空间里东西的访问"><a href="#命名空间里东西的访问" class="headerlink" title="命名空间里东西的访问:"></a>命名空间里东西的访问:</h3><p> 命名空间.xxxx</p>
<p><strong>别名：</strong></p>
<p>使用import q&#x3D;x.y.z给常用的对象起一个短的名字，不要与用来加载模块的 <code>import x = require(&#39;name&#39;)</code>语法弄混了，这里的语法是为指定的符号创建一个别名。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Shapes</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">Polygons</span> &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> &#123; &#125;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> polygons = <span class="title class_">Shapes</span>.<span class="property">Polygons</span>;</span><br><span class="line"><span class="keyword">let</span> sq = <span class="keyword">new</span> polygons.<span class="title class_">Square</span>(); <span class="comment">// Same as &quot;new Shapes.Polygons.Square()&quot;</span></span><br></pre></td></tr></table></figure>





<h3 id="多文件中的命名空间"><a href="#多文件中的命名空间" class="headerlink" title="多文件中的命名空间"></a>多文件中的命名空间</h3><p>在不同的文件里面用同一个namespace就和是在同一个文件里面写的命名空间一样</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Validation</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">        <span class="title function_">isAcceptable</span>(<span class="attr">s</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;Validation.ts&quot; /&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Validation</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> lettersRegexp = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LettersOnlyValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">        <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> lettersRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">当涉及到多文件时，我们必须确保所有编译后的代码都被加载了。 我们有两种方式。</span><br><span class="line"></span><br><span class="line">第一种方式，把所有的输入文件编译为一个输出文件，需要使用--outFile标记：</span><br><span class="line"></span><br><span class="line">tsc --outFile sample.js Test.ts</span><br><span class="line">编译器会根据源码里的引用标签自动地对输出进行排序。你也可以单独地指定每个文件。</span><br><span class="line"></span><br><span class="line">tsc --outFile sample.js Validation.ts LettersOnlyValidator.ts ZipCodeValidator.ts Test.ts</span><br><span class="line">第二种方式，我们可以编译每一个文件（默认方式），那么每个源文件都会对应生成一个JavaScript文件。 然后，在页面上通过 &lt;script&gt;标签把所有生成的JavaScript文件按正确的顺序引进来，比如：</span><br><span class="line"></span><br><span class="line">MyTestPage.html (excerpt)</span><br><span class="line">    &lt;script src=<span class="string">&quot;Validation.js&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> /&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;LettersOnlyValidator.js&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> /&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;ZipCodeValidator.js&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> /&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;Test.js&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块在其自身的作用域里执行，而不是在全局作用域里；这意味着定义在一个模块里的变量，函数，类等等在模块外部是不可见的，除非你明确地使用<code>export</code>形式之一导出它们。 相反，如果想使用其它模块导出的变量，函数，类，接口等的时候，你必须要导入它们，可以使用 <code>import</code>形式之一。</p>
<h2 id="命名空间和模块的陷阱"><a href="#命名空间和模块的陷阱" class="headerlink" title="命名空间和模块的陷阱"></a>命名空间和模块的陷阱</h2><h3 id="对模块使用-lt-reference-gt"><a href="#对模块使用-lt-reference-gt" class="headerlink" title="对模块使用/// &lt;reference&gt;"></a>对模块使用<code>/// &lt;reference&gt;</code></h3><p>一个常见的错误是使用<code>/// &lt;reference&gt;</code>引用模块文件，应该使用<code>import</code></p>
<h3 id="不必要的命名空间"><a href="#不必要的命名空间" class="headerlink" title="不必要的命名空间"></a>不必要的命名空间</h3><p>如果你想把命名空间转换为模块，它可能会像下面这个文件一件：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">Shapes</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>应该改成:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuetify</title>
    <url>/2022/07/21/Vuetify/</url>
    <content><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>正常创建一个vue项目，然后在文件夹下面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue add vuetify</span><br></pre></td></tr></table></figure>

<h3 id="安装图标字体库"><a href="#安装图标字体库" class="headerlink" title="安装图标字体库"></a>安装图标字体库</h3><p>默认用的是material design图标，cdn的形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;link href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/@mdi/font@6.x/css/materialdesignicons.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>引入的位置在public的index.html文件里面(最后一行)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@mdi/font@latest/css/materialdesignicons.min.css&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br></pre></td></tr></table></figure>





<p><strong>安装本地依赖</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install @mdi/font -D</span><br></pre></td></tr></table></figure>

<p>然后在<code>src/plugins/vuetify.js</code>里进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/plugins/vuetify.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@mdi/font/css/materialdesignicons.css&#x27;</span> <span class="comment">// Ensure you are using css-loader</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuetify</span> <span class="keyword">from</span> <span class="string">&#x27;vuetify/lib&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuetify</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuetify</span>(&#123;</span><br><span class="line">  <span class="attr">icons</span>: &#123;</span><br><span class="line">    <span class="attr">iconfont</span>: <span class="string">&#x27;mdi&#x27;</span>, <span class="comment">// 默认值 - 仅用于展示目的</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="v-app布局"><a href="#v-app布局" class="headerlink" title="v-app布局"></a>v-app布局</h1><h2 id="v-app"><a href="#v-app" class="headerlink" title="v-app"></a>v-app</h2><p>所有组件都要放到v-app里面，是应用程序的根节点，这样样式才是对的</p>
<p>如果添加v-app-bar，这个组件必须加上app属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-app</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 必须有app属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-app-bar</span> <span class="attr">app</span>&gt;</span><span class="tag">&lt;/<span class="name">v-app-bar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-main</span>&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为我们给了 <code>v-app-bar</code> <strong>app</strong> prop, Vuetify 知道它是布局的一部分。 <code>v-main</code>然后获取我们的bar的注册高度，并从其可用内容区域中移除相同数量的空间。在这个例子中，<strong>64px</strong>的空间从<code>v-main</code>的容器顶部移除</p>
<h2 id="v-main"><a href="#v-main" class="headerlink" title="v-main"></a>v-main</h2><p>充满整个窗口</p>
<h1 id="首页制作"><a href="#首页制作" class="headerlink" title="首页制作"></a>首页制作</h1><h2 id="最上面应用栏模块"><a href="#最上面应用栏模块" class="headerlink" title="最上面应用栏模块"></a>最上面应用栏模块</h2><p>由v-app-bar和v-tabs组成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-app-bar</span></span></span><br><span class="line"><span class="tag">  <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">  <span class="attr">elevation</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">app</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-tabs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-tab</span>&gt;</span>商品页面<span class="tag">&lt;/<span class="name">v-tab</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-tab</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">v-tab</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-tab</span>&gt;</span>订单<span class="tag">&lt;/<span class="name">v-tab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-tabs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-app-bar</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了让每个组件之间有一些空隙，使用网格系统中<code>v-container</code>子组件</p>
<p>作用：</p>
<p>将网站的内容居中和水平填充，可以用fluid属性将容器在所有是口和设备尺寸上完全扩展，默认不是占满整个父空间的，用fiuld属性可以</p>
<h2 id="登陆按钮"><a href="#登陆按钮" class="headerlink" title="登陆按钮"></a>登陆按钮</h2><p>直接写默认会占用空间，挤其它的元素，加上一个absolute属性，就不会挤占空间了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">absolute</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加上text属性，把按钮的颜色改成一个纯文本的样子</p>
<h2 id="视差"><a href="#视差" class="headerlink" title="视差"></a>视差</h2><p>图片的滑动速度和滚动条滑动的速度不一样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-parallax</span> <span class="attr">:src</span>=<span class="string">&quot;picSrc&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-h2 font-weight-black mb-3&quot;</span>&gt;</span></span><br><span class="line">            Web大作业<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-text</span>=<span class="string">&quot;2000301136&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-h5&quot;</span>&gt;</span>2000301136<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-parallax</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="设置下方卡片之前存在距离"><a href="#设置下方卡片之前存在距离" class="headerlink" title="设置下方卡片之前存在距离"></a>设置下方卡片之前存在距离</h2><p>用<code>ml-3</code>这个类，但是这样就不是水平居中的了，左边也会有3的边距</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-card</span> <span class="attr">hover</span> <span class="attr">v-for</span>=<span class="string">&quot;(card,index) in tabMenus&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:to</span>=<span class="string">&quot;card.href&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;ml-3&#x27;:(index!==0)&#125;&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>用这个方法确定是不是第一个，index是tabMenus中的子对象有的属性</p>
<h1 id="学习到的东西"><a href="#学习到的东西" class="headerlink" title="学习到的东西"></a>学习到的东西</h1><p>了解了vue推荐的代码规范，所有的数据放到data里面，<code>template</code>里面如果有需要数据的地方往数据里面找对应的数据即可</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vuetify</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex</title>
    <url>/2022/07/21/Vuex/</url>
    <content><![CDATA[<h1 id="介绍-amp-安装"><a href="#介绍-amp-安装" class="headerlink" title="介绍&amp;安装"></a>介绍&amp;安装</h1><p>专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信</p>
<p><img src="https://tu.sunning.fit/i/2022/05/21/62887cae537bb.png" alt="image-20220521134619684"></p>
<blockquote>
<p>什么时候使用：</p>
<ol>
<li>多个组件依赖于同一状态</li>
<li>来自不同组件的行为需要变更同一状态</li>
</ol>
</blockquote>
<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><p>安装vuex</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm i vuex</span><br></pre></td></tr></table></figure>

<p>创建 <code>/src/store/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作、处理业务逻辑</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"><span class="comment">//类似全局使用的计算属性</span></span><br><span class="line"><span class="keyword">const</span> getters=&#123;&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   	actions,</span><br><span class="line">   	mutations,</span><br><span class="line">   	state,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为什么要在这里创建而不在main.js里面</p>
<p>​      因为Vue.use(Vuex)要在创建store之前执行，而main里面要引入这里的index文件，import会在所有语句之前执行，所以不能只能在index.js里面用Vue.use</p>
</blockquote>
<p>在main.js里面添加配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>  <span class="comment">// 如果目录下面没写文件，就默认找index如果没有就会报错  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">store</span>:store,    <span class="comment">//可以简写</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>





<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p><img src="https://tu.sunning.fit/i/2022/05/21/62887ce71b103.png" alt="image-20220521134716553"></p>
<p>state 菜</p>
<p>action 服务员</p>
<p>mutations 后面的厨师</p>
<p>devtools监测的是mutations里面的东西</p>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>获取Vuex里面的数据（在$store的state里面）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">xxx</span></span><br></pre></td></tr></table></figure>

<p>如果要是觉得读起来太麻烦，可以用计算属性，这样子插值语法就符合Vue里面的风格指南里面的尽量简单的要求了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed&#123;</span><br><span class="line">    <span class="title function_">xxx</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">xxx</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>例子</p>
<p>&#x2F;store&#x2F;index.js里面</p>
<p>初始化数据state  action和mutations里面是方法</p>
<p>context (上下文) 就是一个小号的store所以里面的state也可以访问数据</p>
<p>mutations里面可以就只有几个基础的函数，其他的东西通过action里面的方法去处理，把处理好的数据再交给mutations里面的方法</p>
<p>action里面还能接力，防止一个函数包括太多的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">text</span>(<span class="params">context,value</span>) &#123;  <span class="comment">//第一个传入的东西是不用给值的，是一个自带的简易的store对象</span></span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;TEXT&#x27;</span>,value);   <span class="comment">//用commit去调用mutations里面的函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;text被调用了&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">text2</span>(<span class="params">context,value</span>)&#123; <span class="comment">//mutations里面可以就只有几个基础的函数，其他的东西通过action里面的方法去处理，把处理好的数据再交给mutations里面的方法</span></span><br><span class="line">        <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">n</span>==<span class="number">3</span>)&#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;TEXT&#x27;</span>,<span class="number">0</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">text3</span>(<span class="params">&#123;commit&#125;</span>)&#123;</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;xxx&#x27;</span>) <span class="comment">//可以用这种方式直接使用commit</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">text4</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="comment">//一堆逻辑</span></span><br><span class="line">        context.<span class="title function_">dispatch</span>(<span class="string">&#x27;text5&#x27;</span>,value);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">text5</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="comment">//一堆逻辑</span></span><br><span class="line">        context.<span class="title function_">dispatch</span>(<span class="string">&#x27;text6&#x27;</span>,value);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;   <span class="comment">//但是方法的操作都尽量放在mutations里面的方法里面</span></span><br><span class="line">    <span class="title function_">TEXT</span>(<span class="params">state,value</span>) &#123;   <span class="comment">//state也是不用给值的，因为就是下面state里面的东西</span></span><br><span class="line">        state.<span class="property">n</span> = state.<span class="property">n</span> + value;   </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;TEXT被调用了&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions, <span class="comment">//简写形式</span></span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>需要调用的地方</p>
<p>用action</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="number">3</span>)   <span class="comment">//&#x27;xxx&#x27;对应action里面的方法的名字，3是text方法里面的value</span></span><br></pre></td></tr></table></figure>

<p>直接调用mutations里面方法（和厨师沟通，不需要服务员了）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h1 id="getters配置项"><a href="#getters配置项" class="headerlink" title="getters配置项"></a>getters配置项</h1><p> 就当作全局使用的计算属性</p>
<p>在&#x2F;store&#x2F;index.js里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getters=&#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span>*<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//getters也是需要暴露的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>读取getters里面的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">bigSum</span></span><br></pre></td></tr></table></figure>



<h1 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h1><table>
<thead>
<tr>
<th>方法</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td>mapState</td>
<td>用于映射state中的数据为计算属性</td>
</tr>
<tr>
<td>mapGetters</td>
<td>映射getters中的数据为计算属性</td>
</tr>
<tr>
<td>mapActions</td>
<td>帮助生成与actions对话的方法，即包含 <code>$ store.dispatch(xxx)</code>的函数</td>
</tr>
<tr>
<td>mapMutations</td>
<td>生成与mutations对话的方法，即包含<code>$ store.commit(xxx)</code>的函数</td>
</tr>
</tbody></table>
<p>由这四个函数也能看出来vue操作也就是对数据和方法进行操作 <strong>数据</strong>和<strong>方法</strong></p>
<p>需求：像这种相对固定的写法，有没有可能直接传入sum就能生成这样的计算属性呢</p>
<p><img src="https://tu.sunning.fit/i/2022/05/21/628897609d74e.png" alt="image-20220521153844890"></p>
<p>map有映射的意思</p>
<p>方法一： 借助mapState生成计算属性，从state中读取数据</p>
<p>使用之前需要导入方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure>



<p>mapState需要传入：名字是什么，需要被生成的属性是什么,所以有两个东西</p>
<p>标准的写法  ‘he’:’sum’  因为键值对默认可以把key当作字符串，所以简写成 he:’sum’ </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> xxx</span><br><span class="line">    &#125;,</span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;<span class="attr">he</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">xuexiao</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">xueke</span>:<span class="string">&#x27;subject&#x27;</span>&#125;)，  <span class="comment">//es6的语法，这个函数生成的是包括很多个函数的对象，在对象里面直接写一个对象不行，所以用...就是把这个对象里面的每一组keyvalue都展开分别放到computed里面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/07/06/62c547f933f2f.png" alt="image-20220521160014432"></p>
<p>这两个是等价的</p>
<p>简化写法;</p>
<blockquote>
<p>如果这两个是相等的sum:’sum’ 也不能简写，只有sum:sum才能简写，js语法层面没有能简写的东西，但是vuex有</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>])</span><br></pre></td></tr></table></figure>
</blockquote>
<p>mapGetters和mapState用法一样，这个是辅助生成下面的东西的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">xxx</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>mapMutations  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>创建和mutations里面交互的方法，名字是increment，调用JIA方法</p>
<p>注意调用的时候要记得传入对应的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@click=<span class="string">&#x27;xxx(传入参数)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果写成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@click=<span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>

<p>也会传入默认的参数，是鼠标对象事件</p>
<h1 id="Vuex模块化"><a href="#Vuex模块化" class="headerlink" title="Vuex模块化"></a>Vuex模块化</h1><p>模块化+命名空间</p>
<p>让代码更好维护，让多种数据分类更加准确</p>
<p><strong>在index.js 里面的修改</strong></p>
<p>引入不同的模块</p>
<p>暴露的方法加上modules然后暴露</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引入count</span></span><br><span class="line"><span class="keyword">import</span> countOptions <span class="keyword">from</span> <span class="string">&#x27;./count&#x27;</span></span><br><span class="line"><span class="comment">//引入person</span></span><br><span class="line"><span class="keyword">import</span> personOptions <span class="keyword">from</span> <span class="string">&#x27;./person&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;   </span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        <span class="attr">countAbout</span>:countOptions,</span><br><span class="line">        <span class="attr">personAbout</span>:personOptions,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p><code>src/store/count.js</code>:</p>
<p>命名空间要设置成true，这样才能通过命名空间进行访问</p>
<p>每个文件里面是单独的那四个东西</p>
<p>下面是默认暴露，暴露完才能引入然后使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">addOdd</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addOdd被调用了&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>)&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">addWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addWait被调用了&quot;</span>)</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">            &#125;,<span class="number">500</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">            state.<span class="property">sum</span> += value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">SUBTRACT</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">            state.<span class="property">sum</span> -= value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">sum</span>:<span class="number">0</span>, <span class="comment">//当前的和</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span>,</span><br><span class="line">        <span class="attr">school</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>src/store/person.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">。。。。。。</span><br></pre></td></tr></table></figure>





<h2 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h2><p>和正常的相比，加上一个命名空间的名字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;ADD&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;SUBTRACT&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure>

<p>如果 <code>increment:&#39;ADD&#39;</code>一样，还是简写成数组的写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure>



<h2 id="单独调用每一个的形式"><a href="#单独调用每一个的形式" class="headerlink" title="单独调用每一个的形式"></a>单独调用每一个的形式</h2><p>拿getter里面的东西 </p>
<p>（api就设计成这样的）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;命名空间/想要的&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>可以用方括号加上字符串来读里面的属性，不一定要使用xxx.xxx</p>
<p>那state里面的东西</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.命名空间.想要的</span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>修改store.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">	<span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">	<span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  	<span class="attr">getters</span>: &#123;</span><br><span class="line">    	<span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       		<span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    	&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  	<span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  	<span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  	<span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  	<span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  	<span class="attr">modules</span>: &#123;</span><br><span class="line">    	countAbout,</span><br><span class="line">    	personAbout</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>开启命名空间后，组件中读取<code>state</code>数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure>

<p>开启命名空间后，组件中读取<code>getters</code>数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>开启命名空间后，组件中调用<code>dispatch</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>开启命名空间后，组件中调用<code>commit</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure>





<h1 id="vue-js-调试工具使用"><a href="#vue-js-调试工具使用" class="headerlink" title="vue.js 调试工具使用"></a>vue.js 调试工具使用</h1><p><strong><a href="https://cloud.tencent.com/developer/article/1878703">https://cloud.tencent.com/developer/article/1878703</a></strong></p>
<p>timeline能记录每一次的操作</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5489dee20b.png" alt="image-20220521145609012">;</p>
<h1 id="Vuex-与ts的结合"><a href="#Vuex-与ts的结合" class="headerlink" title="Vuex 与ts的结合"></a>Vuex 与ts的结合</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/2022/07/21/Vue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue create 项目名称</span><br></pre></td></tr></table></figure>

<p>选择手动添加组件，然后选择想要加入的</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c547bd42fb2.png" alt="image-20220621203528016"></p>
<p>css pre-processors是css预处理器，就像less和sass那样的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.?   //配置文件放在哪里</span><br><span class="line">❯ In dedicated config files     //放在不同的文件夹里</span><br><span class="line">  In package.json </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Save this as a preset <span class="keyword">for</span> future projects? (y/N)  是否需要保留预设</span><br></pre></td></tr></table></figure>

<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ol>
<li><p>实际开发中只有一个Vue实例，并且会配合着组件一起使用</p>
</li>
<li><p>root容器里面的代码被成为Vue模板</p>
</li>
<li><p>Vue实例与容器是一一对应的</p>
</li>
<li><p>Vue模板语法包括两大类：</p>
<p><strong>插值语法：</strong></p>
<p>功能：用于解析标签体内容<br>写法：，xxx是js表达式，且可以直接读取到data中的所有区域<br><strong>指令语法：</strong></p>
<p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…）<br>举例：<a v-bind:href="xxx">或简写为<a :href="xxx">，xxx同样要写js表达式，且可以直接读取到data中的所有属性</p>
</li>
<li><p>数据绑定<br>单向数据绑定：<input type="text" v-bind:value="name"></p>
<p>数据只能从data流向页面</p>
<p>双向数据绑定：<input type="text" v-model:value="name"><br>数据不仅从data流向页面，还可以从页面流向data</p>
</li>
<li><p>指定vue组件挂载的位置有两种写法</p>
<ol>
<li>创建Vue实例对象的时候配置el属性</li>
<li>先创建Vue实例，随后再通过<code>vm.$mount(&#39;#root&#39;)</code>指定el的值</li>
</ol>
</li>
</ol>
<h1 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h1><p><img src="https://tu.sunning.fit/i/2022/07/06/62c547c824bc7.png" alt="image-20220528211708491">   M: 模型 （Model) data中的数据</p>
<p>V:视图 （View）模板代码</p>
<p>VM: 视图模型 （ViewModel）Vue实例</p>
<p>data中的所有属性，最后都出现在了vm身上</p>
<p>vm身上所有属性，在Vue模板中都可以直接使用</p>
<h2 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h2><p><img src="https://tu.sunning.fit/i/2022/07/06/62c547cd0328b.png" alt="image-20220528212119055"></p>
<p>Vue中的数据代理通过vm对象来代理data对象中属性的操作（读&#x2F;写）</p>
<blockquote>
<p> 基本原理：</p>
<ol>
<li>通过<code>object.defineProperty()</code>把data对象中所有的属性添加到vm上</li>
<li>为每一个添加到vm上的属性，指定一个getter&#x2F;setter方法</li>
<li>在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性</li>
</ol>
</blockquote>
<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h2><ol>
<li><p>v-on:xxx或者@xxx （就像js里面on+’xxx’一样）</p>
</li>
<li><p>事件的<strong>回调</strong>需要配置在methods中，最终会在vm上</p>
</li>
<li><p>methods中配置的函数，都是被Vue管理的函数，this的指向是vm或组件实例对象</p>
</li>
<li><p><code>@click=&quot;demo</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致，但后者可以传参</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>事件修饰符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@click.stop</td>
<td>阻止默认事件</td>
</tr>
<tr>
<td>@click.prevent</td>
<td>阻止事件冒泡</td>
</tr>
<tr>
<td>@click.once</td>
<td>事件只执行一次</td>
</tr>
<tr>
<td>@click.capture</td>
<td>使用事件的捕获模式</td>
</tr>
<tr>
<td>@click.self</td>
<td>只有event.target是当前操作的元素时才触发事件</td>
</tr>
<tr>
<td>@wheel.passive</td>
<td>事件的行为立即执行，无需等待事件回调执行完毕</td>
</tr>
</tbody></table>
<p>修饰符可以连续写，比如可以这么用：<code>@click.prevent.stop=&quot;showInfo&quot;</code></p>
<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><blockquote>
<p> 键盘上的每个按键都有自己的名称和编码，例如：Enter（13）。而Vue还对一些常用按键起了别名方便使用</p>
</blockquote>
<p>Vue中常用的按键别名：</p>
<ul>
<li>回车：enter</li>
<li>删除：delete (捕获“删除”和“退格”键)</li>
<li>退出：esc</li>
<li>空格：space</li>
<li>换行：tab (特殊，必须配合keydown去使用)</li>
<li>上：up</li>
<li>下：down</li>
<li>左：left</li>
<li>右：right</li>
</ul>
<p>系统修饰键（用法特殊）：ctrl、alt、shift、meta</p>
<p>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发<br>配合keydown使用：正常触发事件<br>可以使用keyCode去指定具体的按键，比如：@keydown.13&#x3D;”showInfo”，但不推荐这样使用</p>
<p>Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以自定义按键别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@keydown.<span class="property">enter</span>=<span class="string">&quot;showInfo&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="关于this和普通函数和箭头函数"><a href="#关于this和普通函数和箭头函数" class="headerlink" title="关于this和普通函数和箭头函数"></a>关于this和普通函数和箭头函数</h1><blockquote>
<ol>
<li>所有被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象</li>
<li>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</li>
</ol>
</blockquote>
<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>要用的属性不存在，需要通过已有属性计算得来。</p>
<p>底层借助了<code>Objcet.defineproperty()</code>方法提供的getter和setter</p>
<p>和methods相比，内部有缓存机制（复用），效率更高，调试方便</p>
<h2 id="get和set函数方法"><a href="#get和set函数方法" class="headerlink" title="get和set函数方法"></a>get和set函数方法</h2><p>get和set是属于se5的东西</p>
<p>当读取一个变量的时候会触发变量的getter方法</p>
<p>当修改变量的时候会触发变量的setter方法</p>
<p><strong>get函数什么时候执行</strong></p>
<ol>
<li>初次读取时会执行一次</li>
<li>当依赖的数据发生改变时会被再次调用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="attr">fullName</span>: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>]</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">lastName</span> = names[names.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h2><p>如果确定不使用setter可以用计算属性的简写形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    <span class="attr">reversedMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>然后 :function()可以写成()</p>
<p>变成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    <span class="title function_">reversedMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>





<h1 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">                <span class="attr">isHot</span>:&#123;</span><br><span class="line">                    <span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span><br><span class="line">                    <span class="comment">//handler什么时候调用？当isHot发生改变时</span></span><br><span class="line">                    <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">						<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">					&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>



<p>Vue自身可以检测对象内部值的改变，但Vue提供的watch监视默认不可以</p>
<p>当监视的属性变化时，回调函数自动调用进行操作</p>
<p>监视的属性必须<strong>存在</strong>，才能进行监视</p>
<p>监视有两种写法：</p>
<ol>
<li><p>创建VueComponent时传入watch配置</p>
</li>
<li><p>通过vm.$watch监视</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span><br><span class="line">	<span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">	<span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="深度监视："><a href="#深度监视：" class="headerlink" title="深度监视："></a>深度监视：</h2><p>deep：true监视多级属性中所有属性的变化（如果不写deep只是监视写了的那一个属性）</p>
<p>xxx.xxxxx 监视多级结构中某个属性的变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">                <span class="comment">//监视多级结构中所有属性的变化</span></span><br><span class="line">                <span class="attr">numbers</span>:&#123;</span><br><span class="line">                    <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">					<span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">						<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers改变了&#x27;</span>)</span><br><span class="line">					&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//监视多级结构中某个属性的变化</span></span><br><span class="line">				<span class="comment">/* &#x27;numbers.a&#x27;:&#123;</span></span><br><span class="line"><span class="comment">					handler()&#123;</span></span><br><span class="line"><span class="comment">						console.log(&#x27;a被改变了&#x27;)</span></span><br><span class="line"><span class="comment">					&#125;</span></span><br><span class="line"><span class="comment">				&#125; */</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>



<h2 id="简写形式-1"><a href="#简写形式-1" class="headerlink" title="简写形式"></a>简写形式</h2><p>如果监视属性除了handler没有其他配置项，可以用简写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">            <span class="comment">//正常写法</span></span><br><span class="line">            <span class="attr">isHot</span>:&#123;</span><br><span class="line">				<span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">					<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;, </span><br><span class="line">            <span class="comment">//简写</span></span><br><span class="line">            <span class="title function_">isHot</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue,<span class="variable language_">this</span>)</span><br><span class="line">			&#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h1 id="计算属性vs监视属性"><a href="#计算属性vs监视属性" class="headerlink" title="计算属性vs监视属性"></a>计算属性vs监视属性</h1><p>计算属性能完成的功能，监视属性都能完成</p>
<p>watch能完成的功能，computed不一定都能完成，例如watch可以进行异步操作</p>
<p>计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span><br><span class="line">    <span class="attr">data</span>:&#123; </span><br><span class="line">        <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">        <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>:&#123;</span><br><span class="line">    	<span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">		    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>监听属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">	<span class="attr">data</span>:&#123;</span><br><span class="line">		<span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">		<span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span><br><span class="line">		<span class="attr">fullName</span>:<span class="string">&#x27;张-三&#x27;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">watch</span>:&#123;</span><br><span class="line">		<span class="title function_">firstName</span>(<span class="params">val</span>)&#123;</span><br><span class="line">			<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">			&#125;,<span class="number">1000</span>);</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="title function_">lastName</span>(<span class="params">val</span>)&#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + val</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h1><h2 id="class样式"><a href="#class样式" class="headerlink" title="class样式"></a>class样式</h2><ul>
<li>写法：<code>class=&quot;xxx&quot;</code>，xxx可以是字符串、对象、数组</li>
<li>字符串写法适用于：类名不确定，要动态获取</li>
<li>数组写法适用于：要绑定多个样式，个数不确定，名字也不确定</li>
<li>对象写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用（因为可以指定对应的位置是true还是false）</li>
</ul>
<h2 id="style样式"><a href="#style样式" class="headerlink" title="style样式"></a>style样式</h2><ul>
<li><code>:style=&quot;&#123;fontSize: xxx&#125;&quot;</code>其中xxx是动态值</li>
<li><code>:style=&quot;[a,b]&quot;</code>其中a、b是样式对象</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.basic</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.happy</span>&#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">4px</span> solid red;;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.644</span>);</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>,yellow,pink,orange,yellow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.sad</span>&#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">4px</span> dashed <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">197</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="attribute">background-color</span>: gray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.normal</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.atguigu1</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.atguigu2</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.atguigu3</span>&#123;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">	<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">		</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">            <span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">            <span class="attr">classArr</span>:[<span class="string">&#x27;atguigu1&#x27;</span>,<span class="string">&#x27;atguigu2&#x27;</span>,<span class="string">&#x27;atguigu3&#x27;</span>],</span><br><span class="line">            <span class="attr">classObj</span>:&#123;</span><br><span class="line">                <span class="attr">atguigu1</span>:<span class="literal">false</span>,</span><br><span class="line">                <span class="attr">atguigu2</span>:<span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">styleObj</span>:&#123;</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">                <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">styleObj2</span>:&#123;</span><br><span class="line">                <span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">styleArr</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">                    <span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">backgroundColor</span>:<span class="string">&#x27;gray&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="title function_">changeMood</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="string">&#x27;normal&#x27;</span>]</span><br><span class="line">                <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">3</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">mood</span> = arr[index]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><ul>
<li>写法：<ol>
<li><code>v-if=&quot;表达式&quot;</code></li>
<li><code>v-else-if=&quot;表达式&quot;</code></li>
<li><code>v-else</code></li>
</ol>
</li>
<li>适用于：切换频率较低的场景</li>
<li>特点：不展示的DOM元素直接被移除</li>
<li>注意：<code>v-if</code>可以和<code>v-else-if</code>、<code>v-else</code>一起使用，但要求结构不能被打断</li>
</ul>
<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><ul>
<li>写法：<code>v-show=&quot;表达式&quot;</code></li>
</ul>
<ul>
<li>适用于：切换频率较高的场景</li>
<li>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</li>
</ul>
<blockquote>
<p>使用v-if时，元素可能无法获取到，而使用v-show一定可以获取到</p>
</blockquote>
<h1 id="列表渲染-（v-for）"><a href="#列表渲染-（v-for）" class="headerlink" title="列表渲染 （v-for）"></a>列表渲染 （v-for）</h1><p><code>&lt;li v-for=&quot;(item, index) in xxx&quot; :key=&quot;yyy&quot;&gt;</code>，其中key可以是index，也可以是遍历对象的唯一标识</p>
<p>可遍历：数组、对象、字符串（用的少）、指定次数（用的少）</p>
<h2 id="key的作用和原理"><a href="#key的作用和原理" class="headerlink" title="key的作用和原理"></a>key的作用和原理</h2><p><img src="https://tu.sunning.fit/i/2022/07/06/62c547de2c78f.png" alt="image-20220528230624422"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c547e2e51bd.png" alt="image-20220528230640627"></p>
<p>虚拟DOM中key的作用：key是虚拟DOM中对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p>
<p>对比规则：</p>
<p>旧虚拟DOM中找到了与新虚拟DOM相同的key：</p>
<p>若虚拟DOM中内容没变, 直接使用之前的真实DOM<br>若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM<br>旧虚拟DOM中未找到与新虚拟DOM相同的key：创建新的真实DOM，随后渲染到到页面</p>
<p>用index作为key可能会引发的问题：</p>
<p>若对数据进行逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低<br>若结构中还包含输入类的DOM：会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题<br>开发中如何选择key?</p>
<p>最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值<br>如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表，使用index作为key是没有问题的</p>
<h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">	<span class="title function_">filPersons</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">filPersons</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sortType</span>)&#123;</span><br><span class="line">        arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1, p2</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> ===<span class="number">1</span> ? p2.<span class="property">age</span>-p1.<span class="property">age</span> : p1.<span class="property">age</span>-p2.<span class="property">age</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>数字排序（数字和升序）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> points = [<span class="number">40</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">25</span>,<span class="number">10</span>];</span><br><span class="line">points.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a-b&#125;);</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="Vue数据监视"><a href="#Vue数据监视" class="headerlink" title="Vue数据监视"></a>Vue数据监视</h1><p>vue会监视所有层次的数据</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过setter实现数据监控，且要在new  Vue的时候就传入要监测的数据</p>
<h2 id="对后添加的数据没有响应式的解决方法："><a href="#对后添加的数据没有响应式的解决方法：" class="headerlink" title="对后添加的数据没有响应式的解决方法："></a>对后添加的数据没有响应式的解决方法：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(target,propertyName/index,value)</span><br><span class="line">vm.$set(target,propertyName/index,value)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：</p>
<p><code>Vue.set()</code> 和 <code>vm.$set()</code> 不能给vm 或 vm的根数据对象（data等） 添加属性</p>
</blockquote>
<p>在vue中修改数组中的某一个元素一定要用如下方法：</p>
<ol>
<li>使用这些API：<code>push()</code>、<code>pop()</code>、<code>shift()</code>、<code>unshift()</code>、<code>splice()</code>、<code>sort()</code>、<code>reverse()</code></li>
<li><code>Vue.set()</code> 或 <code>vm.$set()</code></li>
</ol>
<h1 id="表单数据收集"><a href="#表单数据收集" class="headerlink" title="表单数据收集"></a>表单数据收集</h1><ul>
<li><p>若：<input type="text"/>，则v-model收集的是value值，用户输入的内容就是value值</p>
</li>
<li><p>若：<input type="radio"/>，则v-model收集的是value值，且要给标签配置value属性</p>
</li>
<li><p>若：<input type="checkbox"/><br>没有配置value属性，那么收集的是checked属性（勾选 or 未勾选，是布尔值）<br>配置了value属性：</p>
<p>v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）<br>v-model的初始值是数组，那么收集的就是value组成的数组</p>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vue基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Web APIs</title>
    <url>/2022/07/21/Web%20APIs/</url>
    <content><![CDATA[<h1 id="Web-API介绍"><a href="#Web-API介绍" class="headerlink" title="Web API介绍"></a>Web API介绍</h1><h2 id="API概念"><a href="#API概念" class="headerlink" title="API概念"></a>API概念</h2><p>API（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，无需理解其内部工作机制细节，只需直接调用使用即可。</p>
<h2 id="Web-API的概念"><a href="#Web-API的概念" class="headerlink" title="Web  API的概念"></a>Web  API的概念</h2><p>​	Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API ( BOM 和 DOM )。</p>
<p>​	现阶段我们主要针对于浏览器讲解常用的 API , 主要针对浏览器做交互效果。比如我们想要浏览器弹出一个警示框， 直接使用 alert(‘弹出’)</p>
<p>​	MDN 详细 API : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p>
<p>​	因为 Web API 很多，所以我们将这个阶段称为 Web APIs。</p>
<p>​	此处的 Web API 特指浏览器提供</p>
<p>Web API 一般都有输入和输出（函数的传参和返回值），Web API 很多都是方法（函数）</p>
<h1 id="DOM介绍"><a href="#DOM介绍" class="headerlink" title="DOM介绍"></a>DOM介绍</h1><h2 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h2><p>​	文档对象模型（Document Object Model，简称DOM），是 <a href="https://baike.baidu.com/item/W3C">W3C</a> 组织推荐的处理<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A9%E5%B1%95%E7%BD%AE%E6%A0%87%E8%AF%AD%E8%A8%80">可扩展标记语言</a>（html或者xhtml）的标准<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3">编程接口</a>。W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p>
<blockquote>
<p>DOM是W3C组织制定的一套处理 html和xml文档的规范，所有的浏览器都遵循了这套标准。</p>
</blockquote>
<h2 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h2><p><img src="https://tu.sunning.fit/i/2022/05/01/626e3b9905500.png" alt="1550731974575"></p>
<p>DOM树 又称为文档树模型，把文档映射成树形结构，通过节点对象对其处理，处理的结果可以加入到当前的页面。</p>
<ul>
<li>文档：一个页面就是一个文档，DOM中使用document表示</li>
<li>节点：网页中的所有内容，在文档树中都是节点（标签、属性、文本、注释等），使用node表示</li>
<li>标签节点：网页中的所有标签，通常称为元素节点，又简称为“元素”，使用element表示</li>
</ul>
<p><strong>DOM把以上内容都看做对象</strong></p>
<p><img src="https://tu.sunning.fit/i/2022/05/09/6278783dd6168.png" alt="image-20220509101107588"></p>
<h1 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h1><p>为什么要获取页面元素？</p>
<p>例如：我们想要操作页面上的某部分(显示&#x2F;隐藏，动画)，需要先获取到该部分对应的元素，再对其进行操作。</p>
<h2 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">语法：<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id)</span><br><span class="line">作用：根据<span class="variable constant_">ID</span>获取元素对象</span><br><span class="line">参数：id值，区分大小写的 *字符串*</span><br><span class="line">返回值：元素对象 或 <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2019-9-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 因为我们文档页面从上往下加载，所以先得有标签 所以我们script写到标签的下面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> timer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;time&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.dir 打印我们返回的元素对象 更好的查看里面的属性和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(timer);  <span class="comment">//会返回很多的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="根据标签名获取元素"><a href="#根据标签名获取元素" class="headerlink" title="根据标签名获取元素"></a>根据标签名获取元素</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：document.getElementsByTagName(&#x27;标签名&#x27;) 或者 element.getElementsByTagName(&#x27;标签名&#x27;) </span><br><span class="line">作用：根据标签名获取元素对象</span><br><span class="line">参数：标签名</span><br><span class="line">返回值：元素对象集合（伪数组，数组元素是元素对象）</span><br></pre></td></tr></table></figure>

<p><strong>案例代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 我们想要依次打印里面的元素对象我们可以采取遍历的方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. element.getElementsByTagName()  可以得到这个元素里面的某些标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;nav&#x27;</span>); <span class="comment">// 这个获得nav 元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> navLis = nav.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(navLis);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>注意：getElementsByTagName()获取到是动态集合，即：当页面增加了标签，这个集合中也就增加了元素。</p>
<h2 id="H5新增获取元素方式"><a href="#H5新增获取元素方式" class="headerlink" title="H5新增获取元素方式"></a>H5新增获取元素方式</h2><p><img src="https://tu.sunning.fit/i/2022/05/01/626e3ba064d83.png" alt="1550733518278"></p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e3ba5dfb09.png" alt="1550733734425"></p>
<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(boxs);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. querySelector 返回指定选择器的第一个元素对象  切记 里面的选择器需要加符号 .box  #nav</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(firstBox);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nav&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(nav);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(li);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> allBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(allBox);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="获取特殊元素（body，html）"><a href="#获取特殊元素（body，html）" class="headerlink" title="获取特殊元素（body，html）"></a>获取特殊元素（body，html）</h2><p><img src="https://tu.sunning.fit/i/2022/05/01/626e3baca49c3.png" alt="1550733794816"></p>
<h1 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p> <strong>触发— 响应机制</strong></p>
<h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ul>
<li>事件源（谁）：触发事件的元素</li>
<li>事件类型（什么事件）： 例如 click 点击事件</li>
<li>事件处理程序（做啥）：事件触发后要执行的代码(函数形式)，事件处理函数</li>
</ul>
<p>例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>唐伯虎<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 点击一个按钮，弹出对话框</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//(1) 事件源 事件被触发的对象   谁  按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//(3) 事件处理程序  通过一个函数赋值的方式 完成</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&#x27;点秋香&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="执行事件的步骤"><a href="#执行事件的步骤" class="headerlink" title="执行事件的步骤"></a>执行事件的步骤</h3><p>1.获取事件源</p>
<p>2.注册事件（绑定事件）</p>
<p>3.添加事件处理程序（采取函数赋值形式）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 执行事件步骤</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 点击div 控制台输出 我被选中了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 获取事件源</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.绑定事件 注册事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// div.onclick </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3.添加事件处理程序 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被选中了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="常见鼠标事件"><a href="#常见鼠标事件" class="headerlink" title="常见鼠标事件"></a>常见鼠标事件</h3><p><img src="https://tu.sunning.fit/i/2022/05/01/626e3bb3647a5.png" alt="1550734506084"></p>
<h1 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h1><h2 id="改变元素内容（获取或设置）"><a href="#改变元素内容（获取或设置）" class="headerlink" title="改变元素内容（获取或设置）"></a>改变元素内容（获取或设置）</h2><p><img src="https://tu.sunning.fit/i/2022/05/01/626e3bb8c9b9c.png" alt="1550735016756"></p>
<p><strong>innerText改变元素内容</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>显示当前系统时间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>某个时间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 当我们点击了按钮，  div里面的文字会发生变化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 获取元素 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.注册事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// div.innerText = &#x27;2019-6-6&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            div.<span class="property">innerHTML</span> = <span class="title function_">getDate</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">getDate</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 我们写一个 2019年 5月 1日 星期三</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> dates = date.<span class="title function_">getDate</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> day = date.<span class="title function_">getDay</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日 &#x27;</span> + arr[day];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p><strong>innerText和innerHTML的区别</strong></p>
<ul>
<li>获取内容时的区别：</li>
</ul>
<p>​	innerText会去除空格和换行，而innerHTML会保留空格和换行</p>
<ul>
<li>设置内容时的区别：</li>
</ul>
<p>​	innerText不会识别html，而innerHTML会识别</p>
<p>即innerHTML是可以<strong>用HTML语言来写的</strong>，innertext输入什么就是什么，innertext还会把有html的样式一并输出出来</p>
<p><strong>例子：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是文字</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// innerText 和 innerHTML的区别 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. innerText 不识别html标签 非标准  去除空格和换行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// div.innerText = &#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. innerHTML 识别html标签 W3C标准 保留空格和换行的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 这两个属性是可读写的  可以获取元素里面的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h2><h3 id="常用元素"><a href="#常用元素" class="headerlink" title="常用元素"></a>常用元素</h3><ol>
<li><p>innerText,innerHTML 改变元素内容</p>
</li>
<li><p>src,href</p>
</li>
<li><p>id,alt,title</p>
</li>
</ol>
<h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h3><p><strong>表单元素内容不能用innerHTML来获得，因为不是常用元素</strong></p>
<p>利用dom可以获得如下表单元素的属性</p>
<p>type,value 内容,checked,selected,disables</p>
<blockquote>
<p>表单元素中有一些属性如：disabled、checked、selected，元素对象的这些属性的值是布尔型。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">        <span class="comment">// 2. 注册事件 处理程序</span></span><br><span class="line">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 表单里面的值 文字内容是通过 value 来修改的</span></span><br><span class="line">            input.<span class="property">value</span> = <span class="string">&#x27;被点击了&#x27;</span>;</span><br><span class="line">            <span class="comment">// 如果想要某个表单被禁用 不能再点击 disabled  我们想要这个按钮 button禁用</span></span><br><span class="line">            <span class="comment">// btn.disabled = true;</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// this 指向的是事件函数的调用者 btn</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>this 挺方便的</p>
<h3 id="样式属性操作"><a href="#样式属性操作" class="headerlink" title="样式属性操作"></a>样式属性操作</h3><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>
<h4 id="方式一：操作style属性"><a href="#方式一：操作style属性" class="headerlink" title="方式一：操作style属性"></a>方式一：操作style属性</h4><blockquote>
<p>元素对象的style属性也是一个对象！</p>
<p>元素对象.style.样式属性 &#x3D; 值;</p>
</blockquote>
<blockquote>
<p>js里面的样式命名采用驼峰命名法，比如fontSize,backgroundColor</p>
</blockquote>
<blockquote>
<p>js 修改style样式操作，产生的是行内样式，css权重所占比例比较高</p>
</blockquote>
<p>循环改变精灵图背景</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;lis.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> index=i*<span class="number">44</span>;</span><br><span class="line">    lis[i].<span class="property">style</span>.<span class="property">backgroundPosition</span>=<span class="string">&#x27;0 -&#x27;</span>+index+<span class="string">&#x27;px&#x27;</span>; <span class="comment">//这样得到的是个数字哦</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改颜色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xxx.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&#x27;purple&#x27;</span></span><br></pre></td></tr></table></figure>

<p>修改字体大小</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xxx.<span class="property">style</span>.<span class="property">fontSize</span>=<span class="number">40</span>+<span class="string">&#x27;px&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="方式二：操作className属性"><a href="#方式二：操作className属性" class="headerlink" title="方式二：操作className属性"></a>方式二：操作className属性</h4><blockquote>
<p>因为class是关键字，所以用className属性</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">className</span>=<span class="string">&#x27;first(增加的类名) 原来他的类名&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><table>
<thead>
<tr>
<th>操作</th>
<th>左右</th>
</tr>
</thead>
<tbody><tr>
<td>xxx.onfocus</td>
<td>光标在输入框里面 获得焦点</td>
</tr>
<tr>
<td>xxx.onblur</td>
<td>失去焦点</td>
</tr>
<tr>
<td>xxx.onclick</td>
<td>点击</td>
</tr>
<tr>
<td>xxx.onmouseover</td>
<td>鼠标经过</td>
</tr>
<tr>
<td>xxx.onmouseout</td>
<td>鼠标离开</td>
</tr>
</tbody></table>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="排他操作"><a href="#排他操作" class="headerlink" title="排他操作"></a>排他操作</h2><p><img src="https://tu.sunning.fit/i/2022/05/01/626e3bc5b8156.png" alt="1550914482628"></p>
<p>如果有同一组元素，我们想要某一个元素实现某种样式， 需要用到循环的排他思想算法：</p>
<ol>
<li><p>所有元素全部清除样式（干掉其他人）</p>
</li>
<li><p>给当前元素设置样式 （留下我自己）</p>
</li>
<li><p>注意顺序不能颠倒，<strong>首先干掉其他人，再设置自己</strong></p>
</li>
</ol>
<h2 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h2><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><p><strong>表里面有引号的记得写引号</strong></p>
<table>
<thead>
<tr>
<th>表达</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>element.属性</td>
<td>获取内置属性值（元素本身自带的属性）</td>
</tr>
<tr>
<td>element.getAttribute(‘属性’)</td>
<td>获得自定义的属性（我们程序员自定义的属性）</td>
</tr>
<tr>
<td>element.setAttribute(‘属性’,’想要变成的属性值’)</td>
<td></td>
</tr>
<tr>
<td>element.removeAttribute(‘属性’)</td>
<td>移除属性</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>例子：tab栏切换</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取元素</span></span><br><span class="line">    <span class="keyword">var</span> tab_list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab_list&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> lis = tab_list.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>);</span><br><span class="line">    <span class="comment">// for循环，给选项卡绑定点击事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 开始给5个小li 设置索引号 </span></span><br><span class="line">        lis[i].<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i);</span><br><span class="line">        lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 1. 上的模块选项卡，当前这一个底色会是红色，其余不变（排他思想）</span></span><br><span class="line">            <span class="comment">// 干掉所有人 其余的li清除 class 这个类</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                lis[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 留下我自己 </span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line">            <span class="comment">// 2. 下面的显示内容模块</span></span><br><span class="line">            <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">            <span class="comment">// 干掉所有人 让其余的item 这些div 隐藏</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                items[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 留下我自己 让对应的item 显示出来</span></span><br><span class="line">            items[index].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>





<h3 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h3><p>一句话加上个data-作为前缀即可 其他的推荐用上面的写法</p>
<p>自定义属性目的：<strong>是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。</strong></p>
<p>比如tab栏切换，没有必要从数据库读数据再显示出来，直接放在网页里面即可</p>
<p>自定义属性获取是通过getAttribute(‘属性’) 获取</p>
<p>但是有些自定义属性很容易引起歧义，不容易判断是元素的内置属性还是自定义属性</p>
<p>所以直接统一自定义属性的名称用 data-开头</p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e3bcf9a5fd.png" alt="1550915798516"></p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e3bd617be3.png" alt="1550915815571"></p>
<p>获取自定义属性H5新增方法</p>
<p>xxx.dataset 专门获取自定义属性 .index获取自定义属性的 data-index属性</p>
<p>如果自定义属性里面有多个用 - 链接的单词，我们获取的时候用驼峰命名法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-list-name&#x27;</span>,<span class="number">20</span>)  <span class="comment">//设置自定义属性  </span></span><br><span class="line"></span><br><span class="line">div.<span class="property">dataset</span>[<span class="string">&#x27;listName&#x27;</span>];   <span class="comment">//获取自定义属性</span></span><br></pre></td></tr></table></figure>





<h2 id="例子：tab切换"><a href="#例子：tab切换" class="headerlink" title="例子：tab切换"></a>例子：tab切换</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">978px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab_list</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tab_list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.select</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>:bisque;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab_list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;select&quot;</span>&gt;</span>商品介绍<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>规格与包装<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>售后保障<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>商品评价<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机社区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab_con&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display : block&quot;</span>&gt;</span></span><br><span class="line">                商品介绍模块内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                规格与包装模块内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                售后保障模块内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                商品评价（50000）模块内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                手机社区模块内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tab_list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab_list&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tab_list);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> myLi = tab_list.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(myLi);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> myItem=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;myLi.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            myLi[i].<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>,i);</span></span><br><span class="line"><span class="language-javascript">            myLi[i].<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;myLi.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    myLi[i].<span class="property">className</span>=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">className</span>=<span class="string">&quot;select&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> index=<span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;myItem.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    myItem[i].<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                myItem[index].<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><p>网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p>
<p>​	HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e3be0cdb28.png" alt="1550970944363"></p>
<p>节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p>
<ul>
<li><p>元素节点 nodeType&#x3D;1</p>
<p>就是标签的那些东西</p>
</li>
<li><p>属性节点 nodeType&#x3D;2</p>
<p>有了个属性</p>
</li>
<li><p>文本节点 nodeType&#x3D;3 (文本节点包含文字，空格，换行等等)</p>
<p>元素里面包着的东西</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;     <span class="comment">//ul和li之间的空格和换行也算是wf bf jp</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>123 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://tu.sunning.fit/i/2022/05/09/627869d1438fe.png" alt="image-20220509090933124"></p>
<h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><h4 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h4><table>
<thead>
<tr>
<th>语句</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>node.parentNode</td>
<td>某节点的父节点</td>
</tr>
<tr>
<td>parentNode.childNodes(标准)</td>
<td>所有子节点</td>
</tr>
<tr>
<td>parentNode.children</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="父级节点"><a href="#父级节点" class="headerlink" title="父级节点"></a>父级节点</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node.<span class="property">parentNode</span></span><br></pre></td></tr></table></figure>

<p>返回最近的一个<strong>父节点</strong></p>
<p>如果没有返回null</p>
<h4 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h4><p><strong>所有子节点</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentNode.<span class="title function_">childNodes</span>(标准)</span><br></pre></td></tr></table></figure>

<p>返回所有执行节点的子节点集合，即使更新的集合</p>
<p>返回值里面包含了所有的子节点，包括元素节点，文本节点等等，如果只想要元素节点，不推荐使用</p>
<p><img src="https://tu.sunning.fit/i/2022/05/09/62786e3ba060d.png" alt="image-20220509092825427"></p>
<p>一共7个节点</p>
<p><strong>子元素节点</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentNode.<span class="title function_">children</span>(非标准)</span><br></pre></td></tr></table></figure>

<p>只返回子元素节点，不返回其余节点</p>
<p>虽然是非标准，但是有各个浏览器的支持</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentNode.<span class="property">firstchild</span>  <span class="comment">//返回第一个子节点（范围是所有节点）</span></span><br><span class="line">parentNode.<span class="property">lastchild</span></span><br><span class="line"></span><br><span class="line">parentNode.<span class="property">firstElementChild</span> <span class="comment">//返回第一个元素节点</span></span><br><span class="line">parentNode.<span class="property">lastElementChild</span></span><br></pre></td></tr></table></figure>

<p>后面两种方法有兼容性问题，ie9以上才支持</p>
<p>上面的都不好用，好用的方法是这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentNode.<span class="property">children</span>[<span class="number">0</span>] 第一个子元素节点</span><br><span class="line">parentNode.<span class="property">children</span>[parentNode.<span class="property">children</span>.<span class="property">length</span>-<span class="number">1</span>]  最后一个</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(temp.<span class="property">children</span>); <span class="comment">// 返回的是 HTMLCollection[ul]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(temp.<span class="property">children</span>[<span class="number">0</span>]); <span class="comment">// 返回的是 ul标签</span></span><br></pre></td></tr></table></figure>



<h3 id="节点操作-1"><a href="#节点操作-1" class="headerlink" title="节点操作"></a>节点操作</h3><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>从node 节点中删除一个子节点，返回删除的节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node.<span class="title function_">removeChild</span>()</span><br></pre></td></tr></table></figure>

<h4 id="复制（克隆）节点"><a href="#复制（克隆）节点" class="headerlink" title="复制（克隆）节点"></a>复制（克隆）节点</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node.<span class="title function_">cloneNode</span>()</span><br></pre></td></tr></table></figure>

<p>方法返回调用该方法的节点的一个副本</p>
<p>如果括号里面的参数为空或者false,称为浅拷贝，只克隆复制节点本身，不克隆里面的子节点</p>
<p>如果括号里面的参数是true 是深度拷贝，复制节点本身和里面所有的子节点</p>
<h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tagName&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node.<span class="title function_">appendChild</span>(child)</span><br></pre></td></tr></table></figure>

<p>将一个节点添加掉指定副节点的子节点列表末尾，类似于css里面的after伪元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node.<span class="title function_">insertBdfore</span>(child,指定元素)</span><br></pre></td></tr></table></figure>

<p>将一个节点添加到父节点的指定子节点的前面，类似css里面的before伪元素</p>
<h3 id="创建元素的三种方式"><a href="#创建元素的三种方式" class="headerlink" title="创建元素的三种方式"></a>创建元素的三种方式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>()</span><br><span class="line">element.<span class="property">innerHTML</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">createElement</span></span><br></pre></td></tr></table></figure>

<p>document.write 直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘</p>
<p>innerHTML 是将内容写入某个DOM节点，不会导致页面全部重绘</p>
<p>innerHTML创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</p>
<p>createElement() 创建多个元素效率稍微低一点点，但是结构更清晰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="comment">// 三种创建元素方式区别 </span></span><br><span class="line">       <span class="comment">// 1. document.write() 创建元素  如果页面文档流加载完毕，再调用这句话会导致页面重绘</span></span><br><span class="line">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2. innerHTML 创建元素</span></span><br><span class="line">       <span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            inner.<span class="property">innerHTML</span> += <span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">var</span> arr = [];   <span class="comment">//创建一个数组</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;  </span><br><span class="line">           arr.<span class="title function_">push</span>(<span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>);  </span><br><span class="line">       &#125;</span><br><span class="line">       inner.<span class="property">innerHTML</span> = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);  <span class="comment">//用字符串拼接在一起，分割符用&quot; &quot;（空格） </span></span><br><span class="line">       <span class="comment">// 3. document.createElement() 创建元素</span></span><br><span class="line">       <span class="keyword">var</span> create = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.create&#x27;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">           create.<span class="title function_">appendChild</span>(a);</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="效率对比"><a href="#效率对比" class="headerlink" title="效率对比"></a>效率对比</h4><p>innerHTML字符串拼接方式（效率低）</p>
<p>createElement方式（效率一般）</p>
<p>innerHTML数组方式（效率高）</p>
<h2 id="Node和Element区别"><a href="#Node和Element区别" class="headerlink" title="Node和Element区别"></a>Node和Element区别</h2><table>
<thead>
<tr>
<th>node提供的节点</th>
<th>element提供的节点</th>
</tr>
</thead>
<tbody><tr>
<td>childNodes</td>
<td>children</td>
</tr>
<tr>
<td>parentNode</td>
<td>parentElement</td>
</tr>
<tr>
<td>nextSibling  &#x2F;&#x2F;返回当前节点的后面一个兄弟节点</td>
<td>nextElementSibling</td>
</tr>
<tr>
<td>previousSibling</td>
<td>previousElementSibling</td>
</tr>
</tbody></table>
<p>node提供的方法返回的都是node,element提供的方法返回的都是element</p>
<p>node是一个接口，各种类型的DOM API对象都会从这个接口继承</p>
<p><img src="https://tu.sunning.fit/i/2022/05/09/6278748d9c59d.png" alt="image-20220509095523325"></p>
<p>node.type&#x3D;2 是属性attr</p>
<p>element继承自node,可以使用node的方法</p>
<p>NodeList和HTMLCollection</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xxx.<span class="property">children</span> 返回的就是<span class="title class_">HTMLCollection</span></span><br></pre></td></tr></table></figure>

<p>NodeList和HTMLCollection都不是真正的数组</p>
<p>但是可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xxx.<span class="property">children</span>[<span class="number">0</span>] <span class="comment">//返回第一个Element元素</span></span><br></pre></td></tr></table></figure>





<p>例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果xxx选择的是div</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xxx.<span class="property">childNodes</span> <span class="comment">//返回的是NodeList(3) [text, ul, text]</span></span><br><span class="line"></span><br><span class="line">xxx.<span class="property">children</span>   <span class="comment">//返回的是HTMLCollection [ul]</span></span><br></pre></td></tr></table></figure>







<h2 id="DOM核心总结"><a href="#DOM核心总结" class="headerlink" title="DOM核心总结"></a>DOM核心总结</h2><p><img src="https://tu.sunning.fit/i/2022/05/01/626e3bededd6f.png" alt="1551164669434"></p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e3bf16cd3b.png" alt="1551164715018"></p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//document.write</span></span><br><span class="line">innerHTML   <span class="comment">//用数组拼接效率最高</span></span><br><span class="line">createElement</span><br></pre></td></tr></table></figure>

<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">appendChild</span><br><span class="line">insertBefore</span><br></pre></td></tr></table></figure>

<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">removeChild</span><br></pre></td></tr></table></figure>

<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">src,href,title 修改元素属性</span><br><span class="line">innerHTML,innerText 修改普通元素内容</span><br><span class="line">value,type,disabled 修改表单元素</span><br><span class="line">style,className 修改元素样式</span><br></pre></td></tr></table></figure>

<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>主要是获取查询dom元素</p>
<p>DOM提供API方法 用法古老不推荐</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getElementByid,getElementByTagName</span><br></pre></td></tr></table></figure>

<p>H5提供的新方法 提倡</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">querySelector,querySelectorAll</span><br></pre></td></tr></table></figure>

<p>querySelector里面可以放所有的选择器</p>
<p>如果想要获取第1个li标签可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myLi=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;li:nth-child(1)&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>利用节点获取元素 提倡</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父 parentNode</span><br><span class="line">子 children</span><br><span class="line">兄 previousElementSibling</span><br><span class="line">   nextElementSibling</span><br></pre></td></tr></table></figure>

<p>选择兄弟再选择兄弟</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myLi.<span class="property">nextElementSibling</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack</title>
    <url>/2022/07/21/Webpack/</url>
    <content><![CDATA[<h1 id="webpack作用"><a href="#webpack作用" class="headerlink" title="webpack作用"></a>webpack作用</h1><blockquote>
<p>webpack本身是, node的一个第三方模块包, 用于打包代码</p>
<p>它是一个流行的前端项目构建工具（打包工具），体狗模块化支持，以及代码压缩混淆，js兼容性处理，性能优化等功能</p>
</blockquote>
<p><a href="https://webpack.docschina.org/">webpack官网</a></p>
<p>现代 javascript 应用程序的 <strong>静态模块打包器 (module bundler)</strong></p>
<p>把很多文件打包整合到一起, 缩小项目体积, 提高加载速度</p>
<p>左边是没有经过webpack打包之前的项目的状态</p>
<p><img src="https://tu.sunning.fit/i/2022/05/06/6275204ea0770.png" alt="image-20210207234927772"></p>
<p>其中功能:</p>
<ul>
<li><p>less&#x2F;sass -&gt; css</p>
</li>
<li><p>ES6&#x2F;7&#x2F;8 -&gt; ES5</p>
</li>
<li><p>html&#x2F;css&#x2F;js -&gt; 压缩合并</p>
</li>
</ul>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h3><p>看搭建博客的那篇博客</p>
<h2 id="全局安装webpack"><a href="#全局安装webpack" class="headerlink" title="全局安装webpack"></a>全局安装webpack</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure>

<p>如果出现</p>
<p><img src="https://tu.sunning.fit/i/2022/05/07/62761fbbd2faf.png" alt="image-20220507152855639"></p>
<p>输入no</p>
<p>然后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>

<p>然后用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br></pre></td></tr></table></figure>

<p>查看版本是否安装成功</p>
<h1 id="webpack基础使用"><a href="#webpack基础使用" class="headerlink" title="webpack基础使用"></a>webpack基础使用</h1><h2 id="webpack本地配置"><a href="#webpack本地配置" class="headerlink" title="webpack本地配置"></a>webpack本地配置</h2><blockquote>
<p>目标: 把src下的2个js文件, 打包到1个js中, 并输出到默认dist目录下</p>
</blockquote>
<p>默认入口: .&#x2F;src&#x2F;index.js</p>
<p>默认出口: .&#x2F;dist&#x2F;main.js</p>
<p>&#x3D;&#x3D;注意:路径上, 文件夹, 文件名不能叫webpack&#x2F;其他已知的模块名&#x3D;&#x3D;</p>
<ol>
<li><p>初始化包环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地安装依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>在webpack配置文件中初始化如下命令 创建名字是webpack.config.js的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">	mode: <span class="string">&#x27;development&#x27;</span>  //用来制定构建模式 development是开发者模式，比较快 上线的时候再制定成production</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置scripts(在package.json位置)    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scripts: &#123;</span><br><span class="line">	<span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack&quot;</span>   //把dev暴露在外面，之后run dev即可</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建目录src  因为webpack的默认js导入目录（入口）就是这个 </p>
</li>
<li><p>新建src&#x2F;add&#x2F;add.js - 定义求和函数导出  （把打包的引导文件放进去）（一般是 index.js）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&quot;jquery&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../js/page&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../css/base.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../css/page.css&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行打包命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev //这个dev和上面scripts脚本里面的相同</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="webpack-更新打包"><a href="#webpack-更新打包" class="headerlink" title="_webpack 更新打包"></a>_webpack 更新打包</h2><p>修改之后重新执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h2 id="webpack-入口和出口"><a href="#webpack-入口和出口" class="headerlink" title="webpack-入口和出口"></a>webpack-入口和出口</h2><blockquote>
<p>目标: 告诉webpack从哪开始打包, 打包后输出到哪里</p>
</blockquote>
<p>默认入口: .&#x2F;src&#x2F;index.js</p>
<p>默认出口: .&#x2F;dist&#x2F;main.js</p>
<p>webpack配置 - webpack.config.js(默认)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)   <span class="comment">//因为下面要传入的是路径，所以需要导入node.js中专门操作路径的模块</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;./src/main.js&quot;</span>）, <span class="comment">// 入口  必须传入绝对路径</span></span><br><span class="line">    <span class="attr">output</span>: &#123; </span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// 出口路径   必须传入绝对路径</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span> <span class="comment">// 出口文件名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>path是node里面处理目录的配置项，path.join(__dirname,xxxx)    dirname代表当前文件所处的绝对目录，后面写相对目录即可</p>
<h1 id="3-webpack-打包和加载器"><a href="#3-webpack-打包和加载器" class="headerlink" title="3. webpack 打包和加载器"></a>3. webpack 打包和加载器</h1><h2 id="打包流程图"><a href="#打包流程图" class="headerlink" title="打包流程图"></a>打包流程图</h2><p><img src="https://tu.sunning.fit/i/2022/05/07/6275d79ce72b0.png" alt="image-20210421125257233"></p>
<p>&#x3D;&#x3D;重点: 所有要被打包的资源都要跟入口产生直接&#x2F;间接的引用关系&#x3D;&#x3D;</p>
<blockquote>
<p>webpack就像一个角色, webpack.config.js是人物属性, 给它穿什么装备它就干什么活</p>
</blockquote>
<p>加载器文档</p>
<p><a href="https://webpack.docschina.org/loaders/">https://webpack.docschina.org/loaders/</a></p>
<h2 id="处理css文件"><a href="#处理css文件" class="headerlink" title="处理css文件"></a>处理css文件</h2><p>webpack默认只认识 js 文件和 json文件，所以需要loaders加载器, 可让webpack处理其他类型的文件, 打包到js中</p>
<ol>
<li><pre><code>npm i style-loader css-loader -D
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. webpack.config.js 配置  在module对象中去添加一个rules数组</span><br><span class="line"></span><br><span class="line">   &gt; rules是一个数组，用来存放所有的load规则</span><br><span class="line">   &gt;</span><br><span class="line">   &gt; test表示匹配的文件类型，use表示用什么文件进行处理</span><br><span class="line">   &gt;</span><br><span class="line">   &gt; test接受一个正则表达式</span><br><span class="line">   &gt;</span><br><span class="line">   &gt; ```sh</span><br><span class="line">   &gt; test: /\.css$/   </span><br></pre></td></tr></table></figure>
&gt;
&gt; `\.`表示匹配.这个符号  css$表示匹配以css结尾的文件类型
&gt;
&gt;  
&gt;
&gt; use数组中制定的loader顺序是固定的，多个loader当用的顺序是村后往前调用的
&gt;
&gt; <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">use: [ <span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br></pre></td></tr></table></figure>
&gt;
&gt; loader顺序固定，从后往前调用，先调用的是css-loader然后再调用style-loader

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// ...其他代码</span></span><br><span class="line">    <span class="attr">module</span>: &#123;    </span><br><span class="line">        <span class="attr">rules</span>: [ <span class="comment">// loader的规则</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 匹配所有的css文件</span></span><br><span class="line">            <span class="comment">// use数组里从右向左运行</span></span><br><span class="line">            <span class="comment">// 先用 css-loader 让webpack能够识别 css 文件的内容并打包</span></span><br><span class="line">            <span class="comment">// 再用 style-loader 将样式, 把css插入到dom中</span></span><br><span class="line">            <span class="attr">use</span>: [ <span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>把需要打包的css放入index文件夹里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/index.css&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="处理less文件"><a href="#处理less文件" class="headerlink" title="处理less文件"></a>处理less文件</h2><p>下载依赖包</p>
<ol>
<li><p>和css有关的都要先装进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i style-loader css-loader less less-loader -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>webpack.config.js 配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [ <span class="comment">// loader的规则</span></span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    	<span class="comment">// 使用less-loader, 让webpack处理less文件, 内置还会用less翻译less代码成css内容</span></span><br><span class="line">        <span class="attr">use</span>: [ <span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果要打包less就不要让less文件自动生成css了</p>
<h2 id="处理scss文件"><a href="#处理scss文件" class="headerlink" title="处理scss文件"></a>处理scss文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i style-loader css-loader node-sass sass-loader -D</span><br></pre></td></tr></table></figure>

<p>webpack.config.js 配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [ <span class="comment">// loader的规则</span></span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">    	<span class="comment">// 使用less-loader, 让webpack处理less文件, 内置还会用less翻译less代码成css内容</span></span><br><span class="line">        <span class="attr">use</span>: [ <span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="配置postCSS自动添加css的兼容性前缀"><a href="#配置postCSS自动添加css的兼容性前缀" class="headerlink" title="配置postCSS自动添加css的兼容性前缀"></a>配置postCSS自动添加css的兼容性前缀</h2><p>通过postCSS自动添加兼容性前缀</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure>

<p>在根目录创建postcss的配置文件 postcss.config.js 并初始化如下配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer=<span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>) <span class="comment">//导入自动添加前缀的插件</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;<span class="attr">plugins</span>:[autoprefixer]&#125; <span class="comment">//挂载插件</span></span><br></pre></td></tr></table></figure>

<p>在webpack.config.js的module–&gt;rules数组中，修改css的loader规则如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: [ <span class="comment">// loader的规则</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 匹配所有的css文件</span></span><br><span class="line">            <span class="comment">// use数组里从右向左运行</span></span><br><span class="line">            <span class="comment">// 先用 css-loader 让webpack能够识别 css 文件的内容并打包</span></span><br><span class="line">            <span class="comment">// 再用 style-loader 将样式, 把css插入到dom中</span></span><br><span class="line">            <span class="attr">use</span>: [ <span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>,<span class="string">&quot;postcss-loader&quot;</span>]</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>









<h2 id="处理图片和字体文件"><a href="#处理图片和字体文件" class="headerlink" title="处理图片和字体文件"></a>处理图片和字体文件</h2><blockquote>
<p>用asset module方式(webpack5版本新增)</p>
</blockquote>
<p><a href="https://webpack.docschina.org/guides/asset-modules/">asset module文档</a></p>
<p>如果使用的是webpack5版本的, 直接配置在webpack.config.js - 的 rules里即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果用的是webpack4及以前的, 看下面</p>
<p><a href="https://webpack.docschina.org/loaders/url-loader/">url-loader文档</a></p>
<p><a href="https://webpack.docschina.org/loaders/file-loader/">file-loader文档</a></p>
<ol>
<li><p>下载依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i url-loader file-loader -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>webpack.config.js 配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.png|jpg|gif|jpeg|bmp|ttf|eot|svg|woff|woff2$/</span>,</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;url-loader ?limit=16940&#x27;</span>, </span><br><span class="line">        <span class="comment">//?是loader的参数项 limit用来指定图片的大小，单位是字节，只有小于limit大小的图片，才会被转换成base64</span></span><br><span class="line">        <span class="comment">// 匹配文件, 尝试转base64字符串打包到js中</span></span><br><span class="line">      <span class="comment">// 配置limit, 超过8k, 不转, file-loader复制, 随机名, 输出文件</span></span><br><span class="line">      <span class="comment">/*options: &#123;</span></span><br><span class="line"><span class="comment">        limit: 8 * 1024,</span></span><br><span class="line"><span class="comment">      &#125;,*/</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图片转成 base64 字符串</p>
<ul>
<li>好处就是浏览器不用发请求了，直接可以读取</li>
<li>坏处就是如果图片太大，再转<code>base64</code>就会让图片的体积增大 30% 左右</li>
</ul>
</li>
</ol>
<blockquote>
<p>总结:  url-loader 把文件转base64 打包进js中, 会有30%的增大, file-loader 把文件直接复制输出</p>
</blockquote>
<h2 id="webpack加载文件优缺点"><a href="#webpack加载文件优缺点" class="headerlink" title="webpack加载文件优缺点"></a>webpack加载文件优缺点</h2><p>图片转成 base64 字符串</p>
<ul>
<li>好处就是浏览器不用发请求了，直接可以读取</li>
<li>坏处就是如果图片太大，再转<code>base64</code>就会让图片的体积增大 30% 左右</li>
</ul>
<h2 id="处理字体文件"><a href="#处理字体文件" class="headerlink" title="处理字体文件"></a>处理字体文件</h2><p>webpack5使用这个配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="comment">// webpack5默认内部不认识这些文件, 所以当做静态资源直接输出即可</span></span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">    <span class="attr">generator</span>: &#123;</span><br><span class="line">    	<span class="attr">filename</span>: <span class="string">&#x27;font/[name].[hash:6][ext]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="处理高版本js语法-babel"><a href="#处理高版本js语法-babel" class="headerlink" title="处理高版本js语法 babel"></a>处理高版本js语法 babel</h2><p>写代码演示: 高版本的js代码(箭头函数), 打包后, 直接原封不动打入了js文件中, 遇到一些低版本的浏览器就会报错</p>
<p>原因: <strong>webpack 默认仅内置了 模块化的 兼容性处理</strong>   <code>import  export</code></p>
<p>babel 的介绍 &#x3D;&gt; 用于处理高版本 js语法 的兼容性  <a href="https://www.babeljs.cn/">babel官网</a></p>
<p>解决: 让webpack配合babel-loader 对js语法做处理</p>
<p><a href="https://webpack.docschina.org/loaders/babel-loader/">babel-loader文档</a></p>
<ol>
<li><p>安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D babel-loader @babel/core @babel/runtime -D //转换器相关的包</span><br><span class="line">npm i @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-prposal-class-properties -D //语法插件相关的包</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置规则 webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,   <span class="comment">//排除项，表示不需要处理node_modules的js文件</span></span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>] <span class="comment">// 预设:转码规则(用bable开发环境本来预设的)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在根目录创建babel配置文件 babel.config.js 并初始化配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">	presets:[<span class="string">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class="line">	plugins:[<span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>,<span class="string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>babel-loader 可以让webpack 对高版本js语法做降级处理后打包</p>
</blockquote>
<h1 id="webpack-开发服务器"><a href="#webpack-开发服务器" class="headerlink" title="webpack 开发服务器"></a>webpack 开发服务器</h1><h2 id="webpack-dev-server自动打包"><a href="#webpack-dev-server自动打包" class="headerlink" title="webpack-dev-server自动打包"></a>webpack-dev-server自动打包</h2><blockquote>
<p>目标: 启动本地服务, 可实时更新修改的代码, 打包<strong>变化代码</strong>到内存中, 然后直接提供端口和网页访问</p>
</blockquote>
<ol>
<li><p>下载包  安装支持项目自动打包的工具</p>
<p>注意一定带上版本号，否则容易出现问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack-dev-server@3.11.2 -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>package.json添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack-dev-server&quot;</span>   <span class="comment">//把dev脚本修改成上面打包的工具</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在webpack.config.js中添加如下配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">	open:<span class="literal">true</span>,</span><br><span class="line">	port:3000,</span><br><span class="line">	compress:<span class="literal">true</span>,</span><br><span class="line">	contentBase:<span class="string">&#x27;./src&#x27;</span>,</span><br><span class="line">	hot:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>运行命令-启动webpack开发服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>执行命令之后就会一直启动，如果被打包的东西里面有更改，就会自动打包文件</p>
<p>但是这些文件是缓存在内存里面的，如果想要变成静态的文件给别人使用，需要执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure>

<p>打包位置就是webpack.config.js里面output的默认路径</p>
</blockquote>
<p>webpack-dev-server 会启动一个实时打包的http服务器</p>
<p>这个的作用是时时检测变化，生成<strong>打包好的.js文件</strong>，文件默认放到项目的根目录中，<strong>是虚拟的，看不见的</strong></p>
<p>是不能直接看到html界面的，想要看到还需找到html去看或者</p>
<p>下面：</p>
<h2 id="html-webpack-plugin生成预览界面"><a href="#html-webpack-plugin生成预览界面" class="headerlink" title="html-webpack-plugin生成预览界面"></a>html-webpack-plugin生成预览界面</h2><ol>
<li><p>运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<p>安装生成预览界面的插件</p>
</li>
<li><p>修改webpack.config.js 文件头部区域，添加如下配置信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入生成预览页面的插件（require(&#x27;html-webpack-plugin&#x27;) ），得到构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span>=<span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>) </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">htmlPlugin</span>(这是自己起的名字)=<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;./html/page.html&#x27;</span> <span class="comment">//指定要用到的模板文件</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>  <span class="comment">//指定生成的文件名称，文件存在于内存之中，在目录中不显示</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改webpack.config.js文件向外暴露的配置对象，新增如下配置节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin] <span class="comment">//plugins数组是webpack打包期间会用到的一些插件列表   htmlPlugin是上面自己起的名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这样就能生成一个预览界面了，注意这个界面不是实际存在的界面，只是一个在内存中的预览界面</p>
<h2 id="webpack-dev-server配置"><a href="#webpack-dev-server配置" class="headerlink" title="webpack-dev-server配置"></a>webpack-dev-server配置</h2><ol>
<li><p>在webpack.config.js中添加服务器配置</p>
<p>更多配置参考这里: <a href="https://webpack.docschina.org/configuration/dev-server/#devserverafter">https://webpack.docschina.org/configuration/dev-server/#devserverafter</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// ...其他配置</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">port</span>: <span class="number">3000</span> <span class="comment">// 端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Webstorm配置</title>
    <url>/2022/07/21/Webstorm%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Webstorm配置"><a href="#Webstorm配置" class="headerlink" title="Webstorm配置"></a>Webstorm配置</h1><h2 id="配置自动格式化"><a href="#配置自动格式化" class="headerlink" title="配置自动格式化"></a>配置自动格式化</h2><p><a href="https://blog.csdn.net/qq_43549745/article/details/120188404">https://blog.csdn.net/qq_43549745/article/details/120188404</a></p>
<p>安装prettier在插件里面</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c548a63cbe8.png" alt="image-20220527155517233"></p>
<p>运行指令在对应的项目里安装prettier</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i --save-dev prettier</span><br></pre></td></tr></table></figure>



<p>settings搜pretter然后在prettier包里面改成项目的位置</p>
<p>接着工具，保存时的操作，重新格式化代码</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c548b09ead8.png" alt="image-20220527155618873"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Webstorm配置</tag>
      </tags>
  </entry>
  <entry>
    <title>arco 安装</title>
    <url>/2022/07/21/arco%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="换源和基本操作"><a href="#换源和基本操作" class="headerlink" title="换源和基本操作"></a>换源和基本操作</h1><p>注意，timeshift一定一定要装</p>
<p>安装第一步，把windows的快速启动关了</p>
<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>在 &#x2F;etc&#x2F;pacman.conf里面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$archsudo</span> </span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span> <span class="comment"># 中国科学技术大学开源镜像站</span></span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span> <span class="comment"># 清华大学开源软件镜像站</span></span><br><span class="line">Server = https://mirrors.hit.edu.cn/archlinuxcn/<span class="variable">$arch</span> <span class="comment"># 哈尔滨工业大学开源镜像站</span></span><br><span class="line">Server = https://repo.huaweicloud.com/archlinuxcn/<span class="variable">$arch</span> <span class="comment"># 华为开源镜像站</span></span><br></pre></td></tr></table></figure>

<h2 id="为archlinux选择国内镜像"><a href="#为archlinux选择国内镜像" class="headerlink" title="为archlinux选择国内镜像"></a>为archlinux选择国内镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman-mirrors --country China &amp;&amp; pacman -Syyu</span><br></pre></td></tr></table></figure>



<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="pacman和yay"><a href="#pacman和yay" class="headerlink" title="pacman和yay"></a>pacman和yay</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S package_name <span class="comment"># 安装软件包</span></span><br><span class="line">pacman -Ss <span class="comment"># 在同步数据库中搜索包，包括包的名称和描述</span></span><br><span class="line">sudo pacman -Syyu <span class="comment"># 升级系统。-yy：标记强制刷新、-u：标记升级动作</span></span><br><span class="line">sudo pacman -Rns package_name <span class="comment"># 删除软件包，及其所有没有被其他已安装软件包使用的依赖包</span></span><br><span class="line">sudo pacman -R package_name <span class="comment"># 删除软件包，保留其全部已经安装的依赖关系</span></span><br><span class="line">pacman -Qi package_name <span class="comment"># 检查已安装包的相关信息。-Q：查询本地软件包数据库</span></span><br><span class="line">pacman -Qdt <span class="comment"># 找出孤立包。-d：标记依赖包、-t：标记不需要的包、-dt：合并标记孤立包</span></span><br><span class="line">sudo pacman -Rns $(pacman -Qtdq) <span class="comment"># 删除孤立包</span></span><br><span class="line">sudo pacman -Fy <span class="comment"># 更新命令查询文件列表数据库</span></span><br><span class="line">pacman -F some_command <span class="comment"># 当不知道某个命令属于哪个包时，用来在远程软件包中查询某个命令属于哪个包（即使没有安装）</span></span><br><span class="line">pactree package_name <span class="comment"># 查看一个包的依赖树</span></span><br><span class="line"></span><br><span class="line">yay的特殊的命令</span><br><span class="line">yay <span class="comment"># 等同于 yay -Syu</span></span><br><span class="line">yay package_name <span class="comment"># 等同于 yay -Ss package_name &amp;&amp; yay -S package_name</span></span><br><span class="line">yay -Ps <span class="comment"># 打印系统统计信息</span></span><br><span class="line">yay -Yc <span class="comment"># 清理不需要的依赖</span></span><br></pre></td></tr></table></figure>

<h2 id="pacman清理-yay清理"><a href="#pacman清理-yay清理" class="headerlink" title="pacman清理 yay清理"></a>pacman清理 yay清理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -Rns $(pacman -Qtdq) <span class="comment"># 如上文所述，删除孤立软件包（常用）</span></span><br><span class="line">sudo pacman -Sc <span class="comment"># 删除当前未安装的所有缓存包和未使用的同步数据库（可选）</span></span><br><span class="line">sudo pacman -Scc <span class="comment"># 从缓存中删除所有文件，这是最激进的方法，不会在缓存文件夹中留下任何内容（一般不使用）</span></span><br><span class="line">paccache -r <span class="comment"># 删除已安装和未安装包的所有缓存版本，但最近 3 个版本除外</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf ~/.cache/yay <span class="comment">#清理 yay 的缓存目录：</span></span><br></pre></td></tr></table></figure>

<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>熟悉使用vim可以打开vimtutor进行训练</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:wq —— 保存退出</span><br><span class="line">:q! —— 不保存，强制退出</span><br><span class="line"><span class="built_in">dd</span> —— 删除一行</span><br><span class="line">2dd —— 删除两行</span><br><span class="line">gg —— 回到文本第一行</span><br><span class="line"><span class="built_in">shift</span> + g —— 转到文本最后一行</span><br><span class="line">/xxx —— 在文中搜索 xxx 内容。回车 Enter 搜索，按 n 键转到下一个</span><br><span class="line">?xxx —— 反向搜索</span><br></pre></td></tr></table></figure>

<h2 id="图标渐变色"><a href="#图标渐变色" class="headerlink" title="图标渐变色"></a>图标渐变色</h2><p>先 yay -S lolcat </p>
<p>neofetch | lolcat</p>
<h1 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo                                               </span><br><span class="line">yay -S elisa <span class="comment"># 轻量级的小型音乐播放器</span></span><br><span class="line">yay -S vlc <span class="comment"># 强大又小巧的视频播放器。</span></span><br><span class="line">yay -S typora-free <span class="comment"># 这也是因为近期Typora正式升级版本v1.0，就此转变为收费软件，如果不考虑支付费用的话暂时还是只能用v0.11.8这个最后的测试版。</span></span><br><span class="line">yay -S wps-office wps-office-mui-zh-cn ttf-wps-fonts <span class="comment"># WPS软件</span></span><br><span class="line">yay -S solaar logiops <span class="comment"># 安装相应的无线接收器管理软件和罗技鼠标驱动</span></span><br><span class="line">yay -S visual-studio-code-bin <span class="comment"># 其实可以直接安装code,二选一而已，我用起来感觉没什么区别。</span></span><br><span class="line">sudo pacman -S clion clion-cmake make clion-lldb clion-jre <span class="comment"># 安装Clion环境</span></span><br><span class="line">sudo pacman -S intellij-idea-ultimate-edition intellij-idea-ultimate-edition-jre <span class="comment"># 安装IntelliJ Idea</span></span><br><span class="line">sudo pacman -S flameshot <span class="comment"># 强大的截图软件                                                           </span></span><br><span class="line">yay -S fim <span class="comment"># 终端平台的图片查看器                                                           </span></span><br><span class="line">sudo pacman -S bat <span class="comment"># 具有语法高亮和Git集成的Cat类命令</span></span><br><span class="line">sudo pacman -S piper <span class="comment">#鼠标键位映射</span></span><br><span class="line">yay -S baidunetdisk  <span class="comment">#安装百度网盘，选择第二个基于 electron 的版本</span></span><br><span class="line">yay -S icalingua  <span class="comment">#qq</span></span><br><span class="line">sudo pacman -S pacman-contrib   <span class="comment">#安装可以使用packman额外的命令</span></span><br><span class="line">sudo pacman -S filelight <span class="comment">#查看磁盘占用情况的软件</span></span><br><span class="line">sudo pacman -S unarchiver <span class="comment">#windwos下的一些软件可能会有解压的问题，解压用   unar xxx.zip命令即可</span></span><br><span class="line">sudo pacman -S ktimer   <span class="comment">#倒计时软件</span></span><br><span class="line">yay -S listen1-desktop-appimage  <span class="comment">#听歌不要钱 </span></span><br><span class="line">yay -S mindmaxter-cn <span class="comment">#思维导图软件 #不交钱不如xmind</span></span><br><span class="line">yay -S xmimd</span><br></pre></td></tr></table></figure>

<p>Plasma Integration by KDE 火狐浏览器里面的设置</p>
<p>火焰截图安装完记得设置下快捷键，我设置的是f1,f2设置成共同的帮助快捷键，默认的截图存储位置在~&#x2F;Pictures里面</p>
<p>Okular是自带的pdf和电子书阅读器</p>
<p>yay -S icalingua这个会有丢失信息的问题,但是传一般的文件之类的功能还是可以滴</p>
<p><strong>timeshift 一定要装一定要装</strong></p>
<blockquote>
<p>timeshift 提供两种模式的备份方式：</p>
<ul>
<li>RSYNCy</li>
<li>BTRFS</li>
</ul>
<p>RSYNC 在第一次使用时会拷贝所有文件，以后每次备份都是增量备份，使用硬链接创建从上一次快照未修改的系统文件。快照文件可以保存到任何 Linux 文件系统的硬盘格式下，保存快照到非系统盘或者外部硬盘上，这样即使系统盘损坏或者被格式化也能够快速从外部硬盘恢复数据。RSYNC 支持排除文件和目录来节省硬盘空间。</p>
<p>BTRFS 需要安装 <code>btrfs-tools</code>，快照通过 BTRFS 文件系统创建，快照备份和恢复的速度要比 RSYNC 快，快照创建和恢复都是原子事务的，不能中断。快照通过替换系统 subvolumns 来恢复，因为文件没有拷贝，删除或者覆盖，不会有文件丢失的风险。恢复后的系统会作为一次新的快照。快照在备份时是完美地逐字节拷贝，不能排除任何文件。快照会存在系统相同的硬盘上，暂时还不支持备份到其他硬盘，如果系统盘损坏，那么快照也会丢失。初始 BTRFS 备份是 0 字节，但是随着系统使用占用内容会逐日增多，快照中的文件依然还是会指向原始的文件 block. 系统必须安装在 BTRFS 分区上，并使用 Ubuntu-type subvolumn layout(@ and @home subvolumns)，其他的 layouts 不支持。</p>
<p>若在使用了 RSYNC 方式的 Timeshift 快照，还应考虑 Timeshift 快照占用情况。</p>
<p>一般来说 RSYNC 方式的快照大小略大于当前实际使用大小。因为虽然 RSYNC 方式的快照是增量的，但<strong>历史最久远的快照依然是完整备份</strong>，随后才是增量的。而简单来说增量大小取决于历史最久远的快照和最新快照之间的差异。</p>
<p>通过 Timeshift 自动清理历史最久远的快照是简单有效的方法，但仍然需要注意不要保存太多快照</p>
<p><a href="https://blog.csdn.net/wf19930209/article/details/104236358">Timeshift系统备份与还原_FlyWine的博客-CSDN博客_timeshift</a></p>
</blockquote>
<h3 id="discover配置"><a href="#discover配置" class="headerlink" title="discover配置"></a>discover配置</h3><p>discover并没有自动安装后端程序，启示者也很好理解，kde并不是为Arch设计的，其管理工具不一定是pacman。因此，为了能在Arch上使用discover我们需安装一下discover的后端程序</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S packagekit-qt5 flatpak fwupd </span><br></pre></td></tr></table></figure>

<p>假如还是有下载上的问题，网络代理设置全局模式就ok啦</p>
<p>后来发现，把这玩意删了更有用</p>
<h1 id="KDE-安装Fcitx5"><a href="#KDE-安装Fcitx5" class="headerlink" title="KDE    安装Fcitx5"></a>KDE    安装Fcitx5</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S fcitx5 fcitx5-chinese-addons fcitx5-gtk fcitx5-qt fcitx5-configtool fcitx5-material-color</span><br><span class="line"><span class="comment"># 安装输入法</span></span><br><span class="line">yay -S fcitx5-pinyin-moegirl fcitx5-pinyin-zhwiki</span><br><span class="line"><span class="comment"># 安装词库</span></span><br></pre></td></tr></table></figure>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p><code>vim ~/.pam_environment</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br><span class="line">INPUT_METHOD  DEFAULT=fcitx</span><br><span class="line">SDL_IM_MODULE DEFAULT=fcitx</span><br><span class="line">GLFW_IM_MODULE DEFAULT=ibus</span><br></pre></td></tr></table></figure>

<h2 id="键盘键位设置"><a href="#键盘键位设置" class="headerlink" title="键盘键位设置"></a>键盘键位设置</h2><p>在区域设置的输入法一栏里面建立双拼和键盘英语，之后用ctrl+space可以切换</p>
<h2 id="云拼音"><a href="#云拼音" class="headerlink" title="云拼音"></a>云拼音</h2><p>开启关闭快捷键 ctrl-alt-shift-c</p>
<p>启用禁用输入法使用shift,上下翻页键使用,和句号</p>
<h2 id="皮肤"><a href="#皮肤" class="headerlink" title="皮肤"></a>皮肤</h2><p>输入法的附加组件里面可以对皮肤进行设置，皮肤已经在上文安装了</p>
<p>附加组件的经典用户界面里面，还有这个</p>
<p>~&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;themes&#x2F;</p>
<p><a href="https://github.com/sxqsfun/fcitx5-sogou-themes">https://github.com/sxqsfun/fcitx5-sogou-themes</a></p>
<h2 id="词库"><a href="#词库" class="headerlink" title="词库"></a>词库</h2><p>可以使用搜狗词库</p>
<p>fcitx5-&gt;附加组件-&gt;拼音,选择字典可以选择不同的字库</p>
<p>模糊音之类乱七八糟的关了,这个只会影响响应速度opt</p>
<p>在配置附加组件里面把乱七八糟的关了</p>
<h2 id="字体大小等基础命令"><a href="#字体大小等基础命令" class="headerlink" title="字体大小等基础命令"></a>字体大小等基础命令</h2><p>如果只是更改大小之类的操作，推荐使用命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/.config/fcitx5/conf/classicui.conf <span class="comment">#更改配置文件</span></span><br><span class="line">fcitx5 -r   <span class="comment">#重启</span></span><br></pre></td></tr></table></figure>

<h2 id="Fcitx5无法打出-、号"><a href="#Fcitx5无法打出-、号" class="headerlink" title="Fcitx5无法打出 、号"></a>Fcitx5无法打出 、号</h2><p>在之前的东西配置好之后</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5-rime</span><br><span class="line"></span><br><span class="line">sudo pacman -S rime-cloverpinyin</span><br></pre></td></tr></table></figure>

<p>能用顿号就行了，这个双拼要配，我懒，方法在这里</p>
<p><a href="https://www.bilibili.com/read/mobile?id=14690644"></a></p>
<p><a href="https://github.com/rime/home/wiki/CustomizationGuide#%E4%B8%80%E4%BE%8B%E5%AE%9A%E8%A3%BD%E6%A8%99%E9%BB%9E%E7%AC%A6%E8%99%9F">CustomizationGuide · rime&#x2F;home Wiki</a></p>
<h1 id="墙外的世界"><a href="#墙外的世界" class="headerlink" title="墙外的世界"></a>墙外的世界</h1><h2 id="qv2ray配置"><a href="#qv2ray配置" class="headerlink" title="qv2ray配置"></a>qv2ray配置</h2><p>友链<a href="https://breezeshane.github.io/Linux/ArcolinuxAndAwesomeWM/#%E5%AE%89%E8%A3%85fcitx5%E8%BE%93%E5%85%A5%E6%B3%95%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AE%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8">https://breezeshane.github.io/Linux/ArcolinuxAndAwesomeWM/#安装fcitx5输入法以及设置软件开机自动启动</a></p>
<p>下载</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S xray v2ray qv2ray</span><br></pre></td></tr></table></figure>

<p>引入全局变量在 &#x2F;etc&#x2F;environment 里面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8889</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8889</span><br><span class="line"><span class="built_in">export</span> ftp_proxy=http://127.0.0.1:8889</span><br><span class="line"><span class="built_in">export</span> rsync_proxy=http://127.0.0.1:8889</span><br><span class="line"><span class="built_in">export</span> no_proxy=<span class="string">&#x27;localhost,127.0.0.1,localaddress,.localdomain.com&#x27;</span></span><br></pre></td></tr></table></figure>

<p>8889是主机的端口号，127.0.0.1是本机的监听地址</p>
<h2 id="clash配置"><a href="#clash配置" class="headerlink" title="clash配置"></a>clash配置</h2><p><a href="https://zhuanlan.zhihu.com/p/460826583">https://zhuanlan.zhihu.com/p/460826583</a></p>
<p>clash文档<a href="https://docs.cfw.lbyczf.com/contents/ui/general.html">https://docs.cfw.lbyczf.com/contents/ui/general.html</a></p>
<p>因为买的飞机场没有qv2ray的订阅，所以转用clash</p>
<ol>
<li>下载<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">https://github.com/Fndroid/clash_for_windows_pkg&#x2F;releases</a>，下载这个的clashforwindows的linux压缩包gz<br>arch文件的默认存储位置在&#x2F;usr&#x2F;local里，所以也解压到这个位置</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> xxx xxx</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更改端口号，因为之前用了qv2ray，所以全局的端口号还是8889,所以把clash的端口号也改为8889</li>
<li>设置开机自动启动</li>
</ol>
<p>KDE有图形化界面,下载的时候是有默认自启动的，但是因为修改了文件的位置，KDE没有发现，所以要手动修改一下</p>
<p>使用过程中发现一个诡异的事情，之前安装Firefox可以正常使用谷歌，但是chrome浏览器不能，试了各种方法后，把上面的端口的配置删了，然后在KDE的setting里面，通过网络设置的代理→使用系统代理服务器配置→自动检测，之后应用就可以正常上网了</p>
<p>使用手动配置的代理服务器</p>
<p><img src="https://tu.sunning.fit/i/2022/04/29/626bc2ee4ef54.png" alt="image-20220412191709041"></p>
<p>很多时候，kde提供了很多有用的工具，解决不了的时候，试试kde有没有图形化的界面，和archlinux文档</p>
<ol start="4">
<li>点击 general 勾选 allow lan、tun mode、mixin、start with linux</li>
</ol>
<blockquote>
<p><strong>TUN 模式</strong></p>
<p>对于不遵循系统代理的软件，TUN 模式可以接管其流量并交由 CFW 处理，在 Windows 中，TUN 模式性能比 TAP 模式好</p>
<p><strong>minxin</strong></p>
<p>支持向所有配置文件中注入公共属性设置,没配置公共属性开不开也就无所谓了</p>
<p><strong>Allow</strong> <strong>LAN</strong></p>
<p>是否允许局域网代理</p>
</blockquote>
<ol start="5">
<li>不幸的是当我把默认浏览器从firefox改成google的时候网络链接又挂了,发现是我上面的操作把配置文件qv2ray那里的删了的缘故,重新补上然后更新又回来了</li>
</ol>
<h1 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h1><h2 id="ASUSCTl-华硕电源风扇管理"><a href="#ASUSCTl-华硕电源风扇管理" class="headerlink" title="ASUSCTl   华硕电源风扇管理"></a>ASUSCTl   华硕电源风扇管理</h2><p>我是双风扇的笔记本，但是linux内核都是只能驱动一个风扇的</p>
<p>后来发现貌似是主板控制的风扇转速，想要什么在windows调好就ok了，现在没出现什么恶心的问题，就不乱动了</p>
<h2 id="安装asusctl（为了btrfs安全现在用tlp了）"><a href="#安装asusctl（为了btrfs安全现在用tlp了）" class="headerlink" title="安装asusctl（为了btrfs安全现在用tlp了）"></a>安装asusctl（为了btrfs安全现在用tlp了）</h2><p><a href="https://asus-linux.org/wiki/arch-guide/">ASUS NoteBook Linux</a></p>
<p>添加仓库  &#x2F;etc&#x2F;pacman.conf</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[g14]</span><br><span class="line">SigLevel = DatabaseNever Optional TrustAll</span><br><span class="line">Server = https://arch.asus-linux.org</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -Suy</span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S asusctl</span><br></pre></td></tr></table></figure>

<p>asusd 服务在键盘驱动程序准备好后由 udev 规则触发，该服务不需要启用，也不应该启用。</p>
<p>asusctl 需要安装并运行 power-profiles-daemon。它会在安装 asusctl 时自动安装，但您需要启用它：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now power-profiles-daemon.service</span><br></pre></td></tr></table></figure>

<p>与tlp冲突，删除tlp</p>
<p>在没有进行调整的时候用asusctl -s 查看目前支持的功能，很遗憾对于我目前的笔记本只支持电量控制，风扇，节电控制都不支持</p>
<p>常用命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">asusctl -c 电量 <span class="comment">#设置最大充电电量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>power-profiles-daemon</p>
<p>它为许多与电源配置文件守护进程不直接相关的华硕特定功能提供了一个接口，例如处理键盘 LED 设置或设置电池充电限制。在 5.14 内核开发周期中，相关功能被移至 asus-wmi 内核驱动程序，power-profiles-daemon 可以在其中使用它。这两个守护进程现在是互补的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">powerprofilesctl <span class="built_in">set</span> balanced</span><br><span class="line">powerporfilesctl <span class="built_in">set</span> power-saver</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>开机自动执行最大电量60</p>
<p>创建一个脚本,开机自启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim powersaving60.shell</span><br><span class="line"><span class="built_in">chmod</span> +rwx powersaving60.shell </span><br></pre></td></tr></table></figure>

<p>#在shell里面是注释的意思，第一句一定要有，sudo就不用开机再输密码了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">   2   │ <span class="comment">#设置电池最大充电值</span></span><br><span class="line">   3   │ sudo systemctl start asusd</span><br><span class="line">   4   │ asusctl -c 60</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为tlp的电源管理需要调整一些地方以免btrfs格式发生损坏，怕asusctl也有相同的问题，决定把电源管理模式调整回tlp</p>
</blockquote>
<h2 id="华硕灵耀16pro2-5k版本："><a href="#华硕灵耀16pro2-5k版本：" class="headerlink" title="华硕灵耀16pro2.5k版本："></a>华硕灵耀16pro2.5k版本：</h2><p>这里面提到的几个方法都使用了，但是发现都不生效，目前确定的是只有第一个是有效的</p>
<p><a href="https://github.com/Askannz/optimus-manager/wiki/A-guide--to-power-management-options">A guide to power management options · Askannz&#x2F;optimus-manager Wiki</a></p>
<p>先按照3的方法配置，之后再专用1的方法</p>
<p><a href="https://arch.icekylin.online/rookie/graphic-driver.html#%E5%8F%8C%E6%98%BE%E5%8D%A1-%E6%A0%B8%E6%98%BE-%E7%8B%AC%E6%98%BE">archlinux 简明指南 - Arch Linux 安装使用教程</a></p>
<h2 id="显卡切换"><a href="#显卡切换" class="headerlink" title="显卡切换"></a>显卡切换</h2><p><strong>在只用核显的模式下，确保正确关闭独立显卡</strong>；而在混合模式下，绝大多数情况下 NVIDIA 模块实际是始终开启的，<strong>电源管理并不生效</strong>。</p>
<p>通用的注意点：</p>
<p>配置文件在：</p>
<p><code>/etc/optimus-manager/optimus-manager.conf</code></p>
<p>prime-offload</p>
<p>安装对应的驱动，集成显卡和独显都需要安装</p>
<p>集成显卡</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S mesa lib32-mesa xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon</span><br></pre></td></tr></table></figure>

<p>核显</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S nvidia nvidia-settings lib32-nvidia-utils <span class="comment"># 必须安装</span></span><br></pre></td></tr></table></figure>

<p>相互切换软件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S optimus-manager optimus-manager-qt</span><br></pre></td></tr></table></figure>

<p>设置程序自启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> optimus-manager.service</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果需要在独显和核显模式间切换，要注意你没安装各类 GPU 监控插件，它们会阻止显卡切换，导致不可预料的错误<br>不要使用 Nvidia Control Panel 中的 Save to X Configuration file ，会导致配置冲突</p>
<p>出现无法打开界面的情况</p>
<p>Create a script to launch prime-offload on login. Don’t forget to make it executable.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># not sure why but needs to sleep before launching, otherwise, it doesn&#x27;t work.</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line">prime-offload &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure>

<p><strong>Under <code>~/.config/autostart</code>. Create a file called <code>prime-offload.desktop</code> with the following contents.</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Exec=&lt;insert-path-to-script-here&gt;/prime-offload.sh</span><br><span class="line">Name=Prime Offload</span><br><span class="line">Comment=Required <span class="keyword">for</span> Optimus Prime Graphics switching</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/Askannz/optimus-manager/issues/356">https://github.com/Askannz/optimus-manager/issues/356</a></p>
<p>一个控制自启动的shell脚本</p>
<h2 id="Tlp配置"><a href="#Tlp配置" class="headerlink" title="Tlp配置"></a>Tlp配置</h2><h3 id="tlp安装"><a href="#tlp安装" class="headerlink" title="tlp安装"></a>tlp安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S tlp tlp-rdw</span><br><span class="line">yay -S tlpui <span class="comment">#图形化界面</span></span><br></pre></td></tr></table></figure>

<p>为了防止 Btrfs 文件系统损坏，需要修改 <code>/etc/etc/tlp.conf</code> 配置文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/tlp.conf <span class="comment">#是添加不是修改 </span></span><br></pre></td></tr></table></figure>

<p>将对应行改为如下内容：</p>
<p><code>SATA_LINKPWR_ON_BAT=max_performance</code></p>
<p><img src="https://tu.sunning.fit/i/2022/04/29/626bc2f6f2bb0.png" alt="Untitled"></p>
<h3 id="配置-和修改语言"><a href="#配置-和修改语言" class="headerlink" title="配置  和修改语言"></a>配置  和修改语言</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> tlp.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> NetworkManager-dispatcher.service</span><br><span class="line">sudo systemctl mask systemd-rfkill.service <span class="comment"># 屏蔽以下服务以避免冲突，确保 TLP 无线设备的开关选项可以正确运行</span></span><br><span class="line">sudo systemctl mask systemd-rfkill.socket</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/04/29/626bc2ff257df.png" alt="Untitled"></p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267de727dde1.png" alt="Untitled"></p>
<h3 id="用这个命令检查电池限制情况"><a href="#用这个命令检查电池限制情况" class="headerlink" title="用这个命令检查电池限制情况"></a>用这个命令检查电池限制情况</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267de768e0ff.png" alt="Untitled"></p>
<h1 id="zsh-安装"><a href="#zsh-安装" class="headerlink" title="zsh 安装"></a>zsh 安装</h1><h2 id="配置非root账户的默认编辑器"><a href="#配置非root账户的默认编辑器" class="headerlink" title="配置非root账户的默认编辑器"></a>配置非root账户的默认编辑器</h2><p><code>vim ~/.bashrc</code></p>
<p>把 export EDITOR改成vim</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> EDITOR=<span class="string">&#x27;vim&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="OMZ安装"><a href="#OMZ安装" class="headerlink" title="OMZ安装"></a>OMZ安装</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>先执行完上面的字体安装,才能执行zsh安装</p>
<p>听说oh-my-zsh会拖慢zsh的执行速度,但是介于比较方便（好看省事）,还是用omz,官网链接<a href="https://ohmyz.sh/#install">https://ohmyz.sh/#install</a></p>
<p>首先修改默认shell为zsh</p>
<p><code>chsh -s /usr/bin/zsh</code></p>
<p> <a href="https://ohmyz.sh/#install">Oh My Zsh - a delightful &amp; open source framework for Zsh</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>执行之后会自动下载,到zsh的目录文件下面,cd回到根目录</p>
<p>安装的时候出现了一次bug,所以在这里再进行一次更改默认的shell</p>
<p><code>chsh -s /usr/bin/zsh</code></p>
<p>这个时候重启，就变成自带的oh-my-zsh了</p>
<p>可以用ozh命令进行各种操作</p>
<blockquote>
<p>配置文件修改</p>
<p>配置文件的路径是~.&#x2F;zshrc,想要修改某个部分就更改配置文件即可,很多的功能把里面的注释取消就可以使用了</p>
</blockquote>
<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><ul>
<li><strong>autojump</strong> <br>任何位置使用<code>j xxx</code>即可跳转到对应的目录，而且不用写全目录名称。前提是这个目录之前访问过。</li>
<li><strong>zsh-autosuggestions</strong> <br>会记住之前的命令输入历史，在输入命令时自动显示出过去输入过的命令，按右方向键<code>&gt;</code>即可自动填充。</li>
<li><strong>zsh-syntax-highlighting</strong> <br>会给输入的命令高亮，输错了的命令会显示成红色。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S autojump</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<p>和ohmyzsh有关的配置文件在</p>
<p>启用上面安装的几个插件</p>
<p>sudo是ohmyzsh自带的插件，功能s是在你输入的命令的开头添加sudo ，方法是双击Esc</p>
<p>extract也是自带插件，不用再去记不同文件的解压命令，方法是extract +你要解压的文件名</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">plugins=(git zsh-syntax-highlighting zsh-autosuggestions sudo extract)</span><br></pre></td></tr></table></figure>

<p>更新配置文件命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc  <span class="comment">#也就是执行的命令</span></span><br></pre></td></tr></table></figure>

<p>安装主题 powerlevel10k  这个主题是异步加载的策略,能够增快zsh的启动速度,推荐使用这个主题</p>
<p><a href="https://github.com/romkatv/powerlevel10k#oh-my-zsh">GitHub - romkatv&#x2F;powerlevel10k: A Zsh theme</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure>

<p>下载之后还是更改配置文件</p>
<p>Set <code>ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</code> in <code>~/.zshrc</code></p>
<p>关于皮肤,输入p10k configure即可执行配置</p>
<h3 id="小bug"><a href="#小bug" class="headerlink" title="小bug"></a>小bug</h3><ol>
<li></li>
</ol>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267de7e5c73c.png" alt="Untitled"></p>
<p>对这power10k的omz安装一下再执行 source .zshrc即可</p>
<ol start="2">
<li></li>
</ol>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267de832fd61.png" alt="Untitled"></p>
<p>这里我设置的是quiet,等zsh加载之后输出arch的那个图标</p>
<h1 id="平铺式桌面（伪）"><a href="#平铺式桌面（伪）" class="headerlink" title="平铺式桌面（伪）"></a>平铺式桌面（伪）</h1><p>KDE仿i3平铺式界面</p>
<p><a href="https://github.com/lingtjien/Grid-Tiling-Kwin">https://github.com/lingtjien/Grid-Tiling-Kwin</a></p>
<p>在这里下载压缩包，解压</p>
<p>执行命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kpackagetool5 --<span class="built_in">type</span> KWin/Script -i *path*   <span class="comment">#path是对应的解压后的文件路径</span></span><br></pre></td></tr></table></figure>

<p>在&#x2F;home&#x2F;sun&#x2F;.local&#x2F;share&#x2F;kservices5&#x2F;目录下面把metadata.desktop复制到这个文件夹下面，并且重命名为<code>kwin-script-grid-tiling.desktop</code></p>
<p>在窗口管理的kwin脚本里开启这个即可</p>
<p>所有的快捷键都可以在设置里面的快捷键里面自定义和找到</p>
<h3 id="常用快捷键记录"><a href="#常用快捷键记录" class="headerlink" title="常用快捷键记录"></a>常用快捷键记录</h3><p>遍历窗口  Alt+Tab</p>
<p>关闭窗口 alt+f4</p>
<p>窗口快速平铺至对应位置  meta+对应方向键</p>
<p>在不同窗口之间进行切换   meta+alt+方向键</p>
<p>切换到对应桌面  ctrl+f1234</p>
<p>显示所有窗口应用 ctrl+f9</p>
<p>以小视窗显示所有 ctrl+f8</p>
<p>最大化，最小化 meta+pgup&#x2F;pgdown </p>
<p>窗口移动到另外的桌面  mata+ctrl+shift+方向键</p>
<p>显示桌面meta+d</p>
<p>开启关闭间隔 meta+g</p>
<p>扩大，缩小当页窗口 win+-&#x2F;&#x3D;</p>
<p>最小化窗口  win+b</p>
<p>窗口浮动 win+f</p>
<p> 改一下键位</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267de9911cb2.png" alt="Untitled"></p>
<h3 id="kwin-tiling"><a href="#kwin-tiling" class="headerlink" title="kwin-tiling"></a>kwin-tiling</h3><p>有些东西不好实现，可以启动plasma的时候加个环境变量KDEWM&#x3D;&#x2F;usr&#x2F;bin&#x2F;i3换成i3wm 平铺式桌面布局</p>
<h2 id="窗口规则"><a href="#窗口规则" class="headerlink" title="窗口规则"></a>窗口规则</h2><p>（因为上面的那个主题会有边框过粗的问题）</p>
<p>窗口无标题栏和边框</p>
<p>窗口装饰元素设置个好看的</p>
<blockquote>
<p> 窗口装饰元素</p>
<p>有的在放大倍数的影响下边框太大了，有的放大缩小不够丝滑，有的上边框太大，最终发现默认的微风边框主题才是最好的</p>
</blockquote>
<h3 id="latter-docker"><a href="#latter-docker" class="headerlink" title="latter-docker"></a>latter-docker</h3><p><code>sudo pacman -S latte-dock</code></p>
<p>docker使用了一下,感觉不是很有必要,挺降低效率的,但是把配置记下来</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267de9e29448.png" alt="Untitled"></p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267dea3e4a97.png" alt="Untitled"></p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267deb2d20ab.png" alt="Untitled"></p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267deae80829.png" alt="Untitled"></p>
<h3 id="Kvantum-Manager"><a href="#Kvantum-Manager" class="headerlink" title="Kvantum Manager"></a>Kvantum Manager</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S kvantum-qt5</span><br></pre></td></tr></table></figure>

<p>打开 Kvantum Manager,选择主题并安装，接下来在<code>Change/Delete Theme</code>中选择 Layan,Use this theme。最后在系统设置，外观中的应用程序风格中选择 kvantum 即可</p>
<p><a href="https://www.pling.com/p/1325246/">https://www.pling.com/p/1325246/</a>  主题下载网址</p>
<p>如果透明的效果没有显示，确保 KDE 的全局缩放比例为整数倍。或者尝试切换混成器中 openGL 的设置</p>
<p>在这里可以设置透明，半透明的效果和对于应用使用特殊的效果</p>
<p>移除最大化窗口的边框</p>
<p><a href="https://qastack.cn/ubuntu/253337/remove-title-bar-and-borders-on-maximized-windows-in-kubuntu">在Kubuntu中移除最大化窗口上的标题栏和边框</a></p>
<h1 id="其他常用配置"><a href="#其他常用配置" class="headerlink" title="其他常用配置"></a>其他常用配置</h1><h2 id="非静默启动"><a href="#非静默启动" class="headerlink" title="非静默启动"></a>非静默启动</h2><p>编辑&#x2F;etc&#x2F;default&#x2F;grub，<code>GRUB_CMDLINE_LINUX_DEFAULT</code>这一关键字修改，把引号中的quiet参数去掉</p>
<p>创建一个&#x2F;usr&#x2F;sbin&#x2F;update-grub脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="built_in">exec</span> grub-mkconfig -o /boot/grub/grub.cfg <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>到对应的文件目录，添加可执行权限（一般执行显示没有对应的命令是这个原因）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> a+x 文件名</span><br></pre></td></tr></table></figure>

<p>然后在那个目录下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>

<h2 id="开机自动挂载硬盘"><a href="#开机自动挂载硬盘" class="headerlink" title="开机自动挂载硬盘"></a>开机自动挂载硬盘</h2><p>关于硬盘的格式选择</p>
<p>exfat可以被linux和win直接读取，用ntfs通过安装ntfs-3g的包可以使linux读取win的内容，但有较多的性能损失</p>
<p>exfat也存在缺点，单日志，性能提高了，但是文件更加容易丢失，因此不能出现强制断电，接触不良等意外，鉴于是笔电遂选用exfat</p>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><p>在设置的开机和关机那一栏可以设置后台启动或者关闭那些程序</p>
<p>ctrl+esc键可以打开关闭任务监视器</p>
<p>dolphin 在那三个横纲那里把信息和终端打开</p>
<p>任务调度器是什么</p>
<h2 id="触摸板配置"><a href="#触摸板配置" class="headerlink" title="触摸板配置"></a>触摸板配置</h2><h2 id="更新系统时钟"><a href="#更新系统时钟" class="headerlink" title="更新系统时钟"></a>更新系统时钟</h2><p>因为双系统win和linux会有8个小时时差</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timedatectl set-ntp <span class="literal">true</span> <span class="comment"># 将系统时间与网络时间进行同步</span></span><br><span class="line">timedatectl status <span class="comment"># 检查服务状态</span></span><br></pre></td></tr></table></figure>

<p>更新，问题没有解决，后来用下面的方法</p>
<p>最根本的原因是两个系统的时间管理差异造成的。Ubuntu 默认把 BIOS 时间当做 GMT+0，也就是协调世界时；而 Windows 则是看做当前时区 GMT+8。于是就出现时间被两个系统改来改去，切换系统时发生时间错乱。</p>
<p>将 Windows 的时区改为世界协调时间，和 Ubuntu 一致。</p>
<p>具体就是将系统时区改为 GMT+0，windows改了没啥用啊</p>
<p>linux也可以改，怕有签名之类的乱七八糟的bug麻烦</p>
<p>最终解决方案linux</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timedatectl set-local-rtc 1</span><br></pre></td></tr></table></figure>

<p>- </p>
<h2 id="deb包转换"><a href="#deb包转换" class="headerlink" title="deb包转换"></a>deb包转换</h2><p>可能一些软件需要我们手动转换 deb 包后安装，这时候就需要 debtab 工具来转换。</p>
<p>安装deb</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S debtap</span><br></pre></td></tr></table></figure>

<p>更新debtap数据库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo debtap -u</span><br></pre></td></tr></table></figure>

<p>这一步可能会比较慢，开全局代理等待即可</p>
<p>使用debtap转换deb包</p>
<p>debtap xxx.deb</p>
<p>这一步会有输入签名，维护者等等，为了方便可以</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">debtap -Q xxx.deb</span><br></pre></td></tr></table></figure>

<p>最后转换完成的包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -U </span><br></pre></td></tr></table></figure>

<p>下载好待转换的 deb 包，将其转换，以下步骤一路回车即可：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo debtap ~/Downloads/包名.deb</span><br></pre></td></tr></table></figure>

<p>安装转换后的包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -U ~/Downloads/包名.pkg.tar.zst</span><br></pre></td></tr></table></figure>



<h2 id="硬件信息检测"><a href="#硬件信息检测" class="headerlink" title="硬件信息检测"></a>硬件信息检测</h2><p>搞机全家桶（硬件信息检测）  GPU和CPUkde没有,其他两个kde自带而且有图形化界面  注意，当安装这个之后显卡切换模式出现了些问题，考虑到这东西没什么实质的作用，就别安装了</p>
<h3 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h3><h3 id="Smartmontools"><a href="#Smartmontools" class="headerlink" title="Smartmontools"></a><strong>Smartmontools</strong></h3><ol>
<li><p>安装 Smartmontools：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S smartmontools</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看磁盘信息：</p>
<ul>
<li><strong>SATA</strong></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo smartctl -A /dev/sdx <span class="comment"># 硬盘</span></span><br><span class="line">sudo smartctl -d sat -A /dev/sdx <span class="comment"># USB 设备</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>NVME</strong></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo smartctl -A /dev/nvmexn1 <span class="comment"># 硬盘</span></span><br><span class="line">sudo smartctl -d sat -A /dev/sdx <span class="comment"># USB 设备</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="CPU-信息"><a href="#CPU-信息" class="headerlink" title="CPU 信息"></a><strong>CPU 信息</strong></h3><p>像是win下面的CPU-Z</p>
<ol>
<li><p>安装 CPU-X：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S cpu-x</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开 CPU-X 即可看到 CPU 详细信息：</p>
</li>
</ol>
<h3 id="GPU-信息"><a href="#GPU-信息" class="headerlink" title="GPU 信息"></a><strong>GPU 信息</strong></h3><ol>
<li><p>安装 GPU-Viewer：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S gpu-viewer</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开 GPU-Viewer 即可看到 GPU 详细信息：</p>
</li>
</ol>
<h3 id="硬件完整信息"><a href="#硬件完整信息" class="headerlink" title="硬件完整信息"></a><strong>硬件完整信息</strong></h3><ol>
<li><p>安装 Dmidecode：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S dmidecode</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入以下命令使用 Dmidecode 查看系统硬件信息：</p>
<p><code>sudo dmidecode</code></p>
</li>
</ol>
<h2 id="archlinux-设置休眠到swap文件-直接建立一个swap分区更方便"><a href="#archlinux-设置休眠到swap文件-直接建立一个swap分区更方便" class="headerlink" title="archlinux 设置休眠到swap文件(直接建立一个swap分区更方便)"></a>archlinux 设置休眠到swap文件(直接建立一个swap分区更方便)</h2><p>虽然现在的物理内存基本可以满足内存需求，但有些软件</p>
<p><a href="https://blog.csdn.net/didayuye/article/details/121449321">Archlinux 设置休眠到swap文件_风言风语-CSDN博客</a></p>
<h2 id="安装wine"><a href="#安装wine" class="headerlink" title="安装wine"></a>安装wine</h2><p>好处是在wine对应的文件夹里面对应的windows破解版软件该怎么用就怎么用</p>
<p>坏处是把系统弄乱，而且wine的应用也会有各种各样的问题，不如模拟器，而且装了之后我还不会删</p>
<p>文件默认路径</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/home/sun/.wine/dosdevices/c:/users/sun/</span><br></pre></td></tr></table></figure>

<p>性能不会有模拟器那样巨大的损失</p>
<h3 id="安装包及其依赖"><a href="#安装包及其依赖" class="headerlink" title="安装包及其依赖"></a>安装包及其依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -Rns</span><br><span class="line">wine-mono wine-staging giflib lib32-giflib libpng lib32-libpng libldap lib32-libldap gnutls lib32-gnutls \</span><br><span class="line">mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils libpulse lib32-libpulse libgpg-error </span><br><span class="line">lib32-libgpg-error alsa-plugins lib32-alsa-plugins alsa-lib lib32-alsa-lib libjpeg-turbo lib32-libjpeg-turbo \</span><br><span class="line">sqlite lib32-sqlite libxcomposite lib32-libxcomposite libxinerama lib32-libgcrypt libgcrypt lib32-libxinerama \</span><br><span class="line">ncurses lib32-ncurses  libxslt lib32-libxslt libva lib32-libva gtk3 \</span><br><span class="line">lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader</span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S wine wine-mono wine_gecko wine-staging giflib lib32-giflib libpng lib32-libpng libldap lib32-libldap gnutls lib32-gnutls \</span><br><span class="line">mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils libpulse lib32-libpulse libgpg-error \</span><br><span class="line">lib32-libgpg-error alsa-plugins lib32-alsa-plugins alsa-lib lib32-alsa-lib libjpeg-turbo lib32-libjpeg-turbo \</span><br><span class="line">sqlite lib32-sqlite libxcomposite lib32-libxcomposite libxinerama lib32-libgcrypt libgcrypt lib32-libxinerama \</span><br><span class="line">ncurses lib32-ncurses opencl-icd-loader lib32-opencl-icd-loader libxslt lib32-libxslt libva lib32-libva gtk3 \</span><br><span class="line">lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader</span><br></pre></td></tr></table></figure>

<p>安装好后用配置wine        Wine的默认路径在 ～&#x2F;.wine</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">winecfg </span><br></pre></td></tr></table></figure>

<h3 id="运行windows程序"><a href="#运行windows程序" class="headerlink" title="运行windows程序"></a>运行windows程序</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wine /path/of/xxx.exe</span><br></pre></td></tr></table></figure>

<p><a href="https://notes.wadeism.net/post/linux-run-win-program-by-wine/#:~:text=Wine%20%E6%98%AF%E8%AE%93Linux%E3%80%81macOS,%E5%83%8F%E6%98%AF%E5%8E%9F%E7%94%9F%E7%9A%84%E7%A8%8B%E5%BC%8F%E3%80%82">Linux 使用 Wine 執行 Windows 程式</a></p>
<p><a href="https://github.com/hillwoodroc/winetricks-zh">https://github.com/hillwoodroc/winetricks-zh</a></p>
<p><a href="https://wiki.archlinux.org/title/Wine_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Wine (简体中文)</a></p>
<p>注意不要用管理员身份运行wine</p>
<h3 id="关于wine应用的打开"><a href="#关于wine应用的打开" class="headerlink" title="关于wine应用的打开"></a>关于wine应用的打开</h3><p>打开对应的windows程序需要在对应的文件目录下面才能打开</p>
<p>推荐用wine打开而不是用其他方式打开</p>
<p>写一个xmind.shell的脚本放在&#x2F;usr&#x2F;local&#x2F;bin里面 ，并给予对应的权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> ~/.wine/drive_c/<span class="string">&quot;Program Files&quot;</span>/<span class="string">&quot;XMind&quot;</span>/</span><br><span class="line">wine XMind.EXE   <span class="comment">#这个exe必须先cd到所在文件夹才可以执行</span></span><br></pre></td></tr></table></figure>

<p>之后在konsole里面执行xmind.shell脚本即可</p>
<h2 id="Smplayer"><a href="#Smplayer" class="headerlink" title="Smplayer"></a>Smplayer</h2><p>播放视频时出错，一部分的mp4有声音，一部分没有，不知道是怎么回事<br>有时您可以打开 VLC 并使用它来播放音频文件，但在播放视频时它会关闭。你也会得到一个段错误。当您在一台计算机上使用不同的图形卡时，尤其会发生这种情况。然后硬件视频加速配置错误，导致VLC无法引用图形设备。您可以安装以下依赖项来解决问题。</p>
<p>对于 Nvidia 显卡用户：安装libva-vdpau-driver。</p>
<p>英特尔显卡用户：安装libva-intel-driver。</p>
<p>貌似也没有用，换了个视频播放器就好了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S smplayer</span><br><span class="line">yay -S smplayer-skins</span><br><span class="line">yay -S smplayer-themes</span><br></pre></td></tr></table></figure>

<h3 id="皮肤美化"><a href="#皮肤美化" class="headerlink" title="皮肤美化"></a>皮肤美化</h3><p><a href="https://store.kde.org/p/1183792">Uniform+ for SMPlayer</a></p>
<p>界面的gui改成mpcgui</p>
<h3 id="自定义播放速度"><a href="#自定义播放速度" class="headerlink" title="自定义播放速度"></a>自定义播放速度</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">normal_speed inc_speed inc_speed inc_speed inc_speed inc_speed inc_speed inc_speed inc_speed inc_speed inc_speed inc_speed inc_speed inc_speed inc_speed</span><br></pre></td></tr></table></figure>

<p>每一个inc_speed播放速度加0.1</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267dee51361b.png" alt="Untitled"></p>
<p>左右切换的时候有进度提示条</p>
<p>查看—显示—音量提示条</p>
<h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><p>有时候关机时间太长是因为有的进程它不停止</p>
<p>进行下截至时间的设置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/systemd/system.conf</span><br></pre></td></tr></table></figure>

<p>找到其中 <code>DefaultTimeoutStopSec</code> 一项，将其前方的井号去掉，并赋值为 30s 即可</p>
<p>执行这个使其生效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>以及开启sudo echo “kernel.sysrq &#x3D; 1” &gt; &#x2F;etc&#x2F;sysctl.d&#x2F;99-sysctl.conf 这个要切换成su root来执行</p>
<p><a href="https://breezeshane.github.io/Linux/ArcolinuxAndAwesomeWM/#%E7%BB%84%E5%90%88%E9%94%AE%E5%AE%89%E5%85%A8%E4%BB%8E%E5%AE%B9%E5%BA%94%E5%AF%B9%E5%85%B3%E6%9C%BA-%E9%87%8D%E5%90%AF%E5%8D%A1%E6%AD%BB%E9%97%AE%E9%A2%98">Arcolinux &amp; AwesomeWM</a></p>
<h2 id="关于更新"><a href="#关于更新" class="headerlink" title="关于更新"></a>关于更新</h2><p>没事多更新，越不更新可能遗留的问题越多</p>
<p>如果更新之后有图形驱动找不到之类的问题，先重启，大概率是没有重启但是显卡驱动已经更新了的问题</p>
<p>如果出现安装 nvidia-utils (510.54-1) 破坏依赖 ‘nvidia-utils&#x3D;510.47.03’这个的问题，可以先把nvidia-utils，这个东西删了，然后再重装，即可解决</p>
<h2 id="arco-的任务管理器和查看功耗"><a href="#arco-的任务管理器和查看功耗" class="headerlink" title="arco 的任务管理器和查看功耗"></a>arco 的任务管理器和查看功耗</h2><p>资源监视器</p>
<p>搜索电量</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267def0ab0d2.png" alt="Untitled"></p>
<h2 id="ssh连接服务器"><a href="#ssh连接服务器" class="headerlink" title="ssh连接服务器"></a>ssh连接服务器</h2><p>启动ssh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start ssh</span><br></pre></td></tr></table></figure>

<p>连接ip</p>
<p>ssh 用户名@地址</p>
<h2 id="终端走代理服务器"><a href="#终端走代理服务器" class="headerlink" title="终端走代理服务器"></a>终端走代理服务器</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p>这个只在当前环境下面有，每次使用要重新执行一边指令</p>
<p>（貌似没有用</p>
<p>安装privoxy</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S privoxy</span><br></pre></td></tr></table></figure>

<p>更改其值为ss代理 监听的地址即可</p>
<p>位置 &#x2F;etc&#x2F;privoxy&#x2F;config</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">forward-socks5t   /               127.0.0.1:7890 .</span><br></pre></td></tr></table></figure>

<p>7890对应的是privoxy监听的默认地址</p>
<p>重启privoxy</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl restart privoxy</span><br></pre></td></tr></table></figure>



<p>终端添加代理</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">      </span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">如果不希望使用8118作为privoxy 监听的地址，则需要在config文件中找到listen-address 127.0.0.1:8118一行，将8118改为自己想要的端口，并相应地在终端中输入：</span><br><span class="line"></span><br><span class="line">➜  ~ <span class="built_in">export</span> http_proxy=<span class="string">&quot;127.0.0.1:自己的端口&quot;</span></span><br><span class="line">➜  ~ <span class="built_in">export</span> https_proxy=<span class="string">&quot;127.0.0.1:自己的端口</span></span><br></pre></td></tr></table></figure>



<p>想要取消终端代理</p>
<p>直接关掉privoxy即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart privoxy</span><br></pre></td></tr></table></figure>



<p>测试一下终端是否链接成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure>

<p>有反应就说明连接成功了</p>
<h3 id="把开启关闭终端写入命令"><a href="#把开启关闭终端写入命令" class="headerlink" title="把开启关闭终端写入命令"></a>把开启关闭终端写入命令</h3><p>把命令写在omz配置文件里面 <code>~/.zshrc</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#终端启动关闭代理</span></span><br><span class="line">sudo systemctl start privoxy <span class="comment">#先把代理开开</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">&quot;127.0.0.1:8118&quot;</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="string">&quot;127.0.0.1:8118&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;终端代理已开启。&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unset</span> http_proxy https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;终端代理已关闭。&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后重新加载脚本即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>之后只需要执行</p>
<p><code>proxy_on</code>和<code>proxy_off</code>即可</p>
<h2 id="Vim复制到系统剪切板"><a href="#Vim复制到系统剪切板" class="headerlink" title="Vim复制到系统剪切板"></a>Vim复制到系统剪切板</h2><p>vim会有一些存储空间来暂存内容，vim中将这些存储空间叫<strong>寄存器</strong>。此寄存器非我们硬件所说的寄存器，可以理解为是一种cache。</p>
<p>例如我们在vim中<code>y</code>操作复制的内容，实际就是暂存到寄存器中。</p>
<p>查看寄存器的内容<code>:reg</code>，vim中的寄存器也有好几个</p>
<p>原生的arch中的vim是不支持把粘贴的东西复制到系统剪切板里面的，所以</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S gvim</span><br></pre></td></tr></table></figure>

<p>会提示冲突，然后确定删除vim的提示就行了</p>
<p>然后创建文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/.vimrc</span><br></pre></td></tr></table></figure>

<p>写入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> clipboard^=unnamed,unnamedplus</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.vimrc </span><br></pre></td></tr></table></figure>

<p>关掉当前的终端，之后用vim的p（粘贴）操作就可以粘贴到剪切板上了</p>
<h2 id="Typora-和-Pandoc"><a href="#Typora-和-Pandoc" class="headerlink" title="Typora 和 Pandoc"></a>Typora 和 Pandoc</h2><p>pandoc文档格式转换</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装pandoc</span></span><br><span class="line">sudo pacman -S pandoc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装texlive和中文支持</span></span><br><span class="line">sudo pacman -S texlive-core texlive-langchinese</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Arco安装</tag>
      </tags>
  </entry>
  <entry>
    <title>bug们</title>
    <url>/2022/07/21/bug%E4%BB%AC/</url>
    <content><![CDATA[<h1 id="pacman的问题"><a href="#pacman的问题" class="headerlink" title="pacman的问题"></a>pacman的问题</h1><h2 id="gpg签名损坏（遇到再说）"><a href="#gpg签名损坏（遇到再说）" class="headerlink" title="gpg签名损坏（遇到再说）"></a>gpg签名损坏（遇到再说）</h2><p>可能会有gpg签名损坏的问题，注意，在换源的时候后面的注释要删掉</p>
<p>需要安装archlinuxcn-keyring导入GPG key</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -Sy archlinuxcn-keyring</span><br></pre></td></tr></table></figure>

<p>再更新一下源,如果有未信任的证书应该是源没有更新的问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syu</span><br></pre></td></tr></table></figure>

<h2 id="密钥环错误（遇到再说）"><a href="#密钥环错误（遇到再说）" class="headerlink" title="密钥环错误（遇到再说）"></a>密钥环错误（遇到再说）</h2><p>遇到无法远程查找到密钥环错误（如果没有用把后面的archlinuxcn给去掉（应该是没换源的结果）管理员执行）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -R /etc/pacman.d/gnupg/</span><br><span class="line"><span class="built_in">rm</span> -R /root/.gnupg/</span><br><span class="line">only <span class="keyword">if</span> the directory exists</span><br><span class="line">gpg --refresh-keys</span><br><span class="line">pacman-key --init &amp;&amp; pacman-key --populate archlinuxcn</span><br><span class="line">pacman-key --refresh-keys archlinuxcn</span><br></pre></td></tr></table></figure>

<p>如果还是密钥环错误</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S archlinux-keyring archlinuxcn-keyring</span><br></pre></td></tr></table></figure>

<p>yay     &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist</p>
<p>如果yay下载速度很慢，连手机（别连校园网</p>
<p>开全局代理，重新打开konsole再开始下载即可</p>
<h2 id="GPGME-error-No-data"><a href="#GPGME-error-No-data" class="headerlink" title="GPGME error: No data"></a>GPGME error: No data</h2><p>一句命令就ok了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> /var/lib/pacman/sync/*.sig</span><br></pre></td></tr></table></figure>



<blockquote>
<p>原因</p>
<p>pacman在更新数据库文件时也会尝试下载<code>$repo.db.sig</code>，这里的<code>$repo</code>可以是core、extra、community、archlinuxcn等仓库名。</p>
<p>但是无论是官方源还是archlinuxcn源，大多数源的数据库文件都不会被签名，也就不会存在 .db.sig 文件。</p>
<p>pacman 尝试下载时这些数据库文件的签名文件时，镜像站就会返回 <strong>404 的http状态码</strong>告诉pacman: “你个傻叉，神他妈没有这个文件！”</p>
<p>pacman 挨了一顿骂，也就善罢甘休，没有再动这个念头，所以我们每次更新也都相安无事。</p>
<p>而出现这种错误的情况大多是发生在 校园网、酒店免费WIFI 这种<strong>需要登陆以后才能上网的网络环境</strong>。</p>
<p>因为 pacman 尝试下载 <code>.db.sig</code> 文件时被登陆网页劫持了（这点你们应该深有感受，如果你在这种网络环境下没有登陆，你无论访问什么网页都会被重定向到登录界面，http的状态码此时是200，不是404）。从没见过 <code>.db.sig</code>的 pacman 此时两眼放光，由于没有挨骂，他就迅速地把登录界面当成是<code>.db.sig</code>下载下来了。</p>
<p>下载下来以后，pacman 激动地摆弄起 <code>.db.sig</code>，甚至发现里面没有自己期待已久的 GPG签名数据并开始报错时仍然不愿意撒手，因此此时无论再怎么同步源码、再怎么 Syyu 也不会有效果，必须人工干预。</p>
</blockquote>
<h2 id="文件-x2F-var-x2F-cache-x2F-pacman-x2F-pkg-x2F-libinih-55-2-x86-64-pkg-tar-zst-已损坏-打算删除吗"><a href="#文件-x2F-var-x2F-cache-x2F-pacman-x2F-pkg-x2F-libinih-55-2-x86-64-pkg-tar-zst-已损坏-打算删除吗" class="headerlink" title="文件 &#x2F;var&#x2F;cache&#x2F;pacman&#x2F;pkg&#x2F;libinih-55-2-x86_64.pkg.tar.zst 已损坏,打算删除吗"></a>文件 &#x2F;var&#x2F;cache&#x2F;pacman&#x2F;pkg&#x2F;libinih-55-2-x86_64.pkg.tar.zst 已损坏,打算删除吗</h2><p>更新一下密钥环然后再进行更新</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -Sy archlinux-keyring &amp;&amp; pacman -Su</span><br></pre></td></tr></table></figure>



<h2 id="无法打开文件-x2F-var-x2F-lib-x2F-pacman-x2F-sync-x2F-community-db-Unrecognized-archive-format"><a href="#无法打开文件-x2F-var-x2F-lib-x2F-pacman-x2F-sync-x2F-community-db-Unrecognized-archive-format" class="headerlink" title="无法打开文件 &#x2F;var&#x2F;lib&#x2F;pacman&#x2F;sync&#x2F;community.db: Unrecognized archive format"></a>无法打开文件 &#x2F;var&#x2F;lib&#x2F;pacman&#x2F;sync&#x2F;community.db: Unrecognized archive format</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -R /var/lib/pacman/sync/</span><br></pre></td></tr></table></figure>

<p>删除掉这个文件夹即可</p>
<p>下次更新的时候要用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -Syyu</span><br></pre></td></tr></table></figure>

<h2 id="Arch-Linux使用pacman时无法锁定数据库"><a href="#Arch-Linux使用pacman时无法锁定数据库" class="headerlink" title="[Arch Linux使用pacman时无法锁定数据库 ]"></a>[Arch Linux使用pacman时无法锁定数据库 ]</h2><p>由于<code>/var/lib/pacman/db.lck</code>文件锁定了pacman的数据库，那么需要运行以下命令进行解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> /var/lib/pacman/db.lck</span><br></pre></td></tr></table></figure>

<p>删除之后就能继续正常使用了</p>
<h1 id="字体问题"><a href="#字体问题" class="headerlink" title="字体问题"></a>字体问题</h1><h2 id="Wps-字体撕裂和office识别成压缩包"><a href="#Wps-字体撕裂和office识别成压缩包" class="headerlink" title="Wps 字体撕裂和office识别成压缩包"></a>Wps 字体撕裂和office识别成压缩包</h2><h3 id="office文件和wps关联"><a href="#office文件和wps关联" class="headerlink" title="office文件和wps关联"></a>office文件和wps关联</h3><p><img src="/bug%E4%BB%AC.assets/6267df0586a9e.png" alt="Untitled"></p>
<p>进一步查找应该是匹配方式的问题，现在这个问题还没解决，资料如下</p>
<p>wps文件关联</p>
<p><a href="https://www.v2ex.com/t/770436">从烦人的 WPS “打开方式不对”到翻 Qt 源码 - V2EX</a></p>
<p>和桌面文件的mimetype匹配有关系，所以把把重复匹配 .doc&#x2F;.docx&#x2F;.ppt&#x2F;.pptx 等等的 mimetype 删的只剩下一个，保证每个后缀名只在一个 mimetype 里出现一次</p>
<p>并用合适的参数调用 <code>update-mime-database</code></p>
<blockquote>
<p>后来发现问题在下面，在配置字体撕裂的时候没注意看archwiki</p>
<p>不是把第四行的Exce删了，而是在第四行添加</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">env</span> QT_SCREEN_SCALE_FACTORS=1</span><br></pre></td></tr></table></figure>

<p>例如下面这样</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Exec= <span class="built_in">env</span> QT_SCREEN_SCALE_FACTORS=1 /usr/bin/wps %U</span><br><span class="line">Exec= <span class="built_in">env</span> QT_SCREEN_SCALE_FACTORS=1 /usr/bin/wpp %F</span><br></pre></td></tr></table></figure>

<p>自己挖坑自己跳了属于</p>
</blockquote>
<h3 id="字体撕裂"><a href="#字体撕裂" class="headerlink" title="字体撕裂"></a>字体撕裂</h3><p>原因是wps的dpi默认是96,如果系统dpi和96不一样会有dpi问题</p>
<p><a href="https://wiki.archlinux.org/title/WPS_Office_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#KDE%E4%B8%8Bdpi%E4%B8%8D%E5%AF%B9%E7%A7%B0%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AD%97%E4%BD%93%E6%A8%A1%E7%B3%8A">WPS Office (简体中文)</a></p>
<p>应用程序的desktop位置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/usr/share/applications/</span><br><span class="line">sudo vim wps  剩下的用tap自动补全</span><br></pre></td></tr></table></figure>

<p>把第四行的Exec删了，换成</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Exec= <span class="built_in">env</span> QT_SCREEN_SCALE_FACTORS=1 /usr/bin/wps %U</span><br><span class="line">Exec= <span class="built_in">env</span> QT_SCREEN_SCALE_FACTORS=1 /usr/bin/wpp %F</span><br></pre></td></tr></table></figure>

<p>每一个wps的东西都需要改</p>
<p><img src="/bug%E4%BB%AC.assets/6267df1150b16.png" alt="Untitled"></p>
<h2 id="Ark解压字体乱码"><a href="#Ark解压字体乱码" class="headerlink" title="Ark解压字体乱码"></a>Ark解压字体乱码</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>主要是编码问题，windows下默认gb2312于linux中默认uft-8不兼容</p>
<p>直接原因是Ark中用于zip打开和解压的插件不支持gb2312</p>
<h3 id="安装p7zip-natspec"><a href="#安装p7zip-natspec" class="headerlink" title="安装p7zip-natspec****"></a>安装p7zip-natspec****</h3><p>yay -S p7zip-natspec</p>
<p>和7zip插件会有冲突，删掉即可</p>
<p>在ark设置里面关掉Libzip包</p>
<p><img src="/bug%E4%BB%AC.assets/6267df166e5a5.png" alt="Untitled"></p>
<h1 id="蓝牙连接不稳定，容易断开连接"><a href="#蓝牙连接不稳定，容易断开连接" class="headerlink" title="蓝牙连接不稳定，容易断开连接"></a>蓝牙连接不稳定，容易断开连接</h1><p>双系统，windows的适配器和arch的适配器冲突了，把windows蓝牙设备删除，蓝牙服务关了之后，在设备管理器把蓝牙设备删除</p>
<blockquote>
<p>windows设备管理器扫描更改设备可以把设备再安装回来</p>
</blockquote>
<p>安装必要软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S bluez bluez-utils pulseaudio-bluetooth pavucontrol pulseaudio-alsa</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动蓝牙服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> bluetooth</span><br><span class="line">systemctl start bluetooth</span><br></pre></td></tr></table></figure>

<p>启动pluseaudio服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pulseaudio -k                   <span class="comment"># 确保没有pulseaudio启动</span></span><br><span class="line">pulseaudio --start              <span class="comment"># 启动pulseaudio服务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="内存不够了，清内存"><a href="#内存不够了，清内存" class="headerlink" title="内存不够了，清内存"></a>内存不够了，清内存</h1><h2 id="软件包清理"><a href="#软件包清理" class="headerlink" title="软件包清理"></a>软件包清理</h2><p>查看缓存文件夹里面有多少缓存包可以使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /var/cache/pacman/pkg/ | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>

<p>查看混村文件夹使用的磁盘总空间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh /var/cache/pacman/pkg/</span><br></pre></td></tr></table></figure>

<p>清理3个最新版本之外的所有软件包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo paccache -r</span><br></pre></td></tr></table></figure>

<p>如果您只想保留一个最新版本，请运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo paccache -rk 1</span><br></pre></td></tr></table></figure>

<p> ķ 表示保留 <code>num</code> 缓存中的每个包。</p>
<p>删除已卸载软件包的所有缓存版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo paccache -ruk0</span><br></pre></td></tr></table></figure>



<p>删除所有已卸载的软件包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -Sc</span><br></pre></td></tr></table></figure>



<p>完全删除所有包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -Scc</span><br></pre></td></tr></table></figure>

<p>使用此命令时请小心。 一旦缓存的包被删除，就无法检索它们</p>
<h2 id="日志清理"><a href="#日志清理" class="headerlink" title="日志清理"></a>日志清理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">journalctl --disk-usage  //清理日志</span><br><span class="line">journalctl --vacuum-time=1months  //指定日志的保留时间</span><br></pre></td></tr></table></figure>





<p>authorized_keys</p>
]]></content>
      <categories>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>bug们</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly</title>
    <url>/2022/07/21/butterfly/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="用npm安装"><a href="#用npm安装" class="headerlink" title="用npm安装"></a>用npm安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure>

<p><code>这种安装方式不好找文件夹在node里面了，推荐用git安装</code></p>
<h2 id="用Git安装"><a href="#用Git安装" class="headerlink" title="用Git安装"></a>用Git安装</h2><p>稳定版</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>

<p>测试版</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>



<p>升级方法:</p>
<p>在主题目录下，运行<code>git pull</code></p>
<h1 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h1><p>在_config.yml中把主题改成Butterfly</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">theme:Butterfly</span></span><br></pre></td></tr></table></figure>

<p>在hexo的根目录创建文件<code>_config.butterfly.yml</code>，然后把主题目录的<code>_config.yml</code>内容复制到<code>_config.butterfly.yml</code> 去。( 注意: 复制的是主題的 <code>_config.yml</code> ,而不是 hexo 的 <code>_config.yml</code>)</p>
<p>以后只用在<code>_config.butterfly.yml</code>配置即可，这个文件存在的时候主题的_<code>config.yml</code>将不会有效果</p>
<p>Hexo会自动合并主题中的<code>_config.yml</code>和 <code>_config.butterfly.yml</code>  里的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高。</p>
<h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front_matter"></a>Front_matter</h1><p>Front-matter 是 markdown 文件最上方以 — 分隔的區域，用於指定個別檔案的變數。</p>
<p>如果有多个，要变成string数组的形式</p>
<h1 id="添加新的页面"><a href="#添加新的页面" class="headerlink" title="添加新的页面"></a>添加新的页面</h1><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>在根目录输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>



<p>找到<code>source/tags/index.md</code>这个文件，更改成</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line"><span class="built_in">type</span> : <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="built_in">date</span>: 2022-07-06 20:11:49</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><p>在根目录:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>



<h2 id="404页"><a href="#404页" class="headerlink" title="404页"></a>404页</h2><p>在配置页面这样：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;頁面沒有找到&quot;</span></span><br><span class="line">  <span class="attr">background:</span> </span><br></pre></td></tr></table></figure>



<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>配置文件修改语言</p>
<p><code>language:</code> default(en) , zh-CN, zh-TW</p>
<p>导航：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  首頁: / || fas fa-home</span><br><span class="line">  時間軸: /archives/ || fas fa-archive</span><br><span class="line">  標籤: /tags/ || fas fa-tags</span><br><span class="line">  分類: /categories/ || fas fa-folder-open</span><br><span class="line">  清單||fa fa-heartbeat:</span><br><span class="line">    音樂: /music/ || fas fa-music</span><br><span class="line">    照片: /Gallery/ || fas fa-images</span><br><span class="line">    電影: /movies/ || fas fa-video</span><br><span class="line">  友鏈: /link/ || fas fa-link</span><br><span class="line">  關於: /about/ || fas fa-heart</span><br></pre></td></tr></table></figure>



<p>代码高亮</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">highlight_theme: light</span><br></pre></td></tr></table></figure>

<p><code>mac light</code> 苹果白</p>
<p>代码复制</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">highlight_copy: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>代码换行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">code_word_wrap: <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>文章置顶</p>
<p>可以直接在文章的front-matter區域裏添加sticky: 1屬性來把這篇文章置頂。數值越大，置頂的優先級越大。</p>
<p>文章封面：</p>
<p>文章的markdown文檔上,在Front-matter添加cover,並填上要顯示的圖片地址。<br>如果不配置cover,可以設置顯示默認的cover.</p>
<p>如果不想在首頁顯示cover,可以設置為false</p>
<p>修改 主題配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否顯示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面顯示的位置</span></span><br><span class="line">  <span class="comment"># 三個值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 當沒有設置cover時，默認的封面顯示</span></span><br><span class="line">  <span class="attr">default_cover:</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果配置了多张图片，会随机选择一张作为cover</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://fastly.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://fastly.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg2.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://fastly.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg3.png</span></span><br></pre></td></tr></table></figure>



<p>文章分页显示</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># post_pagination (分頁)</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><img src="/butterfly.assets/image-20220706205949568.png" alt="image-20220706205949568"></p>
<p>文章meta显示</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 顯示日期還是相對日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示分類</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 顯示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章頁日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 顯示日期還是相對日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章頁是否顯示分類</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章頁是否顯示標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 顯示描述性文字</span></span><br></pre></td></tr></table></figure>

<p><strong>侧边栏：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">true</span>  <span class="comment">#默认所有的页面全打开</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post</span></span><br></pre></td></tr></table></figure>









<h1 id="主页设置"><a href="#主页设置" class="headerlink" title="主页设置"></a>主页设置</h1><h2 id="站点语言"><a href="#站点语言" class="headerlink" title="站点语言"></a>站点语言</h2><p>要配，这个决定显示是英文还是汉语</p>
<p><code>_config.yml</code>里面把默认语言改成zh-CN</p>
<h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">孙文祥的博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;遇到困难睡大觉&quot;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Sun</span> <span class="string">wen</span> <span class="string">xiang</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h2><p>在butterfly的配置里面</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"> <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line"><span class="comment"># Archives: /archives/ || fas fa-archive</span></span><br><span class="line"> <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line"> <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br></pre></td></tr></table></figure>

<h2 id="博客头像和一开始的顶部图"><a href="#博客头像和一开始的顶部图" class="headerlink" title="博客头像和一开始的顶部图"></a>博客头像和一开始的顶部图</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Avatar (頭像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/touxiang.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable all banner image</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/img/1.png</span></span><br></pre></td></tr></table></figure>

<p>这个的目录是在buttfly里面的source&#x2F;img里面的</p>
<h2 id="按照文章更新顺序排序"><a href="#按照文章更新顺序排序" class="headerlink" title="按照文章更新顺序排序"></a>按照文章更新顺序排序</h2><p>找到主配置文件 <code>_config.yml</code>，然后修改 <code>index_generator</code> 的 <code>order_by</code> 为 <code>-updated</code> 即可:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-updated</span></span><br></pre></td></tr></table></figure>

<h1 id="美化-x2F-特效"><a href="#美化-x2F-特效" class="headerlink" title="美化&#x2F;特效"></a>美化&#x2F;特效</h1><p>静止彩带：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">false</span>  <span class="comment">#设置是否每次点击都更换綵带</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment"># false 手机端不显示 true 手机端显示</span></span><br></pre></td></tr></table></figure>

<p>鼠标点击效果</p>
<p>烟花：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span> <span class="comment"># -1 or 9999</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>文字：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击出现文字，文字可自行修改</span></span><br><span class="line"><span class="attr">ClickShowText:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">I</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LOVE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">YOU</span></span><br><span class="line">  <span class="attr">fontSize:</span> <span class="string">15px</span></span><br><span class="line">  <span class="attr">random:</span> <span class="literal">false</span> <span class="comment"># 文字随机显示</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<p>字数统计：</p>
<p>先在根目录下载：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="改了源码的部分"><a href="#改了源码的部分" class="headerlink" title="改了源码的部分"></a>改了源码的部分</h1><h2 id="修改侧边栏排序顺序"><a href="#修改侧边栏排序顺序" class="headerlink" title="修改侧边栏排序顺序"></a>修改侧边栏排序顺序</h2><p>在<code>themes\butterfly\scripts\helpers\aside_categories.js</code>修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const orderby = options.orderby || &#x27;name&#x27; // 默认-&gt;name-&gt;按categories字母顺序</span></span><br><span class="line"><span class="keyword">const</span> orderby = options.<span class="property">orderby</span> || <span class="string">&#x27;length&#x27;</span>  <span class="comment">// length-&gt;按categories下文章数量排序</span></span><br><span class="line"><span class="comment">// const order = options.order || 1  // 默认-&gt;1-&gt;升序 -1-&gt;逆序</span></span><br><span class="line"><span class="keyword">const</span> order = options.<span class="property">order</span> || -<span class="number">1</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>es6-ES6概念&amp;新增语法&amp;内置对象拓展</title>
    <url>/2022/07/21/es6-ES6%E6%A6%82%E5%BF%B5&amp;%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95&amp;%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<h1 id="ES6相关概念"><a href="#ES6相关概念" class="headerlink" title="ES6相关概念"></a>ES6相关概念</h1><h2 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h2><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c541f48f6d2.png"></p>
<h2 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h2><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p>
<ul>
<li>变量提升特性增加了程序运行时的不可预测性</li>
<li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li>
</ul>
<h1 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h1><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>ES6中新增了用于声明变量的关键字</p>
<h3 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<p>**注意：**使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p>
<h3 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// a is not defined </span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">    tmp = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> tmp; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/07/06/62c543b1a27c2.png"></p>
<p>**经典面试题图解：**此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/07/06/62c543b5d71b8.png"></p>
<p>**经典面试题图解：**此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>let关键字就是用来声明变量的</li>
<li>使用let关键字声明的变量具有块级作用域</li>
<li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li>
<li>防止循环变量变成全局变量</li>
<li>使用let关键字声明的变量没有变量提升</li>
<li>使用let关键字声明的变量具有暂时性死区特性</li>
</ul>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>声明常量，常量就是值（内存地址）不能变化的量</p>
<h3 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<h3 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span>; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<h3 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">100</span>; <span class="comment">// Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">ary[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ary); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]; </span></span><br><span class="line">ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul>
<li><p>const声明的变量是一个常量</p>
</li>
<li><p>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> hoby <span class="keyword">of</span> person.<span class="property">hobbies</span>（这是个数组）) <span class="comment">//是可以的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>声明 const时候必须要给定值</p>
</li>
</ul>
<h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul>
<li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li>
<li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li>
<li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li>
</ul>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c543bd12d0b.png"></p>
<blockquote>
<p>变量提升：</p>
<p>什么叫<strong>变量提升</strong>？ 原则上<strong>变量</strong>应该先声明后使用，但是程序员小白常常忘记声明就使用了<strong>变量</strong>，这样做<strong>js</strong>代码在执行的时候不报错，只是返回了一个undefined。 这种情况就是<strong>变量提升</strong>。 计算机执行的时候会把未声明就使用的<strong>变量</strong>隐式的放到代码的最顶端。</p>
<p>为了避免这些问题，通常我们在每个作用域开始前声明这些变量，这也是正常的 JavaScript 解析步骤，易于我们理解。</p>
<p>javascript 的 strict mode 不允许使用未声明的变量</p>
</blockquote>
<blockquote>
<p>全局变量:</p>
<p><strong>函数</strong>外声明的变量作用域是全局的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carName = <span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这里可以使用 carName 变量</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这里也可以使用 carName 变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>局部变量:</p>
<p>函数内声明的变量只在这个函数里面有用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里不能使用 carName 变量</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> carName = <span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里可以使用 carName 变量</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这里不能使用 carName 变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>块级作用域:</p>
<p>在所在的大括号是有用的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里不能使用 x 变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在代码块里面可以访问到，代码块外面无法访问到</p>
</blockquote>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p>
<h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//1</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//2</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果解构不成功，变量的值为undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myName, <span class="attr">age</span>: myAge&#125; = person; <span class="comment">// myName myAge 属于别名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myAge); <span class="comment">// 20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>为了防止从数组中去除一个值为<code>undefined</code>的对象，可以在表达式左边的数组中为任意对象预设默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line"></span><br><span class="line">[a=<span class="number">5</span>, b=<span class="number">7</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>



<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ul>
<li>解构赋值就是把数据结构分解，然后给变量进行赋值</li>
<li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li>
<li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li>
<li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li>
</ul>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>ES6中新增的定义函数的方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;&#125; <span class="comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;&#125;<span class="comment">//代表把一个函数赋值给fn</span></span><br></pre></td></tr></table></figure>

<p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> num1 + num2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; num1 + num2; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果形参只有一个，可以省略小括号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span> (v) &#123;</span><br><span class="line">     <span class="keyword">return</span> v;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">fn</span> = v =&gt; v;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125; </span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123; </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//this 指向 是obj对象</span></span><br><span class="line">     <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123; </span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">const</span> resFn = fn.<span class="title function_">call</span>(obj); </span><br><span class="line"> <span class="title function_">resFn</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ul>
<li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li>
<li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li>
</ul>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">	<span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">say</span>();<span class="comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span></span><br></pre></td></tr></table></figure>

<h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (first, ...args) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">// 10</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// [20, 30] </span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);  <span class="comment">// &#x27;wangwu&#x27; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);  <span class="comment">// [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h1><h2 id="Array-的扩展方法"><a href="#Array-的扩展方法" class="headerlink" title="Array 的扩展方法"></a>Array 的扩展方法</h2><h3 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h3><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">...ary  <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...ary);    <span class="comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h4 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 </span></span><br><span class="line"> <span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="keyword">let</span> ary2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"> <span class="keyword">let</span> ary3 = [...ary1, ...ary2];</span><br><span class="line"> <span class="comment">// 方法二 </span></span><br><span class="line"> ary1.<span class="title function_">push</span>(...ary2);</span><br></pre></td></tr></table></figure>

<h4 id="将类数组或可遍历对象转换为真正的数组"><a href="#将类数组或可遍历对象转换为真正的数组" class="headerlink" title="将类数组或可遍历对象转换为真正的数组"></a>将类数组或可遍历对象转换为真正的数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oDivs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">oDivs = [...oDivs];</span><br></pre></td></tr></table></figure>

<h3 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h3><p>将伪数组或可遍历对象转换为真正的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个集合</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//转成数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123; </span><br><span class="line">    <span class="string">&quot;0&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;length&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAry = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, <span class="function"><span class="params">item</span> =&gt;</span> item *<span class="number">2</span>)<span class="comment">//[2,4]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：如果是对象，那么属性需要写对应的索引</p>
<h3 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h3><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [&#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"> &#125;, &#123; </span><br><span class="line">     <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"> &#125;]; </span><br><span class="line"> <span class="keyword">let</span> target = ary.<span class="title function_">find</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.<span class="property">id</span> == <span class="number">2</span>);<span class="comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h3><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> index = ary.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value &gt; <span class="number">9</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h3><p>判断某个数组是否包含给定的值，返回布尔值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">2</span>) <span class="comment">// true </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h2><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>ES6新增的创建字符串的方式，使用反引号定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zhangsan`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello,my name is <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure>

<h4 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> html = <span class="string">` &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt; `</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;哈哈哈哈 追不到我吧 我就是这么强大&#x27;</span>;</span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="keyword">let</span> greet = <span class="string">`<span class="subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(greet); <span class="comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h3><ul>
<li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li>
<li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// true </span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>)       <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h3><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>)      <span class="comment">// &quot;xxx&quot; </span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>)  <span class="comment">// &quot;hellohello&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Set-数据结构"><a href="#Set-数据结构" class="headerlink" title="Set 数据结构"></a>Set 数据结构</h2><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<p>Set本身是一个构造函数，用来生成 Set 数据结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br></pre></td></tr></table></figure>

<p>Set函数可以接受一个数组作为参数，用来初始化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);<span class="comment">//&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ul>
<li>add(value)：添加某个值，返回 Set 结构本身</li>
<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li>
<li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li>
<li>clear()：清除所有成员，没有返回值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">3</span>); <span class="comment">// 向 set 结构中添加值 </span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">2</span>)             <span class="comment">// 删除 set 结构中的2值   </span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">1</span>)                <span class="comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span></span><br><span class="line">s.<span class="title function_">clear</span>()               <span class="comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="Promise使用"><a href="#Promise使用" class="headerlink" title="Promise使用"></a>Promise使用</h1><h2 id="异步调用介绍"><a href="#异步调用介绍" class="headerlink" title="异步调用介绍"></a>异步调用介绍</h2><p>接口A需要的入参是接口B响应中的部分或全部内容，这时在执行请求接口A的代码时就需要等待接口B响应完成以后再执行，这就涉及<strong>异步调用</strong>。</p>
<blockquote>
<p>这里异步调用不是说JS可以异步执行：JS是单线程（single-threaded），总是同步执行，但有多种多样的回调机制（callback mechanisms）。通过回调机制，可以实现异步操作。注意，回调函数只是多种多样的回调机制中的一种，正在介绍的Promise对象和将要介绍的Async函数都是回调机制的一种。</p>
</blockquote>
<h2 id="Promise介绍"><a href="#Promise介绍" class="headerlink" title="Promise介绍"></a>Promise介绍</h2><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件(通常是一个异步操作)的结果</p>
<blockquote>
<p>Promise是一个对象，它可以用来表示一个异步操作的执行结果（成功或者失败）并将执行结果返回</p>
<p>顾名思义 “承诺”将来某个时间点返回的结果</p>
</blockquote>
<h2 id="ES5-pk-ES6-对于异步编程的写法"><a href="#ES5-pk-ES6-对于异步编程的写法" class="headerlink" title="ES5 pk ES6 对于异步编程的写法"></a>ES5 pk ES6 对于异步编程的写法</h2><p><strong>ES5</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="keyword">function</span> (<span class="params">n, m, callback</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> count = n + m</span><br><span class="line">    <span class="title function_">callback</span>(count)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">count</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="keyword">function</span> (<span class="params">countNum</span>) &#123;</span><br><span class="line">  <span class="title function_">count</span>(countNum, <span class="number">4</span>, <span class="keyword">function</span> (<span class="params">countNum</span>) &#123;</span><br><span class="line">    <span class="title function_">count</span>(countNum, <span class="number">5</span>, <span class="keyword">function</span> (<span class="params">countNum</span>) &#123;</span><br><span class="line">      <span class="title function_">count</span>(countNum, <span class="number">6</span>, <span class="keyword">function</span> (<span class="params">countNum</span>) &#123;</span><br><span class="line">        <span class="title function_">count</span>(countNum, <span class="number">7</span>, <span class="keyword">function</span> (<span class="params">countNum</span>) &#123;</span><br><span class="line">          <span class="title function_">count</span>(countNum, <span class="number">8</span>, <span class="keyword">function</span> (<span class="params">countNum</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(countNum); </span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// N秒后输出 35</span></span><br></pre></td></tr></table></figure>

<p><strong>ES6</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="keyword">function</span> (<span class="params">n,m</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> countNum = n + m</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(countNum)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> countNum = <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">countNum = <span class="title function_">count</span>(<span class="number">4</span>,countNum)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">countNum</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">count</span>(<span class="number">5</span>,countNum)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">countNum</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">count</span>(<span class="number">6</span>,countNum)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">countNum</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">count</span>(<span class="number">7</span>,countNum)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">countNum</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">count</span>(<span class="number">8</span>,countNum)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">countNum</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(countNum);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(countNum); <span class="comment">// N秒后输出 35</span></span><br></pre></td></tr></table></figure>

<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123; ... &#125;);</span><br></pre></td></tr></table></figure>

<p>既然<code>promise</code>是对象，便可通过构造函数创建<code>promise</code>实例，Promise构造函数接受一个函数作为参数，而作为Promise的入参，该函数又接受两个函数作为入参：其中第一个函数（通常命名为<code>resolve</code>）在<code>promise</code>返回预期结果时调用，第二个函数（通常命名为<code>reject</code>）在不能如期返回结果时调用。</p>
<p>通常，promise 实例和then()以及catch()方法一起使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 来用伪代码解释一下用法</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="comment">/* 异步操作成功 */</span> ) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">promise</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">/* resolve */</span></span><br><span class="line">  <span class="comment">/* 成功回调 */</span></span><br><span class="line">  <span class="comment">/* res为回调的参数 也就是value */</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">/* reject */</span></span><br><span class="line">  <span class="comment">/* 失败回调 */</span></span><br><span class="line">  <span class="comment">/* err为回调的参数 也就是error*/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Promise是一个构造方法，里面的两个参数是resolve和reject （这是两个函数，由js引擎提供，不用自己部署）</p>
<p>resolve函数的作用是将Promise的状态从未完成变成成功(即从Pending（未完成） 变为Resolved),在异步操作成功的时候调用，并将异步操作的结果，作为参数传递出去，</p>
<p>reject函数的作用是将将Promise对象的状态从“未完成”变为“失败”(即从Pending变为Rejected)，在异步操作失败时调用，并将 异步操作报出的错误，作为参数传递出去。</p>
<blockquote>
<p>总结：</p>
<p>resolve会触发then方法，reject会触发catch方法</p>
<p>在执行resolve或者reject前，都叫做Pending状态</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// 生成一个0到100的随机数</span></span><br><span class="line">  <span class="keyword">let</span> num = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">100</span>)</span><br><span class="line">  <span class="comment">// num &gt; 50的时候执行resolve 更改状态</span></span><br><span class="line">  <span class="keyword">if</span> ( num &gt; <span class="number">50</span> ) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(num);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// num &lt;= 50的时候执行reject 更改状态  </span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;num 大于 50&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;num 不大于 50&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">  &#125;,<span class="number">10</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="title function_">reject</span>()</span><br><span class="line">  &#125;,<span class="number">10</span>)</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line"><span class="comment">//依次输出 1 2 7 3 5 4</span></span><br></pre></td></tr></table></figure>

<p>上面代码中分成两个线程，主线程和异步线程。</p>
<p>主线程里面是console.log(1) 、console.log(2)、promise的构造函数和最后的console.log(7) ，没错，Promise的构造函数并不是异步的，他的回调函数then和catch才是异步的；</p>
<p>异步线程里面有Promise的构造函数里面的两个setTimeout和then、catch的回调函数，也就是console.log(3)、console.log(4)、console.log(5)和console.log(6)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">js<span class="string">`是要先执行主线程的代码，输出`</span><span class="number">1</span> <span class="number">2</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>

<p>主线程没有代码了继续执行异步线程的代码，先输出第一个setTimeout里面的 3 ，然后更改了Promise的状态变为”成功”，执行Promise的回调，由于状态变为了resolve，则执行then回调，输出5 ，最后继续执行第二个setTimeout输出4，但是由于Promise的状态已经不是Pending而是resolve所以不会在改变状态，不会在执行reject，所以6没有被输出。</p>
<h2 id="批量执行"><a href="#批量执行" class="headerlink" title="批量执行"></a>批量执行</h2><p>Promise为我们一共了一个批量执行的方法Promise.all</p>
<p>Promise.all会同时执行所有任务，当所有任务执行成功的时候，触发then回调，如果有一个任务失败了，则会立即触发catch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> post1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;post1&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> post2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;post2&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> post3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;post3&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">50</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([post1,post2,post3]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败了&#x27;</span>,err);  <span class="comment">// 失败了 post1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h1 id="async-x2F-await（ES7）"><a href="#async-x2F-await（ES7）" class="headerlink" title="async &#x2F; await（ES7）"></a>async &#x2F; await（ES7）</h1><blockquote>
<p>Promise对象相比回调函数已直观很多：将横向发展的回调函数变成了链式的写法。但Promise对象在编写和理解上实际并没有那么轻松。</p>
<p><strong>而调用Async函数时会自动返回一个Promise对象：当这个异步函数返回预期值时，Promise会调用resolve方法处理这个预期值；如果这个异步函数抛出异常或者返回非法值时，Promise会调用reject方法进行处理。</strong></p>
<p>虽然依然使用Promise，但这一切都是交给Async函数去处理，我们不需要编写代码处理Promise对象，只关注返回值就好了。</p>
<p>和直接用promise相比节约了不少代码。我们不需要写.then，不需要写匿名函数处理Promise的resolve值，也不需要定义多余的data变量，还避免了嵌套代码。</p>
</blockquote>
<p><strong>async</strong> 函数书写的方式跟我们普通的函数书写方式一样，只不过是前面多了一个 async 关键字，并且函数返回的是一个 <strong>Promise</strong> 对象，所接收的值就是函数 <strong>return</strong> 的值。</p>
<p>在 <strong>async</strong> 函数内部可以使用 <strong>await</strong> 命令，表示等待一个异步函数的返回。<strong>await</strong> 后面跟着的是一个 <strong>Promise</strong> 对象，如果不是的话，系统会调用 <strong>Promise.resolve()</strong> 方法，将其转为一个 resolve 的 <strong>Promise</strong> 的对象。</p>
<p>在等待Promise返回值时，Async函数暂停执行<code>await</code>表达式后面的代码，但不会组侧js主线程，及async函数后面的代码正常执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;小明&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">name</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(name)); <span class="comment">// 小明</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="function"><span class="params">obj</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj));    <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面将会在 1000 毫秒之后输出 hello world</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;hello world&#x27;</span>),<span class="number">1000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>().<span class="title function_">then</span>(<span class="function"><span class="params">src</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(src));</span><br></pre></td></tr></table></figure>

<p>如果 <strong>await</strong> 后面的 <strong>Promise</strong> 的状态是 <strong>reject</strong> ，那么整个 <strong>async</strong> 函数就会中断执行，错误会被 <strong>async</strong> 函数的 <strong>catch</strong> 捕获到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))    <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="promise和async对比"><a href="#promise和async对比" class="headerlink" title="promise和async对比"></a>promise和async对比</h2><p><strong>promise</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">promise1</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value1</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">promise2</span>(value1)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">value2</span> =&gt;</span> &#123;        </span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">promise3</span>(value1, value2)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>async</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> value1 = <span class="keyword">await</span> <span class="title function_">promise1</span>()</span><br><span class="line">  <span class="keyword">const</span> value2 = <span class="keyword">await</span> <span class="title function_">promise2</span>(value1)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">promise3</span>(value1, value2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs</title>
    <url>/2022/07/21/nodejs/</url>
    <content><![CDATA[<h1 id="初识Nodejs"><a href="#初识Nodejs" class="headerlink" title="初识Nodejs"></a>初识Nodejs</h1><p>一个基于 Chrome V8 引擎 的 JavaScript 运行时环境</p>
<blockquote>
<p>node js is all built around callbacks  in order to implement an asynchronous behavior</p>
<p>后台进程处理占用时间长的东西，处理完毕后用回调通知主线程执行继续剩下的任务</p>
</blockquote>
<img src="https://tu.sunning.fit/i/2022/07/18/62d52f83ebb15.png" alt="image-20220718180137564" style="zoom:67%;" />

<p>因为node只是个js运行时环境，所以,输入控制台输入node可以正常写js</p>
<img src="https://tu.sunning.fit/i/2022/07/18/62d53d913535c.png" alt="image-20220718190133587" style="zoom: 67%;" />

<p>在js里面所有的文件都被当作是一个模块</p>
<p><code>ps:win+D 选择下一个被选择的语句</code></p>
<h2 id="node运行环境里的操作"><a href="#node运行环境里的操作" class="headerlink" title="node运行环境里的操作"></a>node运行环境里的操作</h2><p> 在运行环境里敲tab可以看到node自带的变量和环境</p>
<p>__ 代表之前的一项运行结果</p>
<p>String.或者之类的用tab可</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textIn = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./txt/input.txt&quot;</span>, <span class="string">&quot;utf-8&quot;</span>); <span class="comment">//读取文件的同步版本</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(textIn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textOut = <span class="string">`This is:<span class="subst">$&#123;textIn&#125;</span>\nCreated on <span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>;</span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&quot;./txt/output.txt&quot;</span>, textOut);</span><br></pre></td></tr></table></figure>

<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p><img src="https://tu.sunning.fit/i/2022/07/19/62d623f6d057f.png" alt="image-20220719112436169"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;./txt/start.txt&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="function">(<span class="params">err, data1</span>) =&gt;</span> &#123;    <span class="comment">//读取文件的异步版本</span></span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">`./txt/<span class="subst">$&#123;data1&#125;</span>.txt`</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="function">(<span class="params">err, data2</span>) =&gt;</span> &#123;   <span class="comment">//读取的文件，编码，回调函数（包含读取错误的err和读取到的数据data2）</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./txt/append.txt&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="function">(<span class="params">err, data3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data3);</span><br><span class="line">      fs.<span class="title function_">writeFile</span>(<span class="string">&quot;./txt/final.txt&quot;</span>, <span class="string">`<span class="subst">$&#123;data2&#125;</span>\n<span class="subst">$&#123;data3&#125;</span>`</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;your file has been written&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;will read file!&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/dev-data/data.json`</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//这里用同步的因为是一开始只执行一次的代码</span></span><br><span class="line"><span class="keyword">const</span> dataObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pathName = req.<span class="property">url</span>;</span><br><span class="line">  <span class="keyword">if</span> (pathName === <span class="string">&quot;/&quot;</span> || pathName === <span class="string">&quot;/overview&quot;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;This is the OVERVIEW&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathName === <span class="string">&quot;/product&quot;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;This is the PRODUCT&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathName === <span class="string">&quot;/api&quot;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(data); <span class="comment">//这里不写productData因为它是一个js对象</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;</span><br><span class="line">      <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/html&quot;</span>, <span class="comment">//指定类型</span></span><br><span class="line">      <span class="string">&quot;my-own-header&quot;</span>: <span class="string">&quot;hello-world&quot;</span>, <span class="comment">//可以传递自己定义的信息</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;Page not found!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//接收一个回调（请求req,响应res）</span></span><br><span class="line">  <span class="comment">// res.end(&quot;Hello from the server!&quot;);</span></span><br><span class="line">&#125;);</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">1234</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="function">() =&gt;</span> &#123;   <span class="comment">//监听端口号，监听默认的地址</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Listening to requests on port 1234&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>







<h2 id="dirname和-x2F-的区别"><a href="#dirname和-x2F-的区别" class="headerlink" title="__dirname和.&#x2F; 的区别"></a>__dirname和.&#x2F; 的区别</h2><p>__dirname返回当前js文件所在文件夹的路径， .&#x2F;返回当前的工作目录，类似process.cwd()方法</p>
<p>但是当用require的时候，.&#x2F;还是代表当前js文件所在的文件夹的路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Include path module</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Methods to display directory</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;__dirname:    &quot;</span>, __dirname);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;process.cwd() : &quot;</span>, process.<span class="title function_">cwd</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;./ : &quot;</span>, path.<span class="title function_">resolve</span>(<span class="string">&quot;./&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;filename: &quot;</span>, __filename);</span><br></pre></td></tr></table></figure>

<p>假如路径是桌面，移动到父目录</p>
<p>键入<code>node Desktop/index.js</code>命令运行代码 </p>
<p><img src="https://tu.sunning.fit/i/2022/07/19/62d6798fa05f7.png" alt="image-20220719172948071"></p>
<h2 id="例：Node-Farm"><a href="#例：Node-Farm" class="headerlink" title="例：Node Farm"></a>例：Node Farm</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">///////////////////////////////////////</span></span><br><span class="line"><span class="comment">//SERVER</span></span><br><span class="line"><span class="keyword">const</span> tempOverview = fs.<span class="title function_">readFileSync</span>(</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/templates/template-overview.html`</span>,</span><br><span class="line">  <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> tempCard = fs.<span class="title function_">readFileSync</span>(</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/templates/template-card.html`</span>,</span><br><span class="line">  <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> tempProduct = fs.<span class="title function_">readFileSync</span>(</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/templates/template-product.html`</span>,</span><br><span class="line">  <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/dev-data/data.json`</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//这里用同步的因为是一开始只执行一次的代码</span></span><br><span class="line"><span class="keyword">const</span> dataObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data); <span class="comment">//把data转换成js对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">replaceTemplate</span> = (<span class="params">temp, product</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> output = temp.<span class="title function_">replace</span>(<span class="regexp">/&#123;%PRODUCTNAME%&#125;/g</span>, product.<span class="property">productName</span>);</span><br><span class="line">  output = output.<span class="title function_">replace</span>(<span class="regexp">/&#123;%IMAGE%&#125;/g</span>, product.<span class="property">image</span>);</span><br><span class="line">  output = output.<span class="title function_">replace</span>(<span class="regexp">/&#123;%PRICE%&#125;/g</span>, product.<span class="property">price</span>);</span><br><span class="line">  output = output.<span class="title function_">replace</span>(<span class="regexp">/&#123;%FROM%&#125;/g</span>, product.<span class="property">from</span>);</span><br><span class="line">  output = output.<span class="title function_">replace</span>(<span class="regexp">/&#123;%UNTRIENTS%&#125;/g</span>, product.<span class="property">nutrients</span>);</span><br><span class="line">  output = output.<span class="title function_">replace</span>(<span class="regexp">/&#123;%QUANTITY%&#125;/g</span>, product.<span class="property">quantity</span>);</span><br><span class="line">  output = output.<span class="title function_">replace</span>(<span class="regexp">/&#123;%DESCRIPTION%&#125;/g</span>, product.<span class="property">description</span>);</span><br><span class="line">  output = output.<span class="title function_">replace</span>(<span class="regexp">/&#123;%ID%&#125;/g</span>, product.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!product.<span class="property">organic</span>)</span><br><span class="line">    output = output.<span class="title function_">replace</span>(<span class="regexp">/&#123;%NOT_ORGANIC%&#125;/g</span>, <span class="string">&quot;not-organic&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; query, pathname &#125; = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>); <span class="comment">//解构赋值</span></span><br><span class="line">  <span class="comment">//url.parse 将url字符串转成对象并返回 parse就是字符串转对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//Overview Page</span></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">&quot;/&quot;</span> || pathname === <span class="string">&quot;/overview&quot;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/html&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> cardsHtml = dataObj</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> <span class="title function_">replaceTemplate</span>(tempCard, el))</span><br><span class="line">      .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cardsHtml);</span><br><span class="line">    <span class="keyword">const</span> output = tempOverview.<span class="title function_">replace</span>(<span class="string">&quot;&#123;%PRODUCT_CARDS%&#125;&quot;</span>, cardsHtml);</span><br><span class="line">    res.<span class="title function_">end</span>(output);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Product Page</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">&quot;/product&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(query);</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/html&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> product = dataObj[query.<span class="property">id</span>];</span><br><span class="line">    <span class="keyword">const</span> output = <span class="title function_">replaceTemplate</span>(tempProduct, product);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">end</span>(output);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//API</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">&quot;/api&quot;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(data); <span class="comment">//这里不写productData因为它是一个js对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Not Found</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;</span><br><span class="line">      <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/html&quot;</span>, <span class="comment">//指定类型</span></span><br><span class="line">      <span class="string">&quot;my-own-header&quot;</span>: <span class="string">&quot;hello-world&quot;</span>, <span class="comment">//可以传递自己定义的信息</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;Page not found!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//接收一个回调（请求req,响应res）</span></span><br><span class="line">  <span class="comment">// res.end(&quot;Hello from the server!&quot;);</span></span><br><span class="line">&#125;);</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">1234</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Listening to requests on port 1234&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Parsing-Variables-from-URLs"><a href="#Parsing-Variables-from-URLs" class="headerlink" title="Parsing Variables from URLs"></a>Parsing Variables from URLs</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; query, pathname &#125; = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>); <span class="comment">//解构赋值</span></span><br></pre></td></tr></table></figure>

<p>url.parse 将url字符串转成对象并返回 </p>
<p>其实只看parse就行，parse是字符串转对象</p>
<blockquote>
<p>后面跟的布尔值参数:</p>
<p>默认的是false</p>
<p>默认为false，&#x2F;&#x2F;foo&#x2F;bar 形式的字符串将被解释成 { pathname: ‘&#x2F;&#x2F;foo&#x2F;bar’ }</p>
<p>如果设置成true，&#x2F;&#x2F;foo&#x2F;bar 形式的字符串将被解释成  { host: ‘foo’, pathname: ‘&#x2F;bar’ }</p>
</blockquote>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>node自带npm</p>
<h3 id="npm有两种类型的包："><a href="#npm有两种类型的包：" class="headerlink" title="npm有两种类型的包："></a>npm有两种类型的包：</h3><p>regular dependencies：写的代码需要用到这些包里面提前写好的东西</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install slugify --save  //save可以不写</span><br></pre></td></tr></table></figure>

<p>生成更易读的url代码</p>
<p>关于用法在npm上面找即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">slugify</span>(<span class="string">&#x27;some string&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">replacement</span>: <span class="string">&#x27;-&#x27;</span>,  <span class="comment">// replace spaces with replacement character, defaults to `-`  //把空格替换成什么</span></span><br><span class="line">  <span class="attr">remove</span>: <span class="literal">undefined</span>, <span class="comment">// remove characters that match regex, defaults to `undefined`</span></span><br><span class="line">  <span class="attr">lower</span>: <span class="literal">false</span>,      <span class="comment">// convert to lower case, defaults to `false`</span></span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">false</span>,     <span class="comment">// strip special characters except replacement, defaults to `false`</span></span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;vi&#x27;</span>,       <span class="comment">// language code of the locale to use</span></span><br><span class="line">  <span class="attr">trim</span>: <span class="literal">true</span>         <span class="comment">// trim leading and trailing replacement chars, defaults to `true`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>







<p>development dependencies: 开发的时候用，项目完成的时候就不需要了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install nodemon --save-dev</span><br></pre></td></tr></table></figure>

<p>写node的时候更改代码自动刷新</p>
<p>使用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nodemon index.js</span><br></pre></td></tr></table></figure>





<p>全局安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure>



<h3 id="没有全局安装的包如何使用："><a href="#没有全局安装的包如何使用：" class="headerlink" title="没有全局安装的包如何使用："></a>没有全局安装的包如何使用：</h3><p>没有全局安装的包不能直接在命令行使用，想要使用本地安装的包可以在package.json写命令</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;modemon index.js&quot;</span>  <span class="comment">//自己写</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h3 id="Package-Versioning-and-Updating"><a href="#Package-Versioning-and-Updating" class="headerlink" title="Package Versioning and Updating"></a>Package Versioning and Updating</h3><p>1.3.4 主要版本 次要版本 补丁版本</p>
<p>主要版本破坏性更新，次要版本引入新的功能，和之前的次要版本兼容，补丁版本是修复bug的版本</p>
<p>查看过时版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></table></figure>

<p>只查看过时的补丁版本</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在package.json的配置文件里面把版本号前面的^换成～</span></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;slugify&quot;</span><span class="punctuation">:</span> <span class="string">&quot;～1.6.5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">npm outdated  <span class="comment">//就只会查带~的补丁版本了</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">* 是所有版本，包括主要版本，</span><br><span class="line">^ 是所有次要版本</span><br><span class="line">~ 是所有补丁版本</span><br></pre></td></tr></table></figure>





<p>安装指定版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install slugify@1.0.0</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>一些需要了解的芝士</title>
    <url>/2022/07/12/%E4%B8%80%E4%BA%9B%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E8%8A%9D%E5%A3%AB/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3快速上手</title>
    <url>/2022/07/21/vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="Vue3简介"><a href="#Vue3简介" class="headerlink" title="Vue3简介"></a>Vue3简介</h2><img src="https://tu.sunning.fit/i/2022/05/30/6294580d1760e.png" style="width:200px" />

<ul>
<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>
</ul>
<h2 id="Vue3带来了什么"><a href="#Vue3带来了什么" class="headerlink" title="Vue3带来了什么"></a>Vue3带来了什么</h2><h3 id="源码的升级"><a href="#源码的升级" class="headerlink" title="源码的升级"></a>源码的升级</h3><ul>
<li><p>使用Proxy代替defineProperty实现响应式</p>
</li>
<li><p>重写虚拟DOM的实现和Tree-Shaking</p>
<p>……</p>
</li>
</ul>
<h3 id="新的特性"><a href="#新的特性" class="headerlink" title="新的特性"></a>新的特性</h3><ol>
<li><p>Composition API（组合API）</p>
<ul>
<li>setup配置</li>
<li>ref与reactive</li>
<li>watch与watchEffect</li>
<li>provide与inject</li>
<li>……</li>
</ul>
</li>
<li><p>新的内置组件</p>
<ul>
<li>Fragment </li>
<li>Teleport</li>
<li>Suspense</li>
</ul>
</li>
<li><p>其他改变</p>
<ul>
<li>新的生命周期钩子</li>
<li>data 选项应始终被声明为一个函数</li>
<li>移除keyCode支持作为 v-on 的修饰符</li>
<li>……</li>
</ul>
</li>
</ol>
<h1 id="创建Vue3-0工程"><a href="#创建Vue3-0工程" class="headerlink" title="创建Vue3.0工程"></a>创建Vue3.0工程</h1><h2 id="使用-vue-cli-创建"><a href="#使用-vue-cli-创建" class="headerlink" title="使用 vue-cli 创建"></a>使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h2 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>
<p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p>
<ul>
<li>什么是vite？—— 新一代前端构建工具。</li>
<li>优势如下：<ul>
<li>开发环境中，无需打包操作，可快速的冷启动。</li>
<li>轻量快速的热重载（HMR）。</li>
<li>真正的按需编译，不再等待整个应用编译完成。</li>
</ul>
</li>
<li>传统构建 与 vite构建对比图</li>
</ul>
<p><img src="https://tu.sunning.fit/i/2022/05/30/62945814f0458.png" style="width:500px;height:280px;float:left" /><img src="https://tu.sunning.fit/i/2022/05/30/6294581a7a104.png" style="width:480px;height:280px" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h2 id="一开始"><a href="#一开始" class="headerlink" title="一开始"></a>一开始</h2><h3 id="html-body-app的设置"><a href="#html-body-app的设置" class="headerlink" title="html,body,#app的设置"></a>html,body,#app的设置</h3><p>在app.vue里面</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="css清除默认样式"><a href="#css清除默认样式" class="headerlink" title="css清除默认样式"></a>css清除默认样式</h3><p>assets里面建一个css文件夹，然后resert.less，引入在<code>main.ts</code>里面进行引入</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* http://meyerweb.com/eric/tools/css/reset/</span></span><br><span class="line"><span class="comment">   v2.0 | 20110126</span></span><br><span class="line"><span class="comment">   License: none (public domain)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">applet</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">acronym</span>, <span class="selector-tag">address</span>, <span class="selector-tag">big</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">s</span>, <span class="selector-tag">samp</span>,</span><br><span class="line"><span class="selector-tag">small</span>, <span class="selector-tag">strike</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">tt</span>, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>, <span class="selector-tag">u</span>, <span class="selector-tag">i</span>, <span class="selector-tag">center</span>,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">embed</span>,</span><br><span class="line"><span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>,</span><br><span class="line"><span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">output</span>, <span class="selector-tag">ruby</span>, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>,</span><br><span class="line"><span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font</span>: inherit;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* HTML5 display-role reset for older browsers */</span></span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</span><br><span class="line">  <span class="attribute">quotes</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="工程结构分析"><a href="#工程结构分析" class="headerlink" title="工程结构分析"></a>工程结构分析</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入的不再是Vue构造函数了，引入的是createApp的工厂函数(工厂函数不用new了，直接调用就会给一个)</span></span><br><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建了应用实例对象——app （类似之前vue2中的vm,但app更轻量（没有用不到的方法和属性了））</span></span><br><span class="line"><span class="title function_">createAPP</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/05/30/62945820e18a5.png" alt="image-20220530012437060"></p>
<h1 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h1><p>v-text 用来显示文本</p>
<p>v-html 用来展示富文本  就是可以接受html的语法</p>
<p>v-if 用来控制元素的显示隐藏（切换真假DOM）</p>
<p>v-else-if 表示 v-if 的“else if 块”。可以链式调用</p>
<p>v-else v-if条件收尾语句</p>
<p>v-show 用来控制元素的显示隐藏（display none block Css切换）</p>
<p>v-on 简写@ 用来给元素添加事件</p>
<p>v-bind 简写:  用来绑定元素的属性Attr （默认的是读取不了script里面的内容的，加上: 就可以了</p>
<p>v-model 双向绑定  没弄双向绑定之前，数据只能从script流向页面，但是页面的数据不能流回页面，但是vue3还需要ref来变成响应式，vue不把所有的东西都作为响应式了，只有定义了ref的才是响应式</p>
<p>v-for 用来遍历元素</p>
<p>v-on修饰符 冒泡案例</p>
<h2 id="v-show-vs-v-if"><a href="#v-show-vs-v-if" class="headerlink" title="v-show vs v-if"></a>v-show vs v-if</h2><p>v-show是通过css显示隐藏，v-if是直接不渲染了，频繁切换用v-show</p>
<h2 id="添加事件"><a href="#添加事件" class="headerlink" title="@ 添加事件"></a>@ 添加事件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div @click=&quot;parent&quot;&gt;</span><br><span class="line">      	&lt;button @click.stop=&quot;xxxx&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>默认是冒泡的，从子对象的事件到父对象的事件</p>
<p>如果想要阻止冒泡，加上个stop即可</p>
<p>想要阻止默认事件： <code>@click.prevent</code>即可</p>
<h2 id="方便地控制哪个css被渲染"><a href="#方便地控制哪个css被渲染" class="headerlink" title="方便地控制哪个css被渲染"></a>方便地控制哪个css被渲染</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span> 123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">type <span class="title class_">Cls</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">a</span>: boolean,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">b</span>: boolean</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="attr">cls</span>:<span class="title class_">Cls</span>=&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">a</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">b</span>:<span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.a</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.b</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p><strong>在Vue3 v-model 是破坏性更新:就是和vue2不兼容了</strong></p>
<p>v-model 其实是一个语法糖 通过props 和 emit组合而成的</p>
<p>默认值的改变:</p>
<ul>
<li>prop：value -&gt; modelValue；</li>
<li>事件：input -&gt; update:modelValue；</li>
<li>v-bind 的 .sync 修饰符和组件的 model 选项已移除</li>
<li>新增 支持多个v-model</li>
<li>新增 支持自定义 修饰符</li>
</ul>
<h3 id="自定义修饰符："><a href="#自定义修饰符：" class="headerlink" title="自定义修饰符："></a>自定义修饰符：</h3><p>添加到组件v-model的修饰符将通过modelModifiers prop提供给组件</p>
<p>父A</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">B</span> <span class="attr">v-model:title.aaa</span>=<span class="string">&#x27;xxx&#x27;</span> <span class="attr">v-model.xiaoman</span>=<span class="string">&#x27;xxx&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子B</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span>=&#123;</span><br><span class="line">    modelModifiers?:&#123;</span><br><span class="line">        <span class="attr">xiaomain</span>:<span class="built_in">boolean</span></span><br><span class="line">    &#125;</span><br><span class="line">    titleModifiers&#123;   <span class="comment">//title就是v-model:title.aaa 绑定上的那个aaa</span></span><br><span class="line">    	<span class="attr">aaa</span>:<span class="built_in">boolean</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PropsData</span>=defineProps&lt;<span class="title class_">Props</span>&gt;()</span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">PropsData</span>.<span class="property">titleModifiers</span>?.<span class="property">aaa</span>)&#123;</span><br><span class="line">    xxxxxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="directive自定义指令"><a href="#directive自定义指令" class="headerlink" title="directive自定义指令"></a>directive自定义指令</h2><p><strong>破坏性更新：和vue2不兼容</strong></p>
<h1 id="常用-Composition-API-组合式API"><a href="#常用-Composition-API-组合式API" class="headerlink" title="常用 Composition API (组合式API)"></a>常用 Composition API (组合式API)</h1><p>都是函数</p>
<p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>
<h2 id="拉开序幕的setup"><a href="#拉开序幕的setup" class="headerlink" title="拉开序幕的setup"></a>拉开序幕的setup</h2><ol>
<li><p>理解：Vue3.2中一个新的配置项，值为一个函数。</p>
</li>
<li><p>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</p>
</li>
<li><p>组件中所用到的：数据、方法等等，均要配置在setup中，所有的计算属性，生命周期巴拉巴拉都写在setup里面</p>
</li>
<li><p>setup函数的两种返回值：</p>
<ol>
<li><p>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</p>
</li>
<li><p><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></p>
<blockquote>
<p>在script里面要先引入h渲染函数</p>
<p>h(  xxx ,xxxx )  xxx是调用哪一种元素，xxxx是这种元素的内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;<span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;上硅谷&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure>


<p>简化的写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;上硅谷&#x27;</span>);</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;h&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;IndexPage&#x27;</span>,</span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> test=<span class="string">&quot;123&quot;</span></span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">     test,</span><br><span class="line">     <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;上硅谷&#x27;</span>);  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>h渲染函数，想要把哪种元素渲染到哪个位置 上面是把’上硅谷’渲染到h1上，然后templete里面写的东西就都不用了，全被渲染函数替换掉了</p>
<p>需要把渲染的结果返回，所以完全体是这样的<code>() =&gt;&#123; return  h(&#39;h1&#39;, &#39;上硅谷&#39;)&#125;</code></p>
</blockquote>
</li>
</ol>
<p>在setup里面的变量在setup里面可以随意使用</p>
<p>要在外面使用的东西要有return的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mname = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">let</span> mage = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">`name <span class="subst">$&#123;mname&#125;</span> age <span class="subst">$&#123;mage&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      mname,</span><br><span class="line">      mage,</span><br><span class="line">      test,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>注意点：</p>
<ol>
<li>尽量不要与Vue2.x配置混用<ul>
<li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li>
<li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li>
<li>如果有重名, setup优先。</li>
</ul>
</li>
<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，<strong>但需要Suspense和异步组件的配合</strong>(见下面Suspense笔记)）</li>
</ol>
</li>
</ol>
<h2 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h2><blockquote>
<p>vue2中的ref作用</p>
<p>为了选择到某个东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;navbar ref=&quot;navbar&quot;&gt;&lt;/navbar&gt;</span><br><span class="line">    &lt;pagefooter ref=&quot;pagefooter&quot;&gt;&lt;/pagefooter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&#x27;#app&#x27;,</span><br><span class="line">  mounted:function () &#123;</span><br><span class="line">    //ready,</span><br><span class="line">    //这里怎么直接访问navbar的navs和pagefooter的footer值呢，</span><br><span class="line">    console.log(this.$refs.navbar.navs);</span><br><span class="line">    console.log(this.$refs.pagefooter.footer);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>就相当于是方便读取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div ref=<span class="string">&quot;demo&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">demo</span>和 <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[ref=demo]&#x27;</span>);作用一样</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>作用: 定义一个响应式的数据</p>
</li>
<li><p>语法: <code>const xxx = ref(initValue)</code> </p>
<ul>
<li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li>
<li>这样会把上面的initValue属性加工成RefImpl对象, reference(引用) implement（实现）    这个的全称是引用实现的实例对象——引用对象<br><img src="https://tu.sunning.fit/i/2022/05/30/62945829c7ce0.png" alt="image-20220530133705520"></li>
</ul>
<p>把get,set方法都放到原型对象上面去了,需要访问这个引用对象，访问的是它的value值</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54691e1792.png" alt="image-20220530134558541"></p>
<p>如果需要响应式的是一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> job=<span class="title function_">ref</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>:xxx,</span><br><span class="line">    <span class="attr">salary</span>:xxx,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54696a9ab2.png" alt="image-20220530135402225"></p>
<p>变成的是一个proxy对象（es6的，windows上面自带的）</p>
<p>这时候访问就是  job.value.salary了</p>
<ul>
<li>JS中操作数据： <code>xxx.value</code></li>
<li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>
</ul>
</li>
<li><p>备注：</p>
<ul>
<li>接收的数据可以是：基本类型、也可以是对象类型。</li>
<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>
<li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数（用的是proxy）。</li>
</ul>
</li>
</ul>
<h3 id="isRef"><a href="#isRef" class="headerlink" title="isRef"></a>isRef</h3><p>判断是不是一个ref对象</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, <span class="title class_">Ref</span>,isRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">message</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = <span class="title function_">ref</span>(<span class="string">&quot;我是message&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">notRef</span>:<span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeMsg</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  message.<span class="property">value</span> = <span class="string">&quot;change msg&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(message)); <span class="comment">//true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(notRef)); <span class="comment">//false</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a>shallowRef</h3><p>创建一个跟踪自身.value变化的ref,但不会把其值也变成响应式的（浅响应式）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Ref</span>, shallowRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Obj</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">message</span>: <span class="title class_">Ref</span>&lt;<span class="title class_">Obj</span>&gt; = <span class="title function_">shallowRef</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;小满&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeMsg</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  message.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;大满&#x27;</span> <span class="comment">//改name不会去相应，改value会做出相应</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="shallowRef视图更新的问题"><a href="#shallowRef视图更新的问题" class="headerlink" title="shallowRef视图更新的问题"></a>shallowRef视图更新的问题</h4><p><img src="https://tu.sunning.fit/i/2022/07/14/62d021c2e43ed.png" alt="image-20220714220136008"></p>
<p>在change里面如果更改一个ref对象的话，虽然msg是shallowRef,但是也会出发msg的更新，因为源码里面最后都会调用triggerRefavlue,然后把shallowRef的值也一并更新了</p>
<h3 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef"></a>triggerRef</h3><p>强制更新页面dom</p>
<p>常和shallowRef打配合</p>
<p>改完值之后，强制更新一下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Ref</span>, shallowRef,triggerRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Obj</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">message</span>: <span class="title class_">Ref</span>&lt;<span class="title class_">Obj</span>&gt; = <span class="title function_">shallowRef</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;小满&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeMsg</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  message.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;大满&#x27;</span></span><br><span class="line"> <span class="title function_">triggerRef</span>(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h3><p>自定义ref</p>
<p>customRef是个工厂函数返回一个对象，并且实现get和set</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title class_">Myref</span>&lt;T&gt;(<span class="attr">value</span>:T)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">customRef</span>(<span class="function">(<span class="params">track,trigger</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="title function_">track</span>();</span><br><span class="line">                <span class="keyword">return</span> vlue;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">newVal:T</span>)&#123;</span><br><span class="line">                value=newVal;</span><br><span class="line">                <span class="title function_">trigger</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message=<span class="title class_">Myref</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h2><ul>
<li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li>
<li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li>
<li>reactive定义的响应式数据是“深层次的”。</li>
<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>
</ul>
<h3 id="数组异步赋值问题"><a href="#数组异步赋值问题" class="headerlink" title="数组异步赋值问题"></a>数组异步赋值问题</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person=reactive&lt;<span class="built_in">number</span>[]&gt;([]);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    person=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>这样页面不会变化，因为脱离了响应式</p>
<h4 id="解决一"><a href="#解决一" class="headerlink" title="解决一"></a>解决一</h4><p>使用push</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    person.<span class="title function_">push</span>(...arr);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h4 id="解决二"><a href="#解决二" class="headerlink" title="解决二"></a>解决二</h4><p>包裹一层对象</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span>=&#123;</span><br><span class="line">    list?:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person=reactive&lt;<span class="title class_">Person</span>&gt;(&#123;</span><br><span class="line">    <span class="attr">list</span>:[]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    person.<span class="property">list</span>=arr;</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>



<h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><p>拷贝一份proxy对象将其设置为只读</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">拷贝一份proxy对象将其设置为只读</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; reactive ,<span class="keyword">readonly</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;<span class="attr">count</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title function_">readonly</span>(person)</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//person.count++</span></span><br><span class="line"> </span><br><span class="line"> copy.<span class="property">count</span>++</span><br></pre></td></tr></table></figure>



<h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a>shallowReactive</h3><p>只能对浅层的数据，如果是深层的数据只会改变值，不会改变视图</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,  <span class="comment">//可以监视到改变</span></span><br><span class="line">  <span class="attr">first</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,   <span class="comment">//深层的改变监视不到了</span></span><br><span class="line">    <span class="attr">second</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">shallowReactive</span>(obj)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  state.<span class="property">a</span> = <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  state.<span class="property">first</span>.<span class="property">b</span> = <span class="number">8</span></span><br><span class="line">  state.<span class="property">first</span>.<span class="property">second</span>.<span class="property">c</span> = <span class="number">9</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">change1</span>();</span><br><span class="line"><span class="title function_">change2</span>(); <span class="comment">//如果直接写在这里，vue还没开始绑定，这时候对数据的操作是会改变数值的</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>绑定之后才是浅层reactive,没绑定之前对数据的操作是会改变的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; state &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;change1&quot;&gt;test1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;change2&quot;&gt;test2&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>在这用按钮触发的才会是shallowReactive</p>
<h2 id="to全家桶"><a href="#to全家桶" class="headerlink" title="to全家桶"></a>to全家桶</h2><h3 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h3><p>如果原始对象是非响应式的就不会更新视图，数据是会变的，但如果引用的原始数据就是响应式的是会改变视图的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;change&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">      &#123;&#123;state&#125;&#125;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, toRef &#125; from &#x27;vue&#x27;</span><br><span class="line"> </span><br><span class="line">const obj = &#123;</span><br><span class="line">   foo: 1,</span><br><span class="line">   bar: 1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">const state = toRef(obj, &#x27;bar&#x27;)</span><br><span class="line">// bar 转化为响应式对象</span><br><span class="line"> </span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">   state.value++   //对state操作，obj中的bar是会改变的，但是不会更新在页面中</span><br><span class="line">   console.log(obj, state);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>toRef和ref区别：</strong></p>
<p>相同： <code>ref</code>可以用于创建一个响应式数据，而<code>toRef</code>也可以创建一个响应式数据<br>如果利用<code>ref</code>函数将某个对象中的属性变成响应式数据，修改响应式数据是不会影响到原始数据。</p>
<p>而使用toRef将每个对象中的属性变成响应式数据，修改响应式是会影响到原始数据的</p>
<p>原因：ref本质是拷贝，和原始数据引用没有关系，toRef本质是引用，与原始数据有关联</p>
</blockquote>
<h3 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h3><p>帮我们批量创建ref对象，主要是方便我们解构使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">   <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">bar</span>: <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = <span class="title function_">toRefs</span>(obj) <span class="comment">//这样foo和bar都是响应式的了</span></span><br><span class="line"> </span><br><span class="line">foo.<span class="property">value</span>++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo, bar);</span><br></pre></td></tr></table></figure>



<h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h3><p>把响应式对象变成普通对象</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;  <span class="comment">//响应式的</span></span><br><span class="line">   <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">bar</span>: <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">toRaw</span>(obj)  <span class="comment">//普通的</span></span><br><span class="line"><span class="comment">// 响应式对象转化为普通对象</span></span><br></pre></td></tr></table></figure>





<h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><h3 id="computed函数"><a href="#computed函数" class="headerlink" title="computed函数"></a>computed函数</h3><ul>
<li><p>与Vue2.x中computed配置功能一致</p>
</li>
<li><p>写法</p>
<p>变成组合api了，想要用计算属性需要从vue里面引入计算属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> person=<span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">firstName</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">        <span class="attr">lastName</span>:<span class="string">&#x27;456&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">	<span class="comment">//计算属性——简写</span></span><br><span class="line">    person.<span class="property">fullName</span> = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;  <span class="comment">//可以直接把这个计算属性添加到person上面</span></span><br><span class="line">        <span class="comment">//反正也用不了this了，不如直接写箭头函数了</span></span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    person.<span class="property">fullName</span> = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        person</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>或者使用get,set</p>
<p>get是读取计算属性的时候使用的，set是计算属性发生改变的时候使用的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name=<span class="title function_">computed</span>(&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> fistName.<span class="property">value</span>+lastName.<span class="property">value</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params"></span>)&#123;</span><br><span class="line">        firstName.<span class="property">value</span>+lastName.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>一个购物车的例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">      &lt;table style=&quot;width:800px&quot; border&gt;</span><br><span class="line">         &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">               &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">               &lt;th&gt;数量&lt;/th&gt;</span><br><span class="line">               &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">               &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">         &lt;/thead&gt;</span><br><span class="line">         &lt;tbody&gt;</span><br><span class="line">            &lt;tr :key=&quot;index&quot; v-for=&quot;(item, index) in data&quot;&gt;</span><br><span class="line">               &lt;td align=&quot;center&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">               &lt;td align=&quot;center&quot;&gt;</span><br><span class="line">                  &lt;button @click=&quot;AddAnbSub(item, false)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">                  &#123;&#123; item.num &#125;&#125;</span><br><span class="line">                  &lt;button @click=&quot;AddAnbSub(item, true)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">               &lt;/td&gt;</span><br><span class="line">               &lt;td align=&quot;center&quot;&gt;&#123;&#123; item.num * item.price &#125;&#125;&lt;/td&gt;</span><br><span class="line">               &lt;td align=&quot;center&quot;&gt;</span><br><span class="line">                  &lt;button @click=&quot;del(index)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">               &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">         &lt;/tbody&gt;</span><br><span class="line">         &lt;tfoot&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">               &lt;td&gt;&lt;/td&gt;</span><br><span class="line">               &lt;td&gt;&lt;/td&gt;</span><br><span class="line">               &lt;td&gt;&lt;/td&gt;</span><br><span class="line">               &lt;td align=&quot;center&quot;&gt;总价:&#123;&#123; $total &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">         &lt;/tfoot&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed, reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">type Shop = &#123;</span><br><span class="line">   name: string,</span><br><span class="line">   num: number,</span><br><span class="line">   price: number</span><br><span class="line">&#125;</span><br><span class="line">let $total = ref&lt;number&gt;(0)</span><br><span class="line">const data = reactive&lt;Shop[]&gt;([</span><br><span class="line">   &#123;</span><br><span class="line">      name: &quot;小满的袜子&quot;,</span><br><span class="line">      num: 1,</span><br><span class="line">      price: 100</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      name: &quot;小满的裤子&quot;,</span><br><span class="line">      num: 1,</span><br><span class="line">      price: 200</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      name: &quot;小满的衣服&quot;,</span><br><span class="line">      num: 1,</span><br><span class="line">      price: 300</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      name: &quot;小满的毛巾&quot;,</span><br><span class="line">      num: 1,</span><br><span class="line">      price: 400</span><br><span class="line">   &#125;</span><br><span class="line">])</span><br><span class="line"> </span><br><span class="line">const AddAnbSub = (item: Shop, type: boolean = false): void =&gt; &#123;</span><br><span class="line">   if (item.num &gt; 1 &amp;&amp; !type) &#123;</span><br><span class="line">      item.num--</span><br><span class="line">   &#125;</span><br><span class="line">   if (item.num &lt;= 99 &amp;&amp; type) &#123;</span><br><span class="line">      item.num++</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">const del = (index: number) =&gt; &#123;  //这里这个删除商品的操作</span><br><span class="line">   data.splice(index, 1)</span><br><span class="line">&#125;</span><br><span class="line">$total = computed&lt;number&gt;(() =&gt; &#123;</span><br><span class="line">   return data.reduce((prev, next) =&gt; &#123;   </span><br><span class="line">      return prev + (next.num * next.price)  //reduce函数，prev前面的计算的值，next指每一个变量和它对应的price</span><br><span class="line">   &#125;, 0)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h3><p> 与Vue2.x中watch配置功能一致</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)  <span class="comment">//这个时候newValue和oldValue都变成数组了</span></span><br><span class="line">&#125;，&#123;</span><br><span class="line">    <span class="attr">deep</span>:<span class="literal">true</span>  <span class="comment">//reactive对象默认就是deep,开不开都一样</span></span><br><span class="line">    <span class="attr">immediate</span>:<span class="literal">true</span> <span class="comment">//这个是一开始就执行一遍，一开始没有新值，所以新值会变成undefined</span></span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p> watch可以同时侦听多个属性，比如上面的例子里面的<code>[sum,msg]</code></p>
<p><img src="https://tu.sunning.fit/i/2022/07/15/62d0dfa47d3cc.png" alt="image-20220530175213693"></p>
<p> watch可以传递三个参数，一个是监视的物品，一个是监视的函数，一个是监视的配置</p>
<p> 深度监视当没有子物体的时候，也会给一个空数组</p>
<blockquote>
<p>如果对象用ref创建，ref.value会自动用reactive方式创建一个proxy对象，这时候</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(xxx,,)</span><br></pre></td></tr></table></figure>

<p>这时候监视xxx因为地址没有变，改xxx的值不会被监视到，而xxx.value就是监视proxy了，这时候的改变就能监视到</p>
<p>或者配置项开深度监视（ref创建的是不自动开深度监视的）</p>
</blockquote>
<p> 两个“坑”：</p>
<ul>
<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>
<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据，这个用的不是sum.value（因为这样子就访问value的那个具体的值了，ref定义的直接监视那个东西就行）</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;    <span class="comment">//这个不用写xxx=watch 因为这个是一种行为，不是数据</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)  <span class="comment">//这个时候newValue和oldValue都变成数组了</span></span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">			若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">			若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的 某个属性，要把这个东西写成一个函数</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性（就是情况二和情况四的结合）</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure>

<h3 id="watchEffect函数"><a href="#watchEffect函数" class="headerlink" title="watchEffect函数"></a>watchEffect函数</h3><p> watch的套路是：既要指明监视的属性，也要指明监视的回调。</p>
<p> watchEffect的套路是：不用指明监视哪个属性，监视的<strong>回调中用到哪个属性，那就监视哪个属性</strong>。</p>
<p> watchEffect有点像computed：</p>
<ul>
<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>
<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="清除副作用"><a href="#清除副作用" class="headerlink" title="清除副作用"></a>清除副作用</h4><p>在触发监听之前会调用一个函数可以处理你的逻辑例如防抖</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; watchEffect, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> message = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> message2 = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> <span class="title function_">watchEffect</span>(<span class="function">(<span class="params">oninvalidate</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message&#x27;</span>, message.<span class="property">value</span>);</span><br><span class="line">    <span class="title function_">oninvalidate</span>(<span class="function">()=&gt;</span>&#123;  <span class="comment">//就算上面有其他的语句，也是先执行这个回调，然后再处理其他的</span></span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>停止跟踪，watchEffect返回一个函数，调用后将停止更新</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stop =  <span class="title function_">watchEffect</span>(<span class="function">(<span class="params">oninvalidate</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//console.log(&#x27;message&#x27;, message.value);</span></span><br><span class="line">    <span class="title function_">oninvalidate</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message2&#x27;</span>, message2.<span class="property">value</span>);</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">flush</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">    onTrigger () &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">stop</span>()</span><br></pre></td></tr></table></figure>

<h4 id="更多配置项"><a href="#更多配置项" class="headerlink" title="更多配置项"></a>更多配置项</h4><h4 id="watchEffect调式"><a href="#watchEffect调式" class="headerlink" title="watchEffect调式"></a>watchEffect调式</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; watchEffect, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> message = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> message2 = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> <span class="title function_">watchEffect</span>(<span class="function">(<span class="params">oninvalidate</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//console.log(&#x27;message&#x27;, message.value);</span></span><br><span class="line">    <span class="title function_">oninvalidate</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message2&#x27;</span>, message2.<span class="property">value</span>);</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">flush</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">    onTrigger (e) &#123;   <span class="comment">//有onTrigger的，被监视的属性发生变化会有断点</span></span><br><span class="line">        <span class="keyword">debugger</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>







<h1 id="虚拟DOM和diff算法"><a href="#虚拟DOM和diff算法" class="headerlink" title="虚拟DOM和diff算法"></a>虚拟DOM和diff算法</h1><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><p>通过js来生成一个ADT节点树</p>
<p>dom上面有很多的属性，直接操作dom浪费性能，所以尽可能少操作dom,用js的计算性能换取操作dom消耗的性能</p>
<h2 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h2><p><img src="https://tu.sunning.fit/i/2022/07/14/62d012cb241ee.png" alt="image-20220714205105964"></p>
<p>没有key的就从前往后比对，如果一样的就复用，遇到第一个不一样的就覆盖，后面就正常生成。</p>
<p>有key的，先从前往后读，遇到第一个不一样的停下来，接着从后往前读，遇到第一个不一样的停下来，然后接着对剩下的东西比较，尽可能的复用</p>
<h1 id="Vue3-0中的响应式原理"><a href="#Vue3-0中的响应式原理" class="headerlink" title="Vue3.0中的响应式原理"></a>Vue3.0中的响应式原理</h1><h2 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h2><ul>
<li><p>实现原理：</p>
<ul>
<li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>
</li>
<li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>存在问题：</p>
<ul>
<li>新增属性、删除属性, 界面不会更新。</li>
<li>直接通过下标修改数组, 界面不会自动更新。</li>
</ul>
</li>
<li><p>解决</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="string">&#x27;名称&#x27;</span>,<span class="string">&#x27;增加的值&#x27;</span>，xxx)</span><br><span class="line"><span class="variable language_">this</span>.$set(<span class="string">&#x27;名称&#x27;</span>,<span class="string">&#x27;增加的值&#x27;</span>，xxx)</span><br><span class="line">如果是数组</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(xxx.<span class="property">xxx</span>（数组），下标,更改的值)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h2><p>给对象新增加一个东西，删除一个东西都可以检测到，用数组的下标来修改物体也可以</p>
<p>删除是 <code>delete person.name</code>   用delete来删除一个对象中的属性，如果用js没有vue删除是删不掉的，需要</p>
<p><code>configurable:true</code>配置项才能删除 </p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5469e61c2a.png" alt="image-20220530151738812"></p>
<ul>
<li>实现原理: <ul>
<li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p>
</li>
<li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p>
</li>
<li><p>&#96;&#96;&#96;js<br>const p&#x3D;new Proxy(person,{})</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  这时候对p的更改，可以体现在person上面</span><br><span class="line"></span><br><span class="line">- MDN文档中描述的Proxy与Reflect：</span><br><span class="line">  - Proxy：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</span><br><span class="line">  </span><br><span class="line">  - Reflect：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflec t</span><br><span class="line">  </span><br><span class="line">    现在很多object上面有用的方法都移植到了reflect上面</span><br><span class="line">    </span><br><span class="line">    ![image-20220530162452177](vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.assets/image-20220530162452177.png)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ```js</span><br><span class="line">    p=new Proxy(data, &#123;</span><br><span class="line">    	// 拦截读取属性值</span><br><span class="line">        get (target, prop) &#123;  //prop是更改的data的属性值，target在这里就是p</span><br><span class="line">        	return Reflect.get(target, prop)</span><br><span class="line">        &#125;,</span><br><span class="line">        // 拦截设置属性值或添加新属性</span><br><span class="line">        set (target, prop, value) &#123;  //value是想要更改的数值</span><br><span class="line">        	return Reflect.set(target, prop, value)  //会给一个布尔返回值，用来代表操作成功还是失败了</span><br><span class="line">        //这句和上面一句作用是一样的   target[prop]=value  //为什么不用.，因为用.会把后面的识别成字符串，相当于target.prop,而用[]会识别成变量，相当于target.prop代表的值</span><br><span class="line">        &#125;,</span><br><span class="line">        // 拦截删除属性</span><br><span class="line">        deleteProperty (target, prop) &#123;   </span><br><span class="line">        	return Reflect.deleteProperty(target, prop)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    proxy.name = &#x27;tom&#x27;   </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="reactive对比ref"><a href="#reactive对比ref" class="headerlink" title="reactive对比ref"></a>reactive对比ref</h2><ul>
<li>从定义数据角度对比：<ul>
<li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。 </li>
<li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li>
<li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li>
</ul>
</li>
<li>从原理角度对比：<ul>
<li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>
<li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li>
</ul>
</li>
<li>从使用角度对比：<ul>
<li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li>
<li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li>
</ul>
</li>
</ul>
<h2 id="setup的两个注意点"><a href="#setup的两个注意点" class="headerlink" title="setup的两个注意点"></a>setup的两个注意点</h2><p>在vue2中的组件传递数据，在用子组件的时候加上配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;子组件名字  xxx=<span class="string">&#x27;xxx&#x27;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>在子组件的声明的地方</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;xxx&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>声明之后，这个xxx就会挂载在xxx上面，如果不写xxx,在$attrs.xxx也有（这里是无法确定类型的）</p>
<p>插槽也是，类似的实现，位置在 $slots 里面（vue2中）</p>
<ul>
<li><p>setup执行的时机</p>
<ul>
<li>在beforeCreate之前执行一次，this是undefined</li>
</ul>
</li>
<li><p>setup的参数</p>
<ul>
<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>
<li>context：上下文对象<ul>
<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>
<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>
<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c546a80ddac.png" alt="image-20220530171050467"></p>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>生命周期看红色的那些，绿色的是流程</p>
<div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px" /></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px" /></div>















































<ul>
<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul>
<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>
<li><code>destroyed</code>改名为 <code>unmounted</code></li>
</ul>
</li>
<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：（不是必须，也可以像vue2一样写在配置项里面）</li>
<li>拉开序幕的setup就等同于beforeCreate,created<ul>
<li><code>beforeCreate</code>&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li>
<li><code>created</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li>
<li><code>beforeMount</code> &#x3D;&#x3D;&#x3D;&gt;<code>onBeforeMount</code></li>
<li><code>mounted</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onMounted</code></li>
<li><code>beforeUpdate</code>&#x3D;&#x3D;&#x3D;&gt;<code>onBeforeUpdate</code></li>
<li><code>updated</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUpdated</code></li>
<li><code>beforeUnmount</code> &#x3D;&#x3D;&gt;<code>onBeforeUnmount</code></li>
<li><code>unmounted</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUnmounted</code></li>
</ul>
</li>
</ul>
<p>方便写箭头函数用df书写</p>
<p>组合式api的生命周期会比在配置项里面的生命周期快</p>
<h1 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h1><h2 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p>父组件<code>v-bind</code>绑定一个数据，子组件通过defineProps接受传过来的值</p>
<h4 id="父"><a href="#父" class="headerlink" title="父"></a>父</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Menu</span> v-<span class="attr">bind</span>:data=<span class="string">&quot;data&quot;</span>  title=<span class="string">&quot;我是标题&quot;</span>&gt;&lt;/<span class="title class_">Menu</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="子"><a href="#子" class="headerlink" title="子"></a>子</h4><p>通过defineProps 来接受 <strong>defineProps是无须引入的直接使用即可</strong></p>
<p>defineProps接受值，defineEmits接受方法</p>
<p>如果我们使用的TypeScript</p>
<p>可以使用传递字面量类型的纯类型语法做为参数</p>
<p>ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        菜单区域 &#123;&#123; title &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; data &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">defineProps&lt;&#123;</span></span><br><span class="line"><span class="language-xml">    title:string,</span></span><br><span class="line"><span class="language-xml">    data:number[]</span></span><br><span class="line"><span class="language-xml">&#125;&gt;()</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>js</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>:&#123;</span><br><span class="line">        <span class="attr">default</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>:<span class="built_in">string</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>:<span class="title class_">Array</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="设一个默认的对象值"><a href="#设一个默认的对象值" class="headerlink" title="设一个默认的对象值"></a>设一个默认的对象值</h4><p>withDefaults是个函数也是无须引入开箱即用接受一个props函数第二个参数是一个对象设置默认值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">    title?: <span class="built_in">string</span>,</span><br><span class="line">    data?: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">withDefaults</span>(defineProps&lt;<span class="title class_">Props</span>&gt;(), &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="function">() =&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;)   <span class="comment">//这里就是设置了一个默认的对象值</span></span><br></pre></td></tr></table></figure>

<h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>Vue中子组件不能直接向父组件传值，子组件需要调用父组件传递过来的方法，然后在父组件中通过方法修改值</p>
<p>先在父组件中通过自定义属性向子组件传递方法<code>@func=&quot;sayHello&quot;</code>然后子组件通过</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">emit</span>(<span class="string">&#x27;父组件传递过来的方法&#x27;</span>,<span class="string">&#x27;向这个方法传入的值&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>调用父组件的方法，变相地向父组件传值</p>
<h4 id="父-1"><a href="#父-1" class="headerlink" title="父"></a>父</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 通过子组件自定义属性传递值、方法 --&gt;</span><br><span class="line">    &lt;Subassembly :value=&quot;doc&quot; @func=&quot;sayHello&quot; /&gt;</span><br><span class="line">    &lt;button @click=&quot;sayHello(doc)&quot;&gt;父组件按钮&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import Subassembly from &#x27;./Subassembly.vue&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 待传递的值</span><br><span class="line">const doc = ref(&#x27;hello&#x27;);</span><br><span class="line"></span><br><span class="line">// 待传递的方法</span><br><span class="line">const sayHello = function (data) &#123;</span><br><span class="line">  alert(data);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="子-1"><a href="#子-1" class="headerlink" title="子"></a>子</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 使用父组件传递过来的值 --&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; props.value &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;handelClick&quot;&gt;子组件按钮&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 从 vue 中引入defineProps, defineEmits</span><br><span class="line">import &#123; defineProps, defineEmits &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 接收父组件传递过来的值</span><br><span class="line">const props = defineProps([&#x27;value&#x27;])</span><br><span class="line">// 接收父组件传递过来的方法</span><br><span class="line">const emit = defineEmits([&#x27;func&#x27;])</span><br><span class="line"></span><br><span class="line">const handelClick = function  () &#123;</span><br><span class="line">    //调用父组件传递过来的方法，传入参数修改父组件的值 </span><br><span class="line">    emit(&#x27;func&#x27;, &#x27;hello world&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure>



<h2 id="依赖注入-Provide-x2F-Inject-vue组件的任何地方都可以传值和读取值"><a href="#依赖注入-Provide-x2F-Inject-vue组件的任何地方都可以传值和读取值" class="headerlink" title="依赖注入(Provide &#x2F; Inject) [vue组件的任何地方都可以传值和读取值]"></a>依赖注入(Provide &#x2F; Inject) [vue组件的任何地方都可以传值和读取值]</h2><p><img src="https://tu.sunning.fit/i/2022/07/17/62d3de30a999c.png" alt="image-20220717180222001"></p>
<p>传递数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">provide</span>(<span class="string">&#x27;flag&#x27;</span>,flag)</span><br></pre></td></tr></table></figure>

<p>子组件接受</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">inject&lt;<span class="title class_">Ref</span>&lt;<span class="built_in">number</span>&gt;&gt;(<span class="string">&#x27;flag&#x27;</span>,<span class="title function_">ref</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>


<blockquote>
<p>这里也可以 <code>inject&lt;Ref&lt;number&gt;&gt;(&#39;flag&#39;)</code>  但是因为没有默认值在ts里面会报错，所以要给一个默认值,</p>
<p>Ref表示这是一个Ref包裹的泛型，是number类型</p>
</blockquote>
<blockquote>
<p><strong>原理：</strong></p>
<p>provide默认情况下，实例继承父类的provides对象，如果当前组件有自己的provide,使用父provides对象作为原型来创建自己的provides对象，在inject只需要查询原型链就行</p>
</blockquote>
<h2 id="兄弟组件传参和Bus"><a href="#兄弟组件传参和Bus" class="headerlink" title="兄弟组件传参和Bus"></a>兄弟组件传参和Bus</h2><h3 id="还是父子"><a href="#还是父子" class="headerlink" title="还是父子"></a>还是父子</h3><p>A传递给兄弟B,可以先传递给父亲C,然后再由C传递给B实现传参</p>
<p>就相当于重新练习了父子组件传参</p>
<p>A自定义事件，派发出事件和值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;emitB&quot;&gt;派发一个事件&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const emit = defineEmits([&#x27;on-click&#x27;])  //自定义一个事件</span><br><span class="line">let flag = false;</span><br><span class="line">const emitB = () =&gt; &#123;</span><br><span class="line">  flag = !flag;</span><br><span class="line">  emit(&quot;on-click&quot;, flag);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>C获得A的自定义事件，然后传递给B</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;A @on-click=&quot;getFlag&quot;&gt;&lt;/A&gt;</span><br><span class="line">  &lt;B :flag=&quot;flag&quot;&gt;&lt;/B&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;ref&#125; from &quot;vue&quot;;</span><br><span class="line">import A from &quot;../../components/A.vue&quot;</span><br><span class="line">import B from &quot;../../components/B.vue&quot;</span><br><span class="line"></span><br><span class="line">let flag = ref(false);</span><br><span class="line">const getFlag = (params: boolean) =&gt; &#123;</span><br><span class="line">  flag.value = params;</span><br><span class="line">  console.log(params)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>B读取A发送的变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&#123;&#123;flag&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">type Props = &#123;</span><br><span class="line">  flag: boolean</span><br><span class="line">&#125;</span><br><span class="line">defineProps&lt;Props&gt;();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="手写BUS"><a href="#手写BUS" class="headerlink" title="手写BUS"></a>手写BUS</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">BusClass</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="attr">emit</span>: <span class="function">(<span class="params">name: T</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">on</span>: <span class="function">(<span class="params">name: T, callback: <span class="built_in">Function</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">BusParams</span> = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">symbol</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">List</span> = &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="title class_">BusParams</span>]: <span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt;; <span class="comment">//on可以注册多个函数，他们的名字是允许一样的，所以用Array</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BusParams</span>&gt; <span class="keyword">implements</span> <span class="title class_">BusClass</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">list</span>: <span class="title class_">List</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//构造的时候要把这个数组置空</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="attr">name</span>: T, ...<span class="attr">args</span>: <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">//获取所有的参数，具体的参数是什么就不在乎了</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">eventName</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt; = <span class="variable language_">this</span>.<span class="property">list</span>[name];</span><br><span class="line">    eventName.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args); <span class="comment">//因为args解构完成正好是一个数组，所以可以直接传入args</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="attr">name</span>: T, <span class="attr">callback</span>: <span class="title class_">Function</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">fn</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt; = <span class="variable language_">this</span>.<span class="property">list</span>[name] || [];</span><br><span class="line">    fn.<span class="title function_">push</span>(callback);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>[name] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Bus</span>(); <span class="comment">//这是导出了个bus对象(由new Bus生成的)</span></span><br></pre></td></tr></table></figure>

<p>自己写完之后传值就和vue2的bus一样了</p>
<p>传</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">bus.<span class="title function_">emit</span>(<span class="string">&#x27;on-click&#x27;</span>, flag);</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">bus.<span class="title function_">on</span>(<span class="string">&#x27;on-click&#x27;</span>, <span class="function">(<span class="params">Flag: <span class="built_in">boolean</span></span>) =&gt;</span> &#123;  <span class="comment">//后面接一个回调函数，函数传入的变量是on-click传的东西</span></span><br><span class="line">  flag.<span class="property">value</span> = <span class="title class_">Flag</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Mitt"><a href="#Mitt" class="headerlink" title="Mitt"></a>Mitt</h3><p>vue3中<code>$on</code>，<code>$off</code> 和 <code>$once</code> 实例方法已被移除，组件实例不再实现事件触发接口，因此大家熟悉的EventBus便无法使用了。然而我们习惯了使用EventBus，对于这种情况我们可以使用Mitt库</p>
<h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install mitt -S</span><br></pre></td></tr></table></figure>

<h4 id="2-main-ts-初始化"><a href="#2-main-ts-初始化" class="headerlink" title="2.main.ts 初始化"></a>2.main.ts 初始化</h4><p>全局总线，vue 入口文件 main.js 中挂载全局属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mit</span> = <span class="title function_">mitt</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//TypeScript注册</span></span><br><span class="line"><span class="comment">// 由于必须要拓展ComponentCustomProperties类型才能获得类型提示</span></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&quot;vue&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> interface <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">        <span class="attr">$Bus</span>: <span class="keyword">typeof</span> <span class="title class_">Mit</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Vue3挂载全局API</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$Bus</span> = <span class="title class_">Mit</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="3派发，添加，移除，清空"><a href="#3派发，添加，移除，清空" class="headerlink" title="3派发，添加，移除，清空"></a>3派发，添加，移除，清空</h4><p><strong>A组件派发（emit）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;emit1&quot;</span>&gt;</span>emit1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;emit2&quot;</span>&gt;</span>emit2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> instance = <span class="title function_">getCurrentInstance</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">emit1</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    instance?.<span class="property">proxy</span>?.<span class="property">$Bus</span>.<span class="title function_">emit</span>(<span class="string">&#x27;on-num&#x27;</span>, <span class="number">100</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">emit2</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    instance?.<span class="property">proxy</span>?.<span class="property">$Bus</span>.<span class="title function_">emit</span>(<span class="string">&#x27;*****&#x27;</span>, <span class="number">500</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>B组件监听（on）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> instance = <span class="title function_">getCurrentInstance</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">instance?.<span class="property">proxy</span>?.<span class="property">$Bus</span>.<span class="title function_">on</span>(<span class="string">&#x27;on-num&#x27;</span>, <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num,<span class="string">&#x27;===========&gt;B&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>监听所有事件（ on(“*”) ）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">instance?.<span class="property">proxy</span>?.<span class="property">$Bus</span>.<span class="title function_">on</span>(<span class="string">&#x27;*&#x27;</span>,<span class="function">(<span class="params">type,num</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(type,num,<span class="string">&#x27;===========&gt;B&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>移除监听事件（off）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Fn</span> = (<span class="params">num: any</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num, <span class="string">&#x27;===========&gt;B&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">instance?.<span class="property">proxy</span>?.<span class="property">$Bus</span>.<span class="title function_">on</span>(<span class="string">&#x27;on-num&#x27;</span>,<span class="title class_">Fn</span>)<span class="comment">//listen</span></span><br><span class="line">instance?.<span class="property">proxy</span>?.<span class="property">$Bus</span>.<span class="title function_">off</span>(<span class="string">&#x27;on-num&#x27;</span>,<span class="title class_">Fn</span>)<span class="comment">//unListen</span></span><br></pre></td></tr></table></figure>

<p><strong>清空所有监听（clear）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">instance?.<span class="property">proxy</span>?.<span class="property">$Bus</span>.<span class="property">all</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>



<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><p>平时引入组件的方式就是局部引入</p>
<h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p>不用引入，就可以在全局的任意位置使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/css/reset/index.less&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Card/index.vue&#x27;</span>  <span class="comment">//想引入的全局组件</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">component</span>(<span class="string">&#x27;Card&#x27;</span>,<span class="title class_">Card</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)  <span class="comment">//component(&#x27;Card&#x27;,Card) &#x27;Card&#x27;是在全局调用的组件的名称，Card是引入的实例</span></span><br></pre></td></tr></table></figure>



<h2 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h2><p>原理跟我们写js递归是一样的 自己调用自己 通过一个条件来结束递归 否则导致内存泄漏</p>
<p>例子：递归树</p>
<p>在父组件配置数据结构 数组对象格式 传给子组件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TreeList</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  icon?: <span class="built_in">string</span>;</span><br><span class="line">  children?: <span class="title class_">TreeList</span>[] | [];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> data = reactive&lt;<span class="title class_">TreeList</span>[]&gt;([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;no.1&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;no.1-1&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;no.1-1-1&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;no.2&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;no.2-1&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;no.3&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>子组件接收值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TreeList</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  icon?: <span class="built_in">string</span>;</span><br><span class="line">  children?: <span class="title class_">TreeList</span>[] | [];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span>&lt;T&gt; = &#123;</span><br><span class="line">  data?: T[] | [];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">defineProps&lt;<span class="title class_">Props</span>&lt;<span class="title class_">TreeList</span>&gt;&gt;();</span><br></pre></td></tr></table></figure>

<p>template</p>
<p>TreeItem 其实就是当前组件 通过import 把自身又引入了一遍 如果他没有children 了就结束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:10px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tree&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&#x27;clickItem(item)&#x27;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TreeItem</span> @<span class="attr">on-click</span>=<span class="string">&#x27;clickItem&#x27;</span> <span class="attr">v-if</span>=<span class="string">&#x27;item?.children?.length&#x27;</span> <span class="attr">:data</span>=<span class="string">&quot;item.children&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">TreeItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>?的使用</p>
<p>item.children? 判断这个组件是否存在，如果不存在返回undefined类同false</p>
<p>item?.children ?? ‘123’</p>
<p>??双问号就是判断左边的成不成立，如果左边不成立就使用右边</p>
<p>和||的区别是0和””（空字符串）还是会返回默认值，只有null和undefined被??判断做不成立</p>
</blockquote>
<h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>让多个组件使用同一个挂载点，并动态切换，这就是动态组件</p>
<p>和路由的区别在于这个的路由是不变的</p>
<p>通过这里的:is 后面指的不同的组件实例切换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;component :is=&quot;A&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure>





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=&quot;switchCom&quot; :key=&quot;item.name&quot; v-for=&quot;item in data&quot;&gt;</span><br><span class="line">    &#123;&#123;item.name&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import A from &#x27;./Content/index.vue&#x27;</span><br><span class="line">import B from &#x27;./Header/index.vue&#x27;</span><br><span class="line">import C from &#x27;./Menu/index.vue&#x27;</span><br><span class="line">import &#123;reactive&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">type Tabs = &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  comName: any,</span><br><span class="line">&#125;</span><br><span class="line">type Com = Pick&lt;Tabs, &#x27;comName&#x27;&gt;</span><br><span class="line">const data = reactive&lt;Tabs[]&gt;([</span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x27;a组件&#x27;,</span><br><span class="line">    comName: A</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: &#x27;b组件&#x27;,</span><br><span class="line">    comName: B</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: &#x27;c组件&#x27;,</span><br><span class="line">    comName: C</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line">let current = reactive&lt;Com&gt;(&#123;comName: data[0].comName&#125;)</span><br><span class="line">const switchCom = (item: Tabs) =&gt; &#123;</span><br><span class="line">  current.comName = item.comName;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>1.在vue2的时候js是通过组件名称切换的，在vue3 setup是通过组件实例切换的</p>
<p> 2.如果你把组件实例放到Reactive Vue会给你一个警告runtime-core.esm-bundler.js:38 [Vue warn]: Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with <code>markRaw</code> or using <code>shallowRef</code> instead of <code>ref</code>.<br>Component that was made reactive: </p>
<p>这是因为reactive 会进行proxy 代理 而我们组件代理之后毫无用处 节省性能开销 推荐我们使用shallowRef 或者  markRaw 跳过proxy 代理</p>
<blockquote>
<p>Pick的用法</p>
</blockquote>
<h2 id="传送组件Teleport"><a href="#传送组件Teleport" class="headerlink" title="传送组件Teleport"></a>传送组件Teleport</h2><p><code>Teleport</code> 是一种能够将我们的模板渲染至指定<code>DOM</code>节点，不受父级<code>style</code>、<code>v-show</code>等属性影响，但<code>data</code>、<code>prop</code><strong style="color:#DD5145">数据依旧能够共用</strong>的技术</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;xxx&quot;&gt;  //这里写的样式对teleport组件就没啥作用了</span><br><span class="line">    &lt;teleport to=&quot;移动位置&quot;&gt;   //例如 to body //用控制台看结构是什么</span><br><span class="line">	&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">		&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">			&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">			&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>支持class id等选择器</p>
<h2 id="缓存组件-keep-alive"><a href="#缓存组件-keep-alive" class="headerlink" title="缓存组件(keep-alive)"></a>缓存组件(keep-alive)</h2><p>内置组件（keep-alive）</p>
<p>有时候我们不希望组件被重新渲染影响使用体验；或者处于性能考虑，避免多次重复渲 染降低性能。而是希望组件可以缓存下来,维持当前的状态。这时候就需要用到<code>keep-alive</code>组件。 </p>
<p>   如果跑到了另一个页面，原来填的东西还是会保存的，这就是缓存组件的作用</p>
<p>缓存组件里面只能填一个组件。</p>
<h3 id="生命周期的变化"><a href="#生命周期的变化" class="headerlink" title="生命周期的变化"></a>生命周期的变化</h3><p>第一次挂载完成后，之后keep-alive的切换就</p>
<p>onActivated和onDeactivated这两个方法了 </p>
<h3 id="include-和-exclude和max"><a href="#include-和-exclude和max" class="headerlink" title="include 和 exclude和max"></a><code>include</code> 和 <code>exclude</code>和<code>max</code></h3><p> include 和 exclude</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;&quot;</span> <span class="attr">:exclude</span>=<span class="string">&quot;&quot;</span> <span class="attr">:max</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>include 和 exclude prop 允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p>
<p>include指定缓存哪一个，exclude指定不缓存哪一个</p>
<p>max指最多缓存多少个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:max</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>插槽就是子组件提供给父组件使用的一个占位符，用&lt; slot &gt;&lt; &#x2F;slot&gt; 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的&lt; slot&gt;&lt; &#x2F;slot&gt;标签。</p>
<h2 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h2><p>在子组件Dialog放置一个插槽</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">       &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>父组件使用插槽,给这个插槽内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Dialog&gt;</span><br><span class="line">   &lt;template v-slot&gt;</span><br><span class="line">       &lt;div&gt;2132&lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">&lt;/Dialog&gt;</span><br></pre></td></tr></table></figure>

<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>就是给插槽取个名字，一个子组件可以有多个插槽，而且可以放在不同的地方，而父组件填充内容时，可以根据名字把对应内容填充到对应插槽中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>父组件使用对应的名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Dialog&gt;</span><br><span class="line">    &lt;template v-slot:header&gt;</span><br><span class="line">       &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;template v-slot&gt;</span><br><span class="line">       &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;template v-slot:footer&gt;</span><br><span class="line">       &lt;div&gt;3&lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">&lt;/Dialog&gt;</span><br></pre></td></tr></table></figure>

<p>插槽的简写形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Dialog&gt;</span><br><span class="line">    &lt;template #header&gt;</span><br><span class="line">       &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;template #default&gt;</span><br><span class="line">       &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;template #footer&gt;</span><br><span class="line">       &lt;div&gt;3&lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">&lt;/Dialog&gt;</span><br></pre></td></tr></table></figure>



<h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>子组件绑定参数，父组件读取然后使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div v-for=&quot;item in 100&quot;&gt;</span><br><span class="line">            &lt;slot :data=&quot;item&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>通过解构方式取值,下面这个是读子组件传递过来的值，然后把data拿出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;Dialog&gt;</span><br><span class="line">    &lt;template #header&gt;</span><br><span class="line">        &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #default=&quot;&#123; data &#125;&quot;&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; data &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #footer&gt;</span><br><span class="line">        &lt;div&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Dialog&gt;</span><br></pre></td></tr></table></figure>



<h2 id="动态插槽"><a href="#动态插槽" class="headerlink" title="动态插槽"></a>动态插槽</h2><p>插槽可以是一个变量名</p>
<p>定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Dialog&gt;</span><br><span class="line">    &lt;template #[name]&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            23</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Dialog&gt;</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;header&#x27;</span>) <span class="comment">//想切换渲染的对象改name就行了</span></span><br></pre></td></tr></table></figure>

<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p><code>transition</code>组件</p>
<p><code>&lt;transition&gt;</code>元素作为单个元素&#x2F;组件的过渡效果，它只会把过渡效果应用到其包裹的内容上，而不会额外渲染 DOM 元素，也不会出现在检测过的组件层级中</p>
<h2 id="6个class类"><a href="#6个class类" class="headerlink" title="6个class类"></a>6个class类</h2><p><img src="https://tu.sunning.fit/i/2022/07/16/62d28a8ed5851.png" alt="image-20220716175316022"></p>
<p>v-enter-from：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</p>
<p>v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</p>
<p>v-enter-to：定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter-from 被移除)，在过渡&#x2F;动画完成之后移除。</p>
<p>v-leave-from：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</p>
<p>v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</p>
<p>v-leave-to：离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave-from 被移除)，在过渡&#x2F;动画完成之后移除。</p>
<p>v和自定义的类同名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&#x27;flag = !flag&#x27;&gt;切换&lt;/button&gt;</span><br><span class="line">&lt;transition name=&#x27;fade&#x27;&gt;</span><br><span class="line">  &lt;div v-if=&#x27;flag&#x27; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">//开始过度</span><br><span class="line">.fade-enter-from&#123;</span><br><span class="line">   background:red;</span><br><span class="line">   width:0px;</span><br><span class="line">   height:0px;</span><br><span class="line">   transform:rotate(360deg)</span><br><span class="line">&#125;</span><br><span class="line">//开始过度了</span><br><span class="line">.fade-enter-active&#123;</span><br><span class="line">  transition: all 2.5s linear;</span><br><span class="line">&#125;</span><br><span class="line">//过度完成</span><br><span class="line">.fade-enter-to&#123;</span><br><span class="line">   background:yellow;</span><br><span class="line">   width:200px;</span><br><span class="line">   height:200px;</span><br><span class="line">&#125;</span><br><span class="line">//离开的过度</span><br><span class="line">.fade-leave-from&#123;</span><br><span class="line">  width:200px;</span><br><span class="line">  height:200px;</span><br><span class="line">  transform:rotate(360deg)</span><br><span class="line">&#125;</span><br><span class="line">//离开中过度</span><br><span class="line">.fade-leave-active&#123;</span><br><span class="line">  transition: all 1s linear;</span><br><span class="line">&#125;</span><br><span class="line">//离开完成</span><br><span class="line">.fade-leave-to&#123;</span><br><span class="line">  width:0px;</span><br><span class="line">   height:0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义过度class类名"><a href="#自定义过度class类名" class="headerlink" title="自定义过度class类名"></a>自定义过度class类名</h2><ul>
<li><code>enter-from-class</code></li>
<li><code>enter-active-class</code></li>
<li><code>enter-to-class</code></li>
<li><code>leave-from-class</code></li>
<li><code>leave-active-class</code></li>
<li><code>leave-to-class</code></li>
</ul>
<p>自定义class结合css动画库animate css可以很方便地使用动画</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">    leave-active-class=&quot;animate__animated animate__bounceInLeft&quot;</span><br><span class="line">    enter-active-class=&quot;animate__animated animate__bounceInRight&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;div v-if=&quot;flag&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于新版的animate css引用类的时候需要加一个前缀</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span>&gt;</span>An animated element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>也可以分别指定进入和离开的持续时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition :duration=&quot;1000&quot;&gt;...&lt;/transition&gt;</span><br><span class="line">&lt;transition :duration=&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;...&lt;/transition&gt;</span><br></pre></td></tr></table></figure>



<h2 id="transition生命周期8个"><a href="#transition生命周期8个" class="headerlink" title="transition生命周期8个"></a>transition生命周期8个</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">@before-enter=<span class="string">&quot;beforeEnter&quot;</span> //对应enter-from</span><br><span class="line">@enter=<span class="string">&quot;enter&quot;</span>//对应enter-active</span><br><span class="line">@after-enter=<span class="string">&quot;afterEnter&quot;</span>//对应enter-to</span><br><span class="line">@enter-cancelled=<span class="string">&quot;enterCancelled&quot;</span>//显示过度打断</span><br><span class="line">@before-leave=<span class="string">&quot;beforeLeave&quot;</span>//对应leave-from</span><br><span class="line">@leave=<span class="string">&quot;leave&quot;</span>//对应enter-active</span><br><span class="line">@after-leave=<span class="string">&quot;afterLeave&quot;</span>//对应leave-to</span><br><span class="line">@leave-cancelled=<span class="string">&quot;leaveCancelled&quot;</span>//离开过度打断</span><br></pre></td></tr></table></figure>

<p>在用js过度的时候，enter和leave钩子中必须使用done进行回调</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">beforeEnter</span> = (<span class="params">el: Element</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;进入之前from&#x27;</span>, el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Enter</span> = (<span class="params">el: Element,done:<span class="built_in">Function</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;过度曲线&#x27;</span>);  <span class="comment">//这里是动画执行完了，</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       <span class="title function_">done</span>()  <span class="comment">//但是执行完了vue在没调用done之前都会当作动画还在执行</span></span><br><span class="line">    &#125;,<span class="number">3000</span>)  <span class="comment">//所以这里过了三秒钟才会显示动画执行完成</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AfterEnter</span> = (<span class="params">el: Element</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;to&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配合js库，可以做出很多好看的效果： （例如GreenSock）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">EnterFrom</span>=(<span class="params">el:Element</span>)=&gt;&#123;</span><br><span class="line">    gasp.<span class="title function_">set</span>(el,&#123;</span><br><span class="line">        <span class="attr">width</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">height</span>:<span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">EnterActive</span>=(<span class="params">el:Element,done:gasp.Callback</span>)=&gt;&#123;</span><br><span class="line">    gasp.<span class="title function_">to</span>(el,&#123;</span><br><span class="line">        <span class="attr">width</span>:<span class="number">200</span></span><br><span class="line">        <span class="attr">height</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">onComplete</span>:done   <span class="comment">//这里这个就是覆盖每个Enter必须要填的done,而且默认传入的参数是gasp.Callback类型的</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="Appear属性"><a href="#Appear属性" class="headerlink" title="Appear属性"></a>Appear属性</h2><p>一进入页面就执行的属性,这个也能结合Animate.css </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">appear-active-<span class="keyword">class</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">appear-<span class="keyword">from</span>-<span class="keyword">class</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">appear-to-<span class="keyword">class</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">appear</span><br></pre></td></tr></table></figure>

<p>这些属性直接在transition标签上面用的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">appear</span> </span></span><br><span class="line"><span class="tag"><span class="attr">appear-active-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">appear-from-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">appear-to-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Transition-group过度列表"><a href="#Transition-group过度列表" class="headerlink" title="Transition-group过度列表"></a>Transition-group过度列表</h2><ul>
<li><p>默认情况下，它不会渲染一个包裹元素，但是你可以通过 <code>tag attribute</code> 指定渲染一个元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;section&quot;</span>&gt;</span> xxxxx<span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样会在xxxx外面包一层整体的section</p>
</li>
<li><p><a href="https://v3.cn.vuejs.org/guide/transitions-enterleave.html#%E8%BF%87%E6%B8%A1%E6%A8%A1%E5%BC%8F">过渡模式</a>不可用，因为我们不再相互切换特有的元素。</p>
</li>
<li><p>内部元素<strong>总是需要</strong>提供唯一的 <code>key attribute</code> 值。</p>
</li>
<li><p>CSS 过渡的类将会应用在内部的元素中，而不是这个组&#x2F;容器本身。</p>
</li>
</ul>
<h3 id="进入离开过度"><a href="#进入离开过度" class="headerlink" title="进入离开过度"></a>进入离开过度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition-group leave-active-class=&quot;animate_animated animate_hinge&quot; enter-active-clas=&quot;animate_animated animate_bounceIn&quot;&gt;</span><br><span class="line">     &lt;div style=&quot;margin: 10px;&quot; :key=&quot;item&quot; v-for=&quot;item in list&quot;&gt;&#123;&#123; item &#125;&lt;/div&gt;</span><br><span class="line">&lt;/transition-group&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = reactive&lt;<span class="built_in">number</span>[]&gt;([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Push</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    list.<span class="title function_">push</span>(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Pop</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    list.<span class="title function_">pop</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种应用会有很多有意思的效果</p>
<p><img src="https://tu.sunning.fit/i/2022/07/16/62d2a17e7a1cc.png" alt="image-20220716193107352"></p>
<h3 id="移动过渡"><a href="#移动过渡" class="headerlink" title="移动过渡"></a>移动过渡</h3><h4 id="例：平移的数字"><a href="#例：平移的数字" class="headerlink" title="例：平移的数字"></a>例：平移的数字</h4><p><img src="https://tu.sunning.fit/i/2022/07/17/62d373af7f223.png" alt="image-20220717102757094"></p>
<p>在transition-group里面加上个move-class&#x3D;”xxx”的标签，然后在css里面写对应的动画即可</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;random&quot;&gt;random&lt;/button&gt;</span><br><span class="line">  &lt;transition-group move-class=&quot;mmm&quot; class=&quot;wraps&quot; tag=&quot;div&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;items&quot; :key=&quot;item.id&quot; v-for=&quot;item in list&quot;&gt;&#123;&#123; item.number &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/transition-group&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;ref&#125; from &quot;vue&quot;;</span><br><span class="line">import _ from &#x27;lodash&#x27;</span><br><span class="line"></span><br><span class="line">let list = ref(Array.apply(null, &#123;length: 81&#125; as number[]).map((_, index) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    id: index,</span><br><span class="line">    number: (index % 9) + 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">const random = () =&gt; &#123;</span><br><span class="line">  list.value = _.shuffle(list.value);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.wraps &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  width: calc(25px * 10 + 9px);</span><br><span class="line"></span><br><span class="line">  .items &#123;</span><br><span class="line">    width: 25px;</span><br><span class="line">    height: 25px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mmm &#123;</span><br><span class="line">  transition: all 0.45s;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>





<blockquote>
<p>new Array和Array.apply(null,{length:81})的区别</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">6</span>)</span><br><span class="line">(<span class="number">6</span>) [空属性 × <span class="number">6</span>]<span class="attr">length</span>: <span class="number">6</span>[[<span class="title class_">Prototype</span>]]: <span class="title class_">Array</span>(<span class="number">0</span>) 只有长度，没有初始化的变量</span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">length</span>:<span class="number">6</span>&#125;</span><br><span class="line">&#123;<span class="attr">length</span>: <span class="number">6</span>&#125;<span class="attr">length</span>: <span class="number">6</span>[[<span class="title class_">Prototype</span>]]: <span class="title class_">Object</span>  </span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>,&#123;<span class="attr">length</span>:<span class="number">6</span>&#125;)  初始化了<span class="number">6</span>个空的变量</span><br><span class="line">(<span class="number">6</span>) [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>]<span class="number">0</span>: <span class="attr">undefined1</span>: <span class="attr">undefined2</span>: <span class="attr">undefined3</span>: <span class="attr">undefined4</span>: <span class="attr">undefined5</span>: <span class="attr">undefinedlength</span>: <span class="number">6</span>[[<span class="title class_">Prototype</span>]]: <span class="title class_">Array</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>,&#123;<span class="attr">length</span>:<span class="number">6</span>&#125;)和<span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">6</span>))的作用在这里是一样的</span><br></pre></td></tr></table></figure>


</blockquote>
<p><strong>为什么要初始化undefined：</strong></p>
<p>为了可以使用map方法</p>
<p><strong>随机打乱：</strong></p>
<p>使用lodash这个库里面的shuffle函数</p>
<p>代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install lodash -S</span><br></pre></td></tr></table></figure>

<p>然后安装ts声明文件库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install @types/lodash -D</span><br></pre></td></tr></table></figure>

<p>引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="状态过度"><a href="#状态过度" class="headerlink" title="状态过度"></a>状态过度</h3><h4 id="例：数字滚动"><a href="#例：数字滚动" class="headerlink" title="例：数字滚动"></a>例：数字滚动</h4><p><img src="https://tu.sunning.fit/i/2022/07/17/62d3a0845e711.png" alt="image-20220717133910953"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input v-model=&quot;num.current&quot; step=&quot;20&quot; type=&quot;number&quot;&gt;</span><br><span class="line">  &#123;&#123; num.tweenedNumber.toFixed(0) &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;reactive, watch&#125; from &quot;vue&quot;;</span><br><span class="line">import gsap from &#x27;gsap&#x27;</span><br><span class="line"></span><br><span class="line">const num = reactive(&#123;</span><br><span class="line">  current: 0,</span><br><span class="line">  tweenedNumber: 0</span><br><span class="line">&#125;)</span><br><span class="line">watch(() =&gt; num.current, (newVal, oldValue) =&gt; &#123;</span><br><span class="line">  gsap.to(num, &#123;</span><br><span class="line">    duration: 1,</span><br><span class="line">    tweenedNumber: newVal</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>





<h1 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h1><ul>
<li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。什么ref,什么computed都用的是hook</p>
</li>
<li><p>类似于vue2.x中的mixin。</p>
</li>
<li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>
</li>
<li><p>起的名字最好是usexxxx方便别人知道是hook</p>
</li>
<li><p>注意2:hook函数在组件中使用时，相当于函数中的API方法都移动到相关组件中</p>
</li>
</ul>
<p>hook中的生命周期在组件生命周期之前</p>
<p>例子: 在src下面创建hooks,里面创建 useMousePosition</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onBeforeUnmount, onMounted, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> point = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">savePoint</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    point.<span class="property">x</span> = event.<span class="property">pageX</span>;</span><br><span class="line">    point.<span class="property">y</span> = event.<span class="property">pageY</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(point.<span class="property">x</span>, point.<span class="property">y</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, savePoint);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, savePoint);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> point;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在需要的页面直接使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import usePoint from &#x27;../hooks/usePoint&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let a=usePoint();</span><br><span class="line">    return &#123;</span><br><span class="line">      a  //暴露a</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>







<h1 id="toRef-1"><a href="#toRef-1" class="headerlink" title="toRef"></a>toRef</h1><ul>
<li><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p>
</li>
<li><p>语法：</p>
<p><code>const name = toRef(person,&#39;name&#39;)</code><br>哪个对象，哪个属性</p>
</li>
<li><p>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</p>
</li>
<li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p>
</li>
</ul>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c546b355d60.png" alt="image-20220531004616220"></p>
<p>这个不是响应式的，因为给出的name是person.name的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ref</span>(xxx)有响应式，但是原来的数据没有被改变，改变的是由ref生成的新的东西</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/07/06/62c546b609bdd.png" alt="image-20220531010411238"></p>
<p>用…来自动展开对象里面的东西</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line">    ...<span class="title function_">toRefs</span>(对象); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/07/06/62c546b8dd4f6.png" alt="image-20220531011340264"></p>
<blockquote>
<p>假如后期有个函数，在函数点击后给对象增加一个属性，这时候因为setup只执行一次，…toRefs也只执行一次，一开始没在对象里面的不会被拿出来，这时候只能用折中的方法，把整个对象传出去，调用那个新添加的东西的时候按照原来的方法进行调用</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c546be43033.png" alt="image-20220531012743512"></p>
</blockquote>
<h1 id="其它-Composition-API"><a href="#其它-Composition-API" class="headerlink" title="其它 Composition API"></a>其它 Composition API</h1><h2 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h2><ul>
<li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式。</p>
</li>
<li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>
</li>
<li><p>什么时候使用?</p>
<ul>
<li><p>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</p>
</li>
<li><p>如果有一个<strong>对象数据</strong>，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&#x27;x=&#123;y:888&#125;&#x27;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">let x=shallowRef(&#123;</span><br><span class="line">	y:0  //上面把y直接替换了，不考虑y的响应式</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h2><ul>
<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>
<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>
<li>应用场景: 不希望数据被修改时。（用一个别人给的不能改的数据的时候，用一下readonly防止自己误操作了）</li>
</ul>
<h2 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h2><ul>
<li>toRaw：<ul>
<li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li>
<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>
</ul>
</li>
<li>markRaw：<ul>
<li>作用：标记一个对象，使其永远不会再成为响应式对象。但是无法使已经被监听的属性摆脱监听</li>
<li>应用场景:<ol>
<li>有些值不应被设置为响应式的，例如复杂的第三方类库等（加入用了别人的库，可能里面嵌套了很多层，而且不准备改变，要用上markRaw）。</li>
<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="customRef-1"><a href="#customRef-1" class="headerlink" title="customRef"></a>customRef</h2><ul>
<li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>
</li>
<li><p>ps:js里面函数调用可以在函数定义之前</p>
</li>
<li><p>&#96;&#96;&#96;js<br>return customRef((track,trigger)&#x3D;&gt;{<br>                return{<br>                    get(){<br>                        track() &#x2F;&#x2F;告诉Vue这个value值是需要被“追踪”的<br>                        return value<br>                    },<br>                    set(newValue){<br>                        clearTimeout(timer)<br>                        timer &#x3D; setTimeout(()&#x3D;&gt;{<br>                            value &#x3D; newValue<br>                            trigger() &#x2F;&#x2F;告诉Vue去更新界面<br>                        },delay)<br>                    }<br>                }<br>            })<br>customRef里面需要是一个函数，函数的返回值要是一个对象，这个对象要有get和set方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- 实现防抖效果：</span><br><span class="line"></span><br><span class="line">  ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">  	&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">  	&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  	import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">  	export default &#123;</span><br><span class="line">  		name:&#x27;Demo&#x27;,</span><br><span class="line">  		setup()&#123;</span><br><span class="line">  			// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">  			//自定义一个myRef</span><br><span class="line">  			function myRef(value,delay)&#123;</span><br><span class="line">  				let timer</span><br><span class="line">  				//通过customRef去实现自定义</span><br><span class="line">  				return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">  					return&#123;</span><br><span class="line">  						get()&#123;</span><br><span class="line">  							track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">  							return value</span><br><span class="line">  						&#125;,</span><br><span class="line">  						set(newValue)&#123;</span><br><span class="line">  							clearTimeout(timer)</span><br><span class="line">  							timer = setTimeout(()=&gt;&#123;</span><br><span class="line">  								value = newValue</span><br><span class="line">  								trigger() //告诉Vue去更新界面</span><br><span class="line">  							&#125;,delay)</span><br><span class="line">  						&#125;</span><br><span class="line">  					&#125;</span><br><span class="line">  				&#125;)</span><br><span class="line">  			&#125;</span><br><span class="line">  			let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">  			return &#123;</span><br><span class="line">  				keyword</span><br><span class="line">  			&#125;</span><br><span class="line">  		&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h2><img src="https://tu.sunning.fit/i/2022/05/30/6294585271403.png" style="width:300px" />

<ul>
<li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p>
</li>
<li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>
</li>
<li><p>具体写法：</p>
<ol>
<li><p>祖组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后代组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h2><ul>
<li>isRef: 检查一个值是否为一个 ref 对象</li>
<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>
<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>
<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>
</ul>
<h1 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h1><p>组合式api发挥自己的功力，就要用好hock函数</p>
<h2 id="Options-API-存在的问题"><a href="#Options-API-存在的问题" class="headerlink" title="Options API 存在的问题"></a>Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p>
<div style="width:600px;height:370px;overflow:hidden;float:left">
    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" />
</div>
<div style="width:300px;height:370px;overflow:hidden;float:left">
    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /> 
</div>


















<h2 id="Composition-API-的优势-1"><a href="#Composition-API-的优势-1" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p>
<div style="width:500px;height:340px;overflow:hidden;float:left">
    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/>
</div>
<div style="width:430px;height:340px;overflow:hidden;float:left">
    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/>
</div>
















<h1 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h1><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><ul>
<li>在Vue2中: 组件必须有一个根标签</li>
<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>
<li>好处: 减少标签层级, 减小内存占用</li>
</ul>
<h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><ul>
<li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>
</li>
<li><p>使用步骤：</p>
<ul>
<li><p>异步引入组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))  <span class="comment">//返回一个import函数，异步引入</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p>
<p>异步引入组件，加载完成后组件突然出现不好，需要有个占着位置的东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">		&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">		&lt;Suspense&gt;</span><br><span class="line">			&lt;template v-slot:default&gt;  //加载成功之后显示的东西</span><br><span class="line">				&lt;Child/&gt;</span><br><span class="line">			&lt;/template&gt;</span><br><span class="line">			&lt;template v-slot:fallback&gt;   //没有加载成功的时候显示的东西</span><br><span class="line">				&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">			&lt;/template&gt;</span><br><span class="line">		&lt;/Suspense&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>一整个的例子：</p>
<p><strong>Child.vue</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Child组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		&#123;&#123;sum&#125;&#125;</span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">name</span>:<span class="string">&#x27;Child&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="keyword">async</span> <span class="title function_">setup</span>(<span class="params"></span>)&#123;  <span class="comment">//用这种方法也可以起到延迟加载的作用，但是只有这东西用在Suspense里面才行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">					<span class="title function_">resolve</span>(&#123;sum&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				&#125;,<span class="number">3000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="keyword">return</span> <span class="keyword">await</span> p</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">	<span class="selector-class">.child</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">		<span class="attribute">background-color</span>: skyblue;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">		<span class="attribute">padding</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">	&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>App.vue</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是App组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:fallback</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>稍等，加载中...<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="comment">// import Child from &#x27;./components/Child&#x27;//静态引入</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Child&#x27;</span>)) <span class="comment">//异步引入</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">components</span>:&#123;<span class="title class_">Child</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">	<span class="selector-class">.app</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">		<span class="attribute">background-color</span>: gray;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">		<span class="attribute">padding</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">	&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h1 id="Setup语法糖"><a href="#Setup语法糖" class="headerlink" title="Setup语法糖"></a>Setup语法糖</h1><p>一个vue文件里面可以有一个无setup的script和一个有setup的script</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="全局API的转移"><a href="#全局API的转移" class="headerlink" title="全局API的转移"></a>全局API的转移</h2><ul>
<li><p>Vue 2.x 有许多全局 API 和配置。</p>
<ul>
<li><p>例如：注册全局组件、注册全局指令等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Vue3.0中对这些API做出了调整：</p>
<ul>
<li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上 （因为没有Vue组件了，变成app组件了）</p>
<table>
<thead>
<tr>
<th>2.x 全局 API（<code>Vue</code>）</th>
<th>3.x 实例 API (<code>app</code>)</th>
</tr>
</thead>
<tbody><tr>
<td>Vue.config.xxxx</td>
<td>app.config.xxxx</td>
</tr>
<tr>
<td>Vue.config.productionTip</td>
<td><strong style="color:#DD5145">移除</strong>(因为vue3能自动识别出来是不是在生产环境了)</td>
</tr>
<tr>
<td>Vue.component</td>
<td>app.component</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>app.directive</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>app.mixin</td>
</tr>
<tr>
<td>Vue.use</td>
<td>app.use</td>
</tr>
<tr>
<td>Vue.prototype（原来放在原型对象上面的东西）</td>
<td>app.config.globalProperties（全局属性）</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h2 id="其他改变"><a href="#其他改变" class="headerlink" title="其他改变"></a>其他改变</h2><ul>
<li><p>data选项应始终被声明为一个函数。</p>
</li>
<li><p>过度类名的更改：</p>
<ul>
<li><p>Vue2.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue3.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符(不能keyup.13了)，同时也不再支持<code>config.keyCodes</code> （Vue.config.keyCodes.huilche&#x3D;13 （定义别名按键））因为这个也是依赖了keyup.13的用法</p>
</li>
<li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p>
<ul>
<li><p>父组件中绑定事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子组件中声明自定义事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]   //emits: [&#x27;close&#x27;,&#x27;click&#x27;] 如果这样，就把click当作自定义事件，否则都是原生事件 </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p>
<blockquote>
<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p>
</blockquote>
</li>
</ul>
<h1 id="Vue3-2"><a href="#Vue3-2" class="headerlink" title="Vue3.2"></a>Vue3.2</h1><h2 id="script-setup-语法糖"><a href="#script-setup-语法糖" class="headerlink" title="script setup 语法糖"></a>script setup 语法糖</h2><ol>
<li><strong>起初 Vue3.0 暴露变量必须 return 出来，template中才能使用；</strong></li>
<li><strong>Vue3.2 中 只需要在 script 标签上加上</strong> <strong>setup</strong> <strong>属性，组件在编译的过程中代码运行的上下文是在</strong> <strong>setup()</strong> <strong>函数中，无需return，template可直接使用。</strong></li>
</ol>
<h2 id="v-bind在-SFC-标签中启用组件状态驱动的动态-CSS-值"><a href="#v-bind在-SFC-标签中启用组件状态驱动的动态-CSS-值" class="headerlink" title="v-bind在 SFC 标签中启用组件状态驱动的动态 CSS 值"></a>v-bind在 SFC 标签中启用组件状态驱动的动态 CSS 值</h2><p><img src="https://tu.sunning.fit/i/2022/07/06/62c547b04bc9a.png" alt="image-20220531202337581"></p>
<h1 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h1><h2 id="异步组件："><a href="#异步组件：" class="headerlink" title="异步组件："></a>异步组件：</h2><p>大型应用中，可能需要将应用分割成小一些的代码块，减少主包的体积,并且只在需要的时候才从服务器加载一个模块</p>
<p>正常的打包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>然后在dist目录里面会出现打包完成的文件</p>
<p><img src="https://tu.sunning.fit/i/2022/07/16/62d270cfa52a4.png" alt="image-20220716160319615"></p>
<h3 id="异步组件引入方式"><a href="#异步组件引入方式" class="headerlink" title="异步组件引入方式"></a>异步组件引入方式</h3><p>不能用正常的import方式引入，要用<code>defineAsyncComponent</code>方法引入</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../../components/A/index.vue&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>但因为是异步组件，还需要用suspense引入加载好的页面，见下面</p>
<h2 id="顶层await"><a href="#顶层await" class="headerlink" title="顶层await"></a>顶层await</h2><p>该特性可以让es模块对外表现为一个async函数，允许es模块去await数据并阻塞其他导入这些数据的模块。只有在数据确定并准备好的时候，导入数据的模块才可以执行相应的代码。</p>
<p>stage3的提案，现在很有好多不支持，不推荐在生产环境中使用</p>
<h3 id="以前的写法pk现在的写法"><a href="#以前的写法pk现在的写法" class="headerlink" title="以前的写法pk现在的写法"></a>以前的写法pk现在的写法</h3><p>在引入顶层 await 之前，如果你试图在一个 <code>async</code> 函数外面使用 <code>await</code> 关键字，将会引起语法错误。为了避免这个问题，开发者通常会使用立即执行函数表达式（IIFE）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;❤️&#x27;</span>));</span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;❤️&#x27;</span>));</span><br><span class="line">  <span class="comment">//❤️</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h3 id="vue3-2-setup语法糖里"><a href="#vue3-2-setup语法糖里" class="headerlink" title="vue3.2 setup语法糖里"></a>vue3.2 setup语法糖里</h3><p>在setup语法糖里面，可以直接使用顶层await,结果代码会被编译成async setup()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const post = await fetch(`/api/post/1`).then(r =&gt; r.json())</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="suspense"><a href="#suspense" class="headerlink" title="suspense"></a>suspense</h2><p><code>&lt;suspense&gt;</code> 组件有两个插槽。它们都只接收一个直接子节点。<code>default</code> 插槽里的节点会尽可能展示出来。如果不能，则展示 <code>fallback</code> 插槽里的节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Suspense&gt;</span><br><span class="line">       &lt;template #default&gt;</span><br><span class="line">           &lt;Dialog&gt;</span><br><span class="line">               &lt;template #default&gt;</span><br><span class="line">                   &lt;A/&gt; //异步加载的组件A</span><br><span class="line">               &lt;/template&gt;</span><br><span class="line">           &lt;/Dialog&gt;</span><br><span class="line">       &lt;/template&gt;</span><br><span class="line">       &lt;template #fallback&gt;</span><br><span class="line">           &lt;div&gt;loading...&lt;/div&gt;  //如果加载失败或者还没加载出来显示的东西</span><br><span class="line">       &lt;/template&gt;</span><br><span class="line">   &lt;/Suspense&gt;</span><br></pre></td></tr></table></figure>



<h1 id="TSX"><a href="#TSX" class="headerlink" title="TSX"></a>TSX</h1><p>安装插件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install @vitejs/plugin-vue-jsx-D</span><br></pre></td></tr></table></figure>











<h1 id="others"><a href="#others" class="headerlink" title="others"></a>others</h1><h2 id="component-is-切换现实不同的组件"><a href="#component-is-切换现实不同的组件" class="headerlink" title="component :is 切换现实不同的组件"></a>component :is 切换现实不同的组件</h2><p><img src="https://tu.sunning.fit/i/2022/07/06/62c547b510384.png" alt="image-20220531192307005"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>事件</title>
    <url>/2022/07/21/%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h1><p>给元素添加事件，称为注册事件&#x2F;绑定事件</p>
<table>
<thead>
<tr>
<th>传统注册方式</th>
<th>监听注册方式</th>
</tr>
</thead>
<tbody><tr>
<td>利用on开头的事件onclick</td>
<td>w3c标准推荐方式</td>
</tr>
<tr>
<td>注册事件的唯一性</td>
<td>同一个元素同一个事件可以注册多个监听器</td>
</tr>
<tr>
<td>因为唯一性，后面注册的会覆盖前面注册的</td>
<td>按注册的顺序依次执行</td>
</tr>
</tbody></table>
<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p><strong>addEventListener(type,listener,useCapture)</strong> (ie9以上)</p>
<ul>
<li>type 事件类型<strong>字符串</strong>：click,mouseover （注意没有on）</li>
<li>listener: 事件处理函数，事件发生时，会调用该监听函数</li>
<li>useCapture: 可选参数，布尔值</li>
</ul>
<p>事件处理函数可以直接写在这个方法里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="title function_">alert</span>(<span class="number">33</span>);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<p><strong>attacheEvent(eventNameWithOn,callback)</strong> 事件监听（ie6,7,8）</p>
<ul>
<li>eventNameWithOn 事件类型<strong>字符串</strong>：onclick,onmouseover （注意有on）</li>
<li>callback 事件处理函数，当目标触发事件时回调函数被调用</li>
</ul>
<p><strong>兼容性解决方案</strong> 以后就用这个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addEventListener</span>(<span class="params">element,eventName,fn</span>)&#123;</span><br><span class="line">    <span class="comment">//判断当前浏览器是否支持addEventListener方法</span></span><br><span class="line">    <span class="keyword">if</span>(element.<span class="property">addEventLister</span>)&#123;</span><br><span class="line">        element.<span class="title function_">addEventLister</span>(eventName,fn);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.<span class="property">attachEvent</span>)&#123;</span><br><span class="line">        element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span>+eventName,fn);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        element[<span class="string">&#x27;on&#x27;</span>+eventName]=fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h1><p>传统方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventTarget.<span class="property">onclick</span>=<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>方法监听注册方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">removeEventListener</span>(type,listener,useCapture)</span><br><span class="line">eventTarget.<span class="title function_">datachEvent</span>(eventNameWithOn.<span class="property">callback</span>)</span><br></pre></td></tr></table></figure>

<p>例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 传统方式删除事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. removeEventListener 删除事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    divs[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn) <span class="comment">// 里面的fn 不需要调用加小括号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="number">22</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        divs[<span class="number">1</span>].<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3. detachEvent</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    divs[<span class="number">2</span>].<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, fn1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="number">33</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        divs[<span class="number">2</span>].<span class="title function_">detachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, fn1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>兼容性解决方案</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeEventListener</span>(<span class="params">element,eventName,fn</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(element.<span class="property">removeEventListener</span>)&#123;</span><br><span class="line">        element.<span class="title function_">removeEventListener</span>(eventName,fn);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.<span class="property">detachEvent</span>)&#123;</span><br><span class="line">        element.<span class="title function_">detachEvent</span>(<span class="string">&#x27;on&#x27;</span>+eventName,fn);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        element[<span class="string">&#x27;on&#x27;</span>+eventName]=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h1><blockquote>
<p>事件流描述的是从页面中接收事件的顺序</p>
<p>事件发生时会在元素节点之间按照特定的顺序传播，这个过程就是DOM事件流</p>
</blockquote>
<p><img src="https://tu.sunning.fit/i/2022/04/29/626bc05c6dcc1.png" alt="1551166555833.png"></p>
<p>DOM 事件流会经历3个阶段： </p>
<ol>
<li><p>捕获阶段</p>
</li>
<li><p>当前目标阶段</p>
</li>
<li><p>冒泡阶段  这个信息会往上面进行传播——如果点击子物体，父物体也会应该冒泡而相当于被点击</p>
</li>
</ol>
<p><img src="https://tu.sunning.fit/i/2022/04/29/626bc0612f252.png" alt="1551169007768"></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>js代码只能执行捕获或者冒泡其中的一个阶段</li>
<li>onclick和attachEvent只能得到冒泡阶段</li>
<li>addEventListener(type,listener[,useCapture) 第三个参数如果是true,表示在事件捕获阶段调用事件处理程序，如果是false（默认是false）在事件冒泡阶段调用程序</li>
<li>有些事件是没有冒泡的，比如onblur,onfocus,onmouseenter,onmouseleave</li>
<li>实际开发中很少使用捕获，更多的是使用冒泡</li>
<li>冒泡有时候会带来麻烦，有时候又会很巧妙的做某些事件</li>
</ol>
<h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>事件触发发生时就会产生事件对象，并且系统会以实参的形式传给事件处理函数。</p>
<p>所以，在事件处理函数中声明1个形参用来接收事件对象。</p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626cfa448f7f3.png" alt="1551169537789"></p>
<h3 id="事件对象的兼容性处理"><a href="#事件对象的兼容性处理" class="headerlink" title="事件对象的兼容性处理"></a>事件对象的兼容性处理</h3><p>事件对象本身的获取存在兼容问题：</p>
<ol>
<li><p>标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。</p>
</li>
<li><p>在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找。</p>
</li>
</ol>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5327b47b44.png" alt="1551169680823"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">只要“||”前面为false, 不管“||”后面是true 还是 false，都返回 “||” 后面的值。</span><br><span class="line">只要“||”前面为true, 不管“||”后面是true 还是 false，都返回 “||” 前面的值。</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 事件对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            e = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h3><p><img src="https://tu.sunning.fit/i/2022/04/30/626cfa5cb1d4f.png" alt="1551169931778"></p>
<h3 id="e-target-和-this-的区别"><a href="#e-target-和-this-的区别" class="headerlink" title="e.target 和 this 的区别"></a>e.target 和 this 的区别</h3><ul>
<li><p>this 返回的是绑定事件的对象</p>
</li>
<li><p>e.target 返回的是触发事件的对象</p>
</li>
</ul>
<blockquote>
<p>下面是this和e.target返回值不相同的地方</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 我们给ul 绑定了事件  那么this 就指向ul  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// ul</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// e.target 触发了事件的对象 我们点击的是li e.target 指向的就是li</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>); <span class="comment">// li</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="阻止"><a href="#阻止" class="headerlink" title="阻止"></a>阻止</h2><h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><blockquote>
<p>html中一些标签有默认行为，例如a标签被单击后，默认会进行页面跳转。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;百度&lt;/a&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 阻止默认行为 让链接不跳转 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         e.<span class="title function_">preventDefault</span>(); <span class="comment">//  dom 标准写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3. 传统的注册方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    a.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 普通浏览器 e.preventDefault();  方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        e.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 低版本浏览器 ie678  returnValue  属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        e.<span class="property">returnValue</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处。</p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626cfbc0dedc8.png" alt="1551171467194"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 给son注册单击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          e.<span class="title function_">stopPropagation</span>(); <span class="comment">// stop 停止  Propagation 传播   </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">cancelBubble</span> = <span class="literal">true</span>; <span class="comment">// 非标准 cancel 取消 bubble 泡泡</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 给father注册单击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 给document注册单击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>阻止事件冒泡的兼容性处理</strong></p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626cfd8c0805e.png" alt="1551171657513"></p>
<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处。</p>
<h3 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把事情委托给别人，代为处理。</span><br></pre></td></tr></table></figure>

<p>事件委托也称为事件代理，在 jQuery 里面称为事件委派。</p>
<blockquote>
<p>就是不给子元素注册事件，给父元素注册事件，把处理代码在父元素的事件中执行。</p>
</blockquote>
<p><strong>生活中的代理：</strong></p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626cfd899500b.png" alt="1551172082624"></p>
<p><strong>js事件中的代理：</strong></p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626cfd94407d0.png" alt="1551172159273"></p>
<h3 id="事件委托的原理"><a href="#事件委托的原理" class="headerlink" title="事件委托的原理"></a>事件委托的原理</h3><p>​	给父元素注册事件，利用事件冒泡，当子元素的事件触发，会冒泡到父元素，然后去控制相应的子元素。</p>
<h3 id="事件委托的作用"><a href="#事件委托的作用" class="headerlink" title="事件委托的作用"></a>事件委托的作用</h3><ul>
<li><p>我们只操作了一次 DOM ，提高了程序的性能。</p>
</li>
<li><p>动态新创建的子元素，也拥有事件。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// e.target 这个可以得到我们点击的对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h1><p><img src="https://tu.sunning.fit/i/2022/04/30/626cfd998e96e.png" alt="1551172699854"></p>
<h2 id="案例：禁止选中文字和禁止右键菜单"><a href="#案例：禁止选中文字和禁止右键菜单" class="headerlink" title="案例：禁止选中文字和禁止右键菜单"></a>案例：禁止选中文字和禁止右键菜单</h2><p>选中行为，然后阻止默认行为</p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626cfd9c92a31.png" alt="1551172755484"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    我是一段不愿意分享的文字</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. contextmenu 我们可以禁用右键菜单</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 2. 禁止选中文字 selectstart</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h2><p><img src="https://tu.sunning.fit/i/2022/04/30/626cfdf5b12ab.png" alt="1551173103741"></p>
<h2 id="获取鼠标在页面的坐标"><a href="#获取鼠标在页面的坐标" class="headerlink" title="获取鼠标在页面的坐标"></a>获取鼠标在页面的坐标</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 鼠标事件对象 MouseEvent</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">// 1. client 鼠标在可视区的x和y坐标</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientY</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. page 鼠标在页面文档的x和y坐标</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageX</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageY</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenX</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenY</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="案例：跟随鼠标移动的天使"><a href="#案例：跟随鼠标移动的天使" class="headerlink" title="案例：跟随鼠标移动的天使"></a>案例：跟随鼠标移动的天使</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;images/angel.gif&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    	<span class="comment">// 1. mousemove只要我们鼠标移动1px 就会触发这个事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    	<span class="comment">// 2.核心原理： 每次鼠标移动，我们都会获得最新的鼠标坐标， </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 把这个x和y坐标做为图片的top和left 值就可以移动图片</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    	<span class="keyword">var</span> x = e.<span class="property">pageX</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    	<span class="keyword">var</span> y = e.<span class="property">pageY</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x坐标是&#x27;</span> + x, <span class="string">&#x27;y坐标是&#x27;</span> + y);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    	<span class="comment">//3 . 千万不要忘记给left 和top 添加px 单位</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    	pic.<span class="property">style</span>.<span class="property">left</span> = x - <span class="number">50</span> + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    	pic.<span class="property">style</span>.<span class="property">top</span> = y - <span class="number">40</span> + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h1 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h1><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p><img src="https://tu.sunning.fit/i/2022/04/30/626cff60c11df.png" alt="1551318122855"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c532e99df08.png" alt="1551318160371"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 常用的键盘事件</span></span><br><span class="line">    <span class="comment">//1. keyup 按键弹起的时候触发 </span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我弹起了&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我按下了press&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我按下了down&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h2><p><img src="https://tu.sunning.fit/i/2022/04/30/626cffff81d57.png" alt="1551318355505"></p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626d00039fe98.png" alt="1551318404238"></p>
<p><strong>使用keyCode属性判断用户按下哪个键</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;up:&#x27;</span> + e.<span class="property">keyCode</span>);</span><br><span class="line">        <span class="comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span></span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">65</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;您按下的a键&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;您没有按下a键&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(e);</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;press:&#x27;</span> + e.<span class="property">keyCode</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例：模拟京东按键输入内容"><a href="#案例：模拟京东按键输入内容" class="headerlink" title="案例：模拟京东按键输入内容"></a>案例：模拟京东按键输入内容</h3><p>当我们按下 s 键， 光标就定位到搜索框（文本框获得焦点）。</p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626d024bbfc34.png" alt="1551318669520"></p>
<blockquote>
<p>注意：触发获得焦点事件，可以使用 元素对象.focus()</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 获取输入框</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> search = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 给document注册keyup事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//如果这里用keydown的话，会在按下的时候焦点定位在输入框，然后把s输入进去，为了不输入s,所以设置成keyup    </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 判断keyCode的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">83</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">// 触发输入框的获得焦点事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              search.<span class="title function_">focus</span>();  <span class="comment">//这句的语法就是输入框获得焦点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="案例：模拟京东快递单号查询"><a href="#案例：模拟京东快递单号查询" class="headerlink" title="案例：模拟京东快递单号查询"></a>案例：模拟京东快递单号查询</h3><p>要求：当我们在文本框中输入内容时，文本框上面自动显示大字号的内容。</p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626d0368b0009.png" alt="image-20220430173741508"></p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626d043ec29fa.png" alt="1551318909264"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的快递单号&quot;</span> <span class="attr">class</span>=<span class="string">&quot;jd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 获取要操作的元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> con = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.con&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> jd_input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.jd&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 给输入框注册keyup事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      jd_input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="comment">// 判断输入框内容是否为空</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="comment">// 为空，隐藏放大提示盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="comment">// 不为空，显示放大提示盒子，设置盒子的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  con.<span class="property">innerText</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 给输入框注册失去焦点事件，隐藏放大提示盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      jd_input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;blur&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 给输入框注册获得焦点事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      jd_input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;focus&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 判断输入框内容是否为空</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">// 不为空则显示提示盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>小三角可以用伪元素来弄</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.con</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">8px</span> solid <span class="number">#000</span></span><br><span class="line">    border-sytle:solid dashed dashed;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#fff</span> transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>border-style: dashed 虚线</p>
<p>border-color: #fff transparent transparent;按照从上面顺时针看没有找对应的设置，也就相当于</p>
<p>border-color: #fff transparent transparent transparent;</p>
</blockquote>
<blockquote>
<p><strong>用css画形状</strong></p>
<p>关于border</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#demo</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">100px</span>;  </span><br><span class="line">     <span class="attribute">height</span>:<span class="number">100px</span>;  </span><br><span class="line">     <span class="attribute">border</span>: <span class="number">20px</span> solid;  </span><br><span class="line">     <span class="attribute">border-color</span>: red blue red blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://tu.sunning.fit/i/2022/04/30/626d06ff3ebb2.png" alt="image-20220430175259628"></p>
<p>如果把盒子的宽度和高度都变成0之后呢</p>
<p><img src="https://tu.sunning.fit/i/2022/04/30/626d07225df85.png" alt="image-20220430175335600"></p>
<p>取其中的三角型就是把其他三个都用transparent隐藏掉，只剩下一个三角型用绝对定位，一般搭配伪元素（记得伪元素要有content:” “）</p>
<p>关于其他形状的绘制，参看下面</p>
<p><a href="https://css-tricks.com/the-shapes-of-css/">https://css-tricks.com/the-shapes-of-css/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>事件</tag>
      </tags>
  </entry>
  <entry>
    <title>伪代码</title>
    <url>/2022/07/21/%E4%BC%AA%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h1><table>
<thead>
<tr>
<th align="center">操作类型</th>
<th align="center">符号</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分配</td>
<td align="center">← or :&#x3D;</td>
<td align="center"><code>c ← 2πr</code>, <code>c := 2πr</code></td>
</tr>
<tr>
<td align="center">比较</td>
<td align="center">&#x3D;, ≠, &lt;, &gt;, ≤, ≥</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">算术</td>
<td align="center">+, −, ×, &#x2F;, mod</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">上界&#x2F;下界</td>
<td align="center">⌊, ⌋, ⌈, ⌉</td>
<td align="center"><code>a ← ⌊b⌋ + ⌈c⌉</code></td>
</tr>
<tr>
<td align="center">逻辑</td>
<td align="center"><strong>and</strong>, <strong>or</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">总和、乘积</td>
<td align="center">∑ ∏</td>
<td align="center"><code>h ← ∑a∈A 1/a</code></td>
</tr>
</tbody></table>
<ul>
<li><p>在伪代码中，每一条指令占一行(else if 例外)，指令后不跟任何符号；</p>
</li>
<li><p>通常每个算法开始时都要描述它的输入和输出，而且算法中的每一行都给编上行号，在解释算法的过程中会经常使用算法步骤中的行号来指代算法的步骤；</p>
</li>
</ul>
<h2 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h2><p>算法中出现的数组、变量可以是以下类型：整数、实数、字符、字符串或指针。定义变量的语句不用写出来，但必须在注释中给出。</p>
<h2 id="指令的表示"><a href="#指令的表示" class="headerlink" title="指令的表示"></a>指令的表示</h2><p>在算法中的某些指令或子任务可以用文字来叙述，例如，”设x是A中的最大项”，这里A是一个数组；或者”将x插入L中”，这里L是一个链表。这样做的目的是为了避免因那些与主要问题无关的细节使算法本身杂乱无章。</p>
<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>算术表达式可以使用通常的算术运算符（+，-，*，&#x2F;，以及表示幂的^）。逻辑表达式可以使用关系运算符 &#x3D; 、≠、&lt;、&gt;、≤ 和 ≥，以及逻辑运算符与(and)、或（or）、非（not）。</p>
<h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>赋值语句是如下形式的语句：<code>a←b</code>。<br>这里a是变量、数组项，b是算术表达式、逻辑表达式或指针表达式。语句的含义是将b的值赋给a。</p>
<p>变量交换：若a和b都是变量、数组项，那么记号a&lt;-&gt;b 表示a和b的内容进行交换。</p>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> i=10</span><br><span class="line">    <span class="keyword">then</span> xxxx</span><br><span class="line">    <span class="keyword">else</span> xxxx //else 和 <span class="keyword">then</span> 要对齐</span><br><span class="line">       </span><br><span class="line">//或者</span><br><span class="line"><span class="keyword">if</span> i=10</span><br><span class="line">    <span class="keyword">then</span> xxxx //if 后面必定跟上<span class="keyword">then</span>，<span class="keyword">else</span>后面不用跟<span class="keyword">then</span></span><br><span class="line">    elseif i=9 //elseif 要连在一起写</span><br><span class="line">        <span class="keyword">then</span> xxxx</span><br><span class="line">        yyyy</span><br><span class="line">    <span class="keyword">else</span>  xxxx //else 跟在 elseif 的 <span class="keyword">then</span> 对齐</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p><strong>while</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> time&lt;10</span><br><span class="line">    <span class="keyword">do</span>  xxxxx //while后面必定要紧跟缩进的<span class="keyword">do</span></span><br><span class="line">    xxxxx</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>

<p><strong>for</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var init to <span class="built_in">limit</span> by incr </span><br><span class="line">	<span class="keyword">do</span> s</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>这里var是变量，init、limit和incr都是算术表达式，而s是由一个或多个语句组成的语句串。初始时，var被赋予init的值。假若<code>incr≥0</code>，则只要<code>var≤limit</code>，就执行s并且将incr加到var上。（假若<code>incr&lt;0</code>，则只要<code>var≥limit</code>，就执行s并且将incr加到var上）。incr的符号不能由s来该改变。</p>
<h2 id="程序的结束"><a href="#程序的结束" class="headerlink" title="程序的结束"></a>程序的结束</h2><p>exit语句可以在通常的结束条件满足之前，被用来结束while循环或者for循环的执行。exit导致转向到紧接在包含exit的（最内层）while或者for循环后面的一个语句。</p>
<p>return用来指出一个算法执行的终点；如果算法在最后一条指令之后结束，它通常是被省略的；它被用得最多的场合是检测到不合需要的条件时。return的后面可以紧接被括在引号的信息。</p>
<h1 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h1><p>伪代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">x ← 0</span><br><span class="line">y ← 0</span><br><span class="line">z ← 0</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> x &lt; N</span><br><span class="line"><span class="keyword">do</span> x ← x + 1</span><br><span class="line">y ← x + y</span><br><span class="line"><span class="keyword">for</span> t ← 0 to 10</span><br><span class="line"><span class="keyword">do</span> z ← ( z + x * y ) / 100</span><br><span class="line">repeat</span><br><span class="line">y ← y + 1</span><br><span class="line">z ← z - y</span><br><span class="line">until z &lt; 0</span><br><span class="line">z ← x * y</span><br><span class="line"></span><br><span class="line">y ← y / 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>c语言</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">x = y = z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( z &lt; N )</span><br><span class="line">&#123;</span><br><span class="line">   x ++;</span><br><span class="line">　　y += x;</span><br><span class="line">　　<span class="keyword">for</span>( t = <span class="number">0</span>; t &lt; <span class="number">10</span>; t++ )</span><br><span class="line">　　&#123;</span><br><span class="line">　　     z = ( z + x * y ) / <span class="number">100</span>;</span><br><span class="line">　　     <span class="keyword">do</span> </span><br><span class="line">　　     &#123;</span><br><span class="line">			y ++;</span><br><span class="line">			z -= y;</span><br><span class="line">　　     &#125; <span class="keyword">while</span>( z &gt;= <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line">　　z = x * y;</span><br><span class="line">&#125;</span><br><span class="line">y /= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>伪代码</tag>
      </tags>
  </entry>
  <entry>
    <title>内存超频</title>
    <url>/2022/07/21/%E5%86%85%E5%AD%98%E8%B6%85%E9%A2%91/</url>
    <content><![CDATA[<h1 id="CPU-z"><a href="#CPU-z" class="headerlink" title="CPU-z"></a>CPU-z</h1><h2 id="先看内存设置"><a href="#先看内存设置" class="headerlink" title="先看内存设置"></a>先看内存设置</h2><p>英特尔 BIOS Ratio选项，比主频低0.3即可</p>
<p>AMD对应BOIS 的FCLK选项（设置成内存频率的一半）</p>
<h2 id="内存频率"><a href="#内存频率" class="headerlink" title="内存频率"></a>内存频率</h2><p>内存频率*2为实际频率</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd31843d7b7.png" alt="Untitled"></p>
<h2 id="测试性能的工具"><a href="#测试性能的工具" class="headerlink" title="测试性能的工具"></a>测试性能的工具</h2><p>AIDA64 测试Memory 工具→内存与缓存测试</p>
<h2 id="另外关于cpu主板的一些基础知识"><a href="#另外关于cpu主板的一些基础知识" class="headerlink" title="另外关于cpu主板的一些基础知识"></a>另外关于cpu主板的一些基础知识</h2><p>DRAM Voltage 内存电压</p>
<p>NB Voltage 北桥芯片电压</p>
<p>VTT Voltage CPU基础运行电压</p>
<p>GTLRef Voltage处理器与北桥之间资源传送高低及低缘电压值比例</p>
<p>单位是伏特V</p>
<h1 id="BIOS更新"><a href="#BIOS更新" class="headerlink" title="BIOS更新"></a>BIOS更新</h1><p>技嘉x570gamingx (v1.1) 虽然技不如人勇气可嘉，而且bios很难用，但是技嘉的品控和产品还是可以的（下次不买了）</p>
<p>在技嘉官网下载zip文件，解压得到</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd3188c2ab8.png" alt="Untitled"></p>
<p>用U盘拷贝q-flash</p>
<p>插入对应BIOS的那个插槽</p>
<p>按F2进入BIOS界面，F8进去q-flash</p>
<p>这里有个小问题，我用的U 盘是ve做的系统盘，文件格式是exfat,插入的时候没有读取</p>
<p>格式化成ex32就ok啦</p>
<p>识别之后又发现问题BIOS检查错误，是主板的型号错了，应该选上面那个</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd318e9a57e.png" alt="Untitled"></p>
<p>选择对应的文件刷新即可，千万不要断电不要插拔U盘</p>
<p>更新完bios之后先把xmp之类的打开再进行测试，如果win11安装需要ftpm的话也记得打开，这块BIOS更新完后是自动打开的，就不用着急了，linux系统记得把windows的快速启动也关了</p>
<h2 id="技嘉主板使用"><a href="#技嘉主板使用" class="headerlink" title="技嘉主板使用"></a>技嘉主板使用</h2><p>技嘉的BIOS不是超频CPU就把CPU的放在一起，而是按照内存电压一块一块放置的，内存就是控制各个部分的内存，电压就是控制各个部分的电压</p>
<p>想要调整某个参数鼠标点击没有反应，显示auto，这时候直接输入数字就OK了</p>
<h1 id="开始超频"><a href="#开始超频" class="headerlink" title="开始超频"></a>开始超频</h1><p>超频总的来说就是一点一点实验，实验到一个适合的频率</p>
<p>先从频率，频率稳定之后压时序</p>
<p>重启不用担心，正常，如果感觉差不多可以加电压</p>
<p>超频我感觉差不多得了，为了安全和cpu不缩缸有马甲的最多给1.45v（一说1.5v），没有马甲的最多1.4v</p>
<h2 id="超频记录"><a href="#超频记录" class="headerlink" title="超频记录"></a>超频记录</h2><p>一开始设置的太激进了，没加电压，3733 c14 14 14 14 34直接没启动</p>
<p>电压设置成1.45v 3733 c15 15 15 15 36 其他auto,开机了，心理上感觉好快，具体测试之后发现反而降了，降得还挺离谱发现是技嘉板子自启动失败就回到默认设置了</p>
<p>这次一点一点超</p>
<p>开xmp的默认频率（）</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd3194ad13d.png" alt="Snipaste_2022-02-06_11-15-37.png"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd3198f3e6e.png" alt="Snipaste_2022-02-06_13-26-26.png"></p>
<h2 id="关于时序的调整方式"><a href="#关于时序的调整方式" class="headerlink" title="关于时序的调整方式"></a>关于时序的调整方式</h2><p>先超第一个直到第一个开不了机子</p>
<p>调回到能开机的状态，再同时调整第二个第三个</p>
<p>最后调整第四个</p>
<p> 1.45v 3733 c16 16 16 16 38 失败 隐隐约约有是灰烬的感觉了</p>
<p>1.4v 3733 c15 25 25 25 25 45 成功，和默认的4000频率几乎差不多略低 ，第一个10秒开机的参数</p>
<p>1.4v 3733 c15 20 20 20 40 失败</p>
<p>1.4v 3733 c15 21  21  21  40 再次失败</p>
<p>超频需谨慎，灰烬两行泪</p>
<p>3733 16-22-22-42  成功</p>
<p>3733 15-22-22-42 成功，</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd319ec6c4f.png" alt="Snipaste_2022-02-06_13-34-37.png"></p>
<p>3733 15-20-20-40成功和4000的xmp比较略强但是没有明显差距</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd31ac0313f.png" alt="Snipaste_2022-02-06_20-38-00.png"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd31b168ba0.png" alt="Snipaste_2022-02-06_20-42-58.png"></p>
<p>   最后海力士cjr颗粒yyds!</p>
<p>3733 </p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd31b9a45b8.png" alt="Untitled"></p>
<h1 id="超频导致arco的grub丢失"><a href="#超频导致arco的grub丢失" class="headerlink" title="超频导致arco的grub丢失"></a>超频导致arco的grub丢失</h1><p>更新BIOS,或者win大更新设计BIOS的变化或者初始化都会导致linux的引导文件丢失</p>
<p>由于超频，bios会默认回到初始化，arco的grub丢失了</p>
<p>使用arcolive 进入系统，到了live的引导界面之后按c进入GRUB Commandline模式</p>
<p>用ls查看分区状况</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">ls （hd*,gpt*）/   慢慢看里面的东西</span><br></pre></td></tr></table></figure>

<p>正常来说ls (hd*,gpt*)&#x2F;root&#x2F;grub就能找到，当时安装的时候挂载的问题&#x2F;@&#x2F;root&#x2F;grub了</p>
<p>找到对应的grub,就是对应的文件目录下面有&#x2F;boot&#x2F;grub这个文件夹即可，出现最下面的这个文件目录基本是找到了</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd31c1d3089.png" alt="Untitled"></p>
<p>找到命令后输入命令</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">set prefix=(hd2,gpt5)/@/boot/grub</span><br><span class="line">set root =hd2,gpt5</span><br><span class="line">insmod normal</span><br><span class="line">normal</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">grub&gt;root (hd0,<span class="number">0</span>)</span><br><span class="line">grub&gt;<span class="title function_">setup</span>(hd0)</span><br><span class="line">grub&gt;quit</span><br></pre></td></tr></table></figure>

<p>能够进入，但是下一次还是没有引导，grub—install等方法均没有用</p>
<p><a href="http://c.biancheng.net/view/1035.html"></a></p>
<p><a href="https://blog.csdn.net/u012130706/article/details/75456765"></a></p>
<p>没想到折腾了5个小时居然在图吧工具箱里面找到了解决方案。。。</p>
<p>打开DiskGenius</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd31c92c763.png" alt="Untitled"></p>
<p>添加一个启动项，在启动文件里面找到arcoLinux对应的启动项即可</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd31ce0aa6c.png" alt="Untitled"></p>
<p>这个时候重启，只有arco的启动项，不慌，timeshift再来一遍，更新一下grub的配置文件，万事大吉</p>
<p>还有个想法，装乌班图用boot-repair修复，没尝试</p>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>搞机</tag>
        <tag>内存超频</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工具链们</title>
    <url>/2022/07/21/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E9%93%BE%E4%BB%AC/</url>
    <content><![CDATA[<h1 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h1><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h2 id="pnpm-安装"><a href="#pnpm-安装" class="headerlink" title="pnpm 安装"></a>pnpm 安装</h2><p>出现command failed: pnpm install –reporter silent –shamefully-hoist 报错</p>
<p>估计是文件系统不支持硬链接的原因</p>
<p>安装的时候  指定安装依赖的时候使用npm</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue create vue-demo -m npm</span><br></pre></td></tr></table></figure>





<h2 id="yarn安装"><a href="#yarn安装" class="headerlink" title="yarn安装"></a>yarn安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --global yarn</span><br></pre></td></tr></table></figure>

<p>查看是否安装成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn --version</span><br></pre></td></tr></table></figure>

<p>升级成最新版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install yarn@latest -g</span><br></pre></td></tr></table></figure>







<p>使用xxx作为默认的包管理器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue config --<span class="built_in">set</span> packageManager npm</span><br></pre></td></tr></table></figure>

<p>设置完成后可以验证一下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue config --get packageManager</span><br></pre></td></tr></table></figure>



<h2 id="Nvm和Nrm"><a href="#Nvm和Nrm" class="headerlink" title="Nvm和Nrm"></a>Nvm和Nrm</h2><h3 id="Nvm"><a href="#Nvm" class="headerlink" title="Nvm"></a>Nvm</h3><p>查看现在所有安装的node版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure>

<p>查看nodejs官方的所有版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure>

<p> 下载对应的node版本号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvm install （版本号）</span><br></pre></td></tr></table></figure>

<p>切换node版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvm use </span><br></pre></td></tr></table></figure>

<h3 id="Nrm"><a href="#Nrm" class="headerlink" title="Nrm"></a>Nrm</h3><p>npm源管理器，可以快速地在npm源之间切换</p>
<p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>

<p>查看可选源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nrm <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>切换源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure>

<p>添加源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nrm add jnpm www.xxxx.com</span><br></pre></td></tr></table></figure>

<p>测试速度</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nrm <span class="built_in">test</span> npm</span><br></pre></td></tr></table></figure>



<h1 id="webstrom"><a href="#webstrom" class="headerlink" title="webstrom"></a>webstrom</h1><p>代码补全  ctrl + space</p>
<h2 id="ESlint-Prettier"><a href="#ESlint-Prettier" class="headerlink" title="ESlint+Prettier"></a>ESlint+Prettier</h2><p>ESlint</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ESLint</span> <span class="keyword">with</span> error prevention only  <span class="comment">//仅包含错误的ESlint</span></span><br><span class="line"><span class="title class_">ESLint</span>+<span class="title class_">Airbnb</span> config <span class="comment">//Airbnb的延伸规则</span></span><br><span class="line"><span class="title class_">ESLint</span>+<span class="title class_">Stadard</span> config <span class="comment">//标准的ESLint规则</span></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//表示当前目录是否为根目录，ESLint规则被现在到该目录下</span></span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="comment">//在node环境下启动ESlint检测</span></span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//ESLint中基础配置需要继承的配置</span></span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&quot;plugin:vue/essential&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:prettier/recommended&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">    <span class="comment">//解析器</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&quot;@babel/eslint-parser&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//需要修改的启用规则及各自的错误级别</span></span><br><span class="line">    <span class="comment">// off 或 0 关闭规则    warn &amp; 1 warn警告级别的错误  error &amp; 2 错误级别的错误</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-console&quot;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;warn&quot;</span> : <span class="string">&quot;off&quot;</span>,</span><br><span class="line">    <span class="string">&quot;no-debugger&quot;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;warn&quot;</span> : <span class="string">&quot;off&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>prettier</p>
<p>可以在保存的时候直接格式化成规范的代码</p>
<h2 id="node代码补全"><a href="#node代码补全" class="headerlink" title="node代码补全"></a>node代码补全</h2><p>在设置里面的语言和框架——Node.js——Node.js编码协助</p>
<p>语言和框架——JS——库——下载——node</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>工具链</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2022/07/21/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><h2 id="为什么需要反射"><a href="#为什么需要反射" class="headerlink" title="为什么需要反射"></a>为什么需要反射</h2><p><img src="https://tu.sunning.fit/i/2022/07/12/62cd4495bdba7.png" alt="Untitled"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReflectionQuestion</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws IOException</span> &#123;</span><br><span class="line">        <span class="comment">//由配置文件re.properties的信息，创建Cat对象并调用方法hi</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//传统的方法  new一个对象，再调用它的方法</span></span><br><span class="line"><span class="comment">//        Cat cat = new Cat();</span></span><br><span class="line"><span class="comment">//        cat.hi();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//尝试做一做</span></span><br><span class="line">        <span class="comment">//1.使用Properties类，可以读写配置文件</span></span><br><span class="line">        Properties properties =<span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\re.properties&quot;</span>));</span><br><span class="line">        Object classfullpath=properties.<span class="keyword">get</span>(<span class="string">&quot;classfullpath&quot;</span>);</span><br><span class="line">        String method = properties.<span class="keyword">get</span>(<span class="string">&quot;method &quot;</span>).toString();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;classfullpath&quot;</span>+classfullpath);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;method &quot;</span>+method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建对象</span></span><br><span class="line">        <span class="keyword">new</span> calssfullpath().<span class="keyword">var</span>   这里是错的</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>new calssfullpath().var 错的   classfullpath是一个字符串类型，不是要创建的类</p>
<h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><h1 id="反射获取类的结构信息"><a href="#反射获取类的结构信息" class="headerlink" title="反射获取类的结构信息"></a>反射获取类的结构信息</h1><h1 id="反射相关类"><a href="#反射相关类" class="headerlink" title="反射相关类"></a>反射相关类</h1><h1 id="反射调用性能优化"><a href="#反射调用性能优化" class="headerlink" title="反射调用性能优化"></a>反射调用性能优化</h1><h1 id="class类常用方法"><a href="#class类常用方法" class="headerlink" title="class类常用方法"></a>class类常用方法</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>后端</title>
    <url>/2022/07/21/%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="张哲老师的后端小课堂"><a href="#张哲老师的后端小课堂" class="headerlink" title="张哲老师的后端小课堂"></a>张哲老师的后端小课堂</h1><p>项目入口</p>
<p>main–lizhishop</p>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span> post请求</span><br><span class="line">    </span><br><span class="line"><span class="meta">@RequestBody</span>   需要的请求体 </span><br></pre></td></tr></table></figure>

<p>dao</p>
<p>里面是sql</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">entity</span><br><span class="line"></span><br><span class="line">实体</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@All</span>``````</span><br><span class="line"><span class="meta">@No</span>``````</span><br></pre></td></tr></table></figure>

<p>相当于封装了的get和set方法</p>
<p>service</p>
<p>服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<p>写接口的顺序</p>
<p>在service里面找到对应的功能 写一个接口</p>
<p>还要写一个服务的类，然后在使用的接口里面实现</p>
<p>处理获得的数据</p>
<p>操作数据库  在每一个实现接口的类里面都有一个Dao类，调用或者新写一个方法，用来处理和数据库关联的东西</p>
<p>返回对应的数据</p>
<p>然后在controller里面写暴露的接口的类型</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式</title>
    <url>/2022/07/21/%E5%93%8D%E5%BA%94%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>响应式</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2022/07/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p><img src="https://tu.sunning.fit/i/2022/05/02/626fc13fda0d0.jpg" alt="img"></p>
<h2 id="状态表示"><a href="#状态表示" class="headerlink" title="状态表示"></a>状态表示</h2><p>f思考用几维的状态来表示</p>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>状态表示表示的是哪一个集合</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>考虑状态表示的数应该存哪一个属性</p>
<p> Max,Min,数量</p>
<h2 id="状态计算"><a href="#状态计算" class="headerlink" title="状态计算"></a>状态计算</h2><p>如何一步一步把每个状态算出来</p>
<p>集合划分——把当前集合分成一个一个之前求过的更小的集合，集合划分的原则（不漏，不重（极少数情况下可以重））</p>
<h2 id="DP优化"><a href="#DP优化" class="headerlink" title="DP优化"></a>DP优化</h2><p>对dp的代码或者计算方程进行等价变形</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>状态的数量* 每个状态需要的时间</p>
<h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><blockquote>
<p>给N个物品和大小为V的背包，每个物品只能用一次，每个物品的体积vi价值wi,背包能装得下的情况下，能装得最大的价值为多少 </p>
<p><strong>01背包问题</strong>    每件物品只能使用一次</p>
<p><strong>完全背包问题</strong> 每件物品无限个</p>
<p><strong>多重背包问题</strong> 每个物品有限个</p>
<p><strong>分组背包问题</strong> N组，每组只能选择其中一个</p>
</blockquote>
<h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/02/626fc1d380e09.jpg" alt="img"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>背包物品的维度，可以选择的物品，可以使用的空间，钱是多少</p>
<p>状态表示： i表示空间，j表示空间（对应上面的维度）题目求的是最大值，所以表示的是最大值（钱）</p>
<p>状态计算：集合划分</p>
<p>划分成两个部分：</p>
<p>划分依据：是否包含i这个物品</p>
<ol>
<li>从1到i个物品选，不包含i，体积小于j  <code>f(i-1,j)</code></li>
<li>从1到i个物品选，包含i,体积小于j <code>f(i-1,j-v)+i的价值</code></li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> v[N],w[N];  <span class="comment">//v表示体积，w表示价值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;   <span class="comment">//选择物品的个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;   <span class="comment">//能够选择的重量</span></span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=v[i])f[i][j]= <span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>Tips:</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(j&gt;=v[i])f[i][j]= <span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br></pre></td></tr></table></figure>

<p>是j&gt;&#x3D;v[i] 别把等号忘了，要不意思表达错了</p>
</blockquote>
<p>优化写法</p>
<blockquote>
<p>f[i] [j]&#x3D;f[i-1] [j]; 就是 f[j]&#x3D;f[j]可以直接删掉<br>if(j&gt;&#x3D;v[i]) &#x2F;&#x2F;可以让j直接从v[i]开始做<br>f[i] [j]&#x3D; max(f[i] [j],f[i-1] [j-v[i]]+w[i]);  这里因为i-1小于i,而在这个式子里面小的数会先被计算，变成f[i] [j-v[i]]+w[i],所以循环的顺序变成从大到小,这样，之前的就会后被计算，可以进一步化简<br>这样f[j-v[i]]还没有被更新过，存的就是第i-1层的v[i]<br>随着i的变化每一轮都会更新一遍所有的数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=v[i];j--)</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>滚动数组</strong></p>
<p>就是让数组滚动起来，每次都使用固定的几个存储空间，来达到压缩，节省存储空间的作用。起到优化空间，主要应用在递推或动态规划中（如01背包问题）。因为DP题目是一个自底向上的扩展过程，我们常常需要用到的是连续的解，前面的解往往可以舍去。所以用滚动数组优化是很有效的。利用滚动数组的话在N很大的情况下可以达到压缩存储的作用。</p>
<p>用时间换空间</p>
<p>例子：求斐波那契数列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> d[<span class="number">3</span>];</span><br><span class="line">    d[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    d[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">80</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d[<span class="number">0</span>]=d[<span class="number">1</span>];</span><br><span class="line">        d[<span class="number">1</span>]=d[<span class="number">2</span>];</span><br><span class="line">        d[<span class="number">2</span>]=d[<span class="number">0</span>]+d[<span class="number">1</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,d[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/02/626fd7c582f45.png" alt="image-20220502210819099"></p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>状态表示</p>
<img src="https://tu.sunning.fit/i/2022/05/02/626fdcc3199a5.png" alt="image-20220502212934832" style="zoom:50%;" />

<p>分成很多个块，选择一个，选择两个，三个。。。直到背包装不下的情况</p>
<p><img src="https://tu.sunning.fit/i/2022/05/02/626fd74c7c0de.jpg" alt="img"></p>
<p>优化</p>
<p>把每一个都挨个列举出来，发现f[i,j]和f[i,j-v]之间的区别只差了个w</p>
<p><img src="https://tu.sunning.fit/i/2022/05/02/626fd87ba71fe.jpg" alt="img"></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> v[N],w[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k*v[i]&lt;=j;k++)&#123;</span><br><span class="line">                f[i][j]= <span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j-v[i]*k]+w[i]*k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>better</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=v[i]) f[i][j]= <span class="built_in">max</span>(f[i][j],f[i][j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>best</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=v[i];j&lt;=m;j++)&#123;</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+w[i]);  <span class="comment">//这个循环完得到的是j&lt;m的限制，当循环结束的时候i对应的就是n的时候</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从最终版本的代码01背包和完全背包在代码上只是第二个循环一个是倒序，一个是正序的区别</p>
<p>正序和倒序的原因在于01背包删去的是j[i-1] [xxx]</p>
<p>完全背包删去的是 j[i] [xxx]</p>
</blockquote>
<h2 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/02/626fdc226026b.png" alt="image-20220502212655870"></p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>和完全背包问题唯一的区别在于容量限制多了一条：要小于这个物品对应的个数</p>
<p><strong>不能按照完全背包的方法进行优化</strong></p>
<p>因为两个的max值并不相同，下面的那个多了一项加式（可选物品是有限个造成的）</p>
<p><img src="https://tu.sunning.fit/i/2022/05/02/626fe06151b70.png" alt="image-20220502214502596"></p>
<blockquote>
<p>优化方法： <strong>二进制</strong></p>
<p> 例如：如果有1024个</p>
<img src="https://tu.sunning.fit/i/2022/05/02/626febf202d86.png" alt="image-20220502223423680" style="zoom:33%;" />

<p> 分成八组（2的8次幂是1024），这八组可以表示出来从0到1023的任意一个数，我们也把需要放进背包的东西分成8个组，取每个组即可（转化成01背包问题）</p>
<p>这样可以把每一组转成一堆新的v和w，每有一个新的组，就把这个组转化成新的一堆组</p>
<p>之后就是使用这一堆新的v和w进行计算了，因为只能选一个，于是变成01背包问题</p>
</blockquote>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> v[N],w[N],s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i]&gt;&gt;s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=s[i]&amp;&amp;k*v[i]&lt;=j;k++)&#123;</span><br><span class="line">                f[i][j]= <span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j-v[i]*k]+w[i]*k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*4 5</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">2 4 1</span></span><br><span class="line"><span class="comment">3 4 3</span></span><br><span class="line"><span class="comment">4 5 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 10*/</span></span><br></pre></td></tr></table></figure>

<p>二进制</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,s;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(k&lt;=s)&#123;   <span class="comment">//这个是对确定的a和确定的b进行的操作，现在不确定的是取几个k,然后用二进制能够表示左右的数的方法把二进制表示出来</span></span><br><span class="line">            cnt++;</span><br><span class="line">            v[cnt]=a*k;</span><br><span class="line">            w[cnt]=b*k;</span><br><span class="line">            s-=k;</span><br><span class="line">            k*=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            v[cnt]=a*s;</span><br><span class="line">            w[cnt]=b*s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n=cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=v[i];j--)&#123;</span><br><span class="line">            f[j]= <span class="built_in">max</span>(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分组背包问题"><a href="#分组背包问题" class="headerlink" title="分组背包问题"></a>分组背包问题</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/02/626fef4f1557d.png" alt="image-20220502224844212"></p>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>状态表示 f[i] [j]  从前i个物品中选，总体积不大于j的所有选法</p>
<p>属性 max</p>
<p>状态计算</p>
<p><img src="https://tu.sunning.fit/i/2022/05/02/626fefdb3ead5.png" alt="image-20220502225103713"></p>
<p>分组分成每一组里面选择不同物品的情况</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><p>化简写法</p>
<blockquote>
<p>如果会用到之前的就从大到小进行循环，如果不会用到之前的，就正常进行循环即可</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> v[N][N],w[N][N],s[N];  <span class="comment">//v是对应组对应序号的体积，w是对应组对应序号的价值</span></span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s[i];j++)&#123;</span><br><span class="line">            cin&gt;&gt;v[i][j]&gt;&gt;w[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;s[i];k++)&#123;</span><br><span class="line">                f[j]=<span class="built_in">max</span>(f[j],f[j-v[i][k]]+w[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3 5</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">4 5*/</span></span><br></pre></td></tr></table></figure>







<h1 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h1><p>dp是多维的（不一定几维），如果像下面这样求解的过程中是有顺序的称为线性dp</p>
<p><img src="https://tu.sunning.fit/i/2022/05/02/626fffcfa784e.png" alt="image-20220502235909409"></p>
<h2 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/03/627094f4c5f86.png" alt="image-20220503103530602"></p>
<h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p><img src="https://tu.sunning.fit/i/2022/05/03/627097c9a10bd.png" alt="image-20220503104734857"></p>
<blockquote>
<p>三角形每个点的表示：</p>
<img src="https://tu.sunning.fit/i/2022/05/03/627097fb70ada.png" alt="image-20220503104824559" style="zoom:67%;" />

<p>a[i] [j]  i代表每一层，j用右下方的线来代表</p>
<p>左上点的表示：</p>
<p>​	f[i-1,j-1]</p>
<p>右上点的表示：</p>
<p>​	f[i-1,j]</p>
</blockquote>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><blockquote>
<p>下标是从0开始还是从1开始，一般如果有i-1的存在，从1开始f[0] 避免数组下标越界</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>,INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化，从i=0开始初始化，j&lt;=i+1 要往外面多初始化一格，因为三角形判断的时候会判断到右上</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i+<span class="number">1</span>;j++)&#123;</span><br><span class="line">            f[i][j]=-INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一个数不进行下面的计算</span></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>]=a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            f[i][j]= <span class="built_in">max</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i][j],f[i<span class="number">-1</span>][j]+a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res=-INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) res= <span class="built_in">max</span>(res,f[n][i]);</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化</p>
<p>处理边界问题的另外一个办法，把所有无关的数都当作0,这样就算读取到了，也不会对题目造成影响</p>
<blockquote>
<p>求最大值可以用max比用if判断好，而且最大值一定在最下面一行</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理边界问题的另外一个办法，把所有无关的数都当作0,这样就算读取到了，也不会对题目造成影响</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            f[i][j]= <span class="built_in">max</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i][j],f[i<span class="number">-1</span>][j]+a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=-INT_FAST16_MAX;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=i;j++)&#123;</span></span><br><span class="line"><span class="comment">           if(res&lt;f[i][j])&#123;</span></span><br><span class="line"><span class="comment">               res=f[i][j];</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//比上面更好的写法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) res= <span class="built_in">max</span>(res,f[n][i]);</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/03/6270a3f2b96dc.png" alt="image-20220503113928580"></p>
<h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p><img src="https://tu.sunning.fit/i/2022/05/03/6270b335f2ed1.jpg" alt="img"></p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N],f[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[i])&#123;</span><br><span class="line">                f[i]= <span class="built_in">max</span>(f[i],f[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        res= <span class="built_in">max</span>(res,f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">3 1 2 1 8 5 6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4*/</span></span><br></pre></td></tr></table></figure>

<p>记录返回路径的写法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(f[j]+<span class="number">1</span>&gt;f[i])&#123;</span><br><span class="line">                    g[i]=j;</span><br><span class="line">                    f[i]=f[j]+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[k]&lt;f[i])&#123;</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[k]&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,len=f[k];i&lt;len;i++,temp++)&#123;</span><br><span class="line">        b[temp]=a[k];</span><br><span class="line">        k=g[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp;i++)&#123;</span><br><span class="line">        cout&lt;&lt;b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个坑：</p>
<p><img src="https://tu.sunning.fit/i/2022/05/03/6270c3505e61c.png" alt="image-20220503135318049"></p>
</blockquote>
<h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/03/6270cd78bc459.png" alt="image-20220503143632823"></p>
<h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p><img src="https://tu.sunning.fit/i/2022/05/03/6270d02c023dd.png" alt="image-20220503144809070"></p>
<p>状态计算划分的方式</p>
<table>
<thead>
<tr>
<th>不包含a[i],b[j]</th>
<th>不包含a[i]，包含b[j]</th>
<th>包含a[i],不包含b[j]</th>
<th>包含a[i]，b[j]</th>
</tr>
</thead>
<tbody><tr>
<td>f[i-1,j-1]</td>
<td>f[i-1,j]这个求的是在a[i-1]和b[j]里面的最大值，最后一个不一定是a[i-1]或者b[j] 但因为求的是最大值，所以没有影响<br/>但如果这一题求的是数量，就不能有重复</td>
<td></td>
<td>f[i-1,j-1]+1</td>
</tr>
</tbody></table>
<blockquote>
<p>读取字符串变成字符数组的方便方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[N],b[N];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,a+<span class="number">1</span>,b+<span class="number">1</span>);  <span class="comment">//从a[1],b[1]的位置开始读</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><blockquote>
<p>状态划分四个分成两个两个去看</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            f[i][j]= <span class="built_in">max</span>(f[i<span class="number">-1</span>][j],f[i][j<span class="number">-1</span>]);  <span class="comment">//先看如果最后一个字符不相同的情况</span></span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j]) f[i][j]= <span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="comment">//读取字符串变成字符数组的方法</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,a+<span class="number">1</span>,b+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            f[i][j]= <span class="built_in">max</span>(f[i<span class="number">-1</span>][j],f[i][j<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j]) f[i][j]= <span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">acbd</span></span><br><span class="line"><span class="comment">abedc</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h1 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h1><blockquote>
<p>这一类题目，一般是先循环区间长度，然后循环区间的左端点，然后再枚举决策</p>
</blockquote>
<h2 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/03/6270e555f0181.png" alt="image-20220503161722156"></p>
<h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>这道题目和完全背包很像，就是把完全背包问题的求最大值变成求所有可行解的和</p>
<p><img src="https://tu.sunning.fit/i/2022/05/03/6270ed3570ce1.png" alt="image-20220503165202961"></p>
<p>时间复杂度：需要遍历的个数 n平方，遍历每个需要的n,总的时间复杂度是n的三次方</p>
<p><strong>状态计算：</strong></p>
<p>f[i,j] 分成f[i,1]和其他；f[i,2]和其他。。。。。f[i,k-1]和其他的情况</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;r;k++)&#123;</span><br><span class="line">                f[l][r]= <span class="built_in">min</span>(f[l][r],f[l][k]+f[k+<span class="number">1</span>][r]+s[r]-s[l<span class="number">-1</span>]); <span class="comment">//s[r]-s[l-1] 前缀和，最后一步一定是从l到r这些数的和</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;s[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]+=s[i<span class="number">-1</span>];  <span class="comment">//前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">2</span>;len&lt;=n;len++)&#123;   <span class="comment">//每个区间的长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;i++)&#123;   <span class="comment">//每个区间开始的位置</span></span><br><span class="line">            <span class="type">int</span> l=i,r=i+len<span class="number">-1</span>;  </span><br><span class="line">            f[l][r]=<span class="number">1e8</span>; <span class="comment">//一开始把需要求的数设置成最大，默认是0会干扰计算</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;r;k++)&#123;</span><br><span class="line">                f[l][r]= <span class="built_in">min</span>(f[l][r],f[l][k]+f[k+<span class="number">1</span>][r]+s[r]-s[l<span class="number">-1</span>]); <span class="comment">//s[r]-s[l-1] 前缀和，最后一步一定是从l到r这些数的和</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[<span class="number">1</span>][n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1 3 5 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">22</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h1 id="记数类DP"><a href="#记数类DP" class="headerlink" title="记数类DP"></a>记数类DP</h1><h2 id="整数划分"><a href="#整数划分" class="headerlink" title="整数划分"></a>整数划分</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/03/6270f287edb76.png" alt="image-20220503171445234"></p>
<h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>可以把这个当成完全背包问题</p>
<p>因为可以选择的东西无限，把背包装满为止</p>
<p>分析方法也和完全背包一致</p>
<p><img src="https://tu.sunning.fit/i/2022/05/03/6270f5716b39a.png" alt="image-20220503172711171"></p>
<p>优化方式也和完全背包类似</p>
<p><img src="https://tu.sunning.fit/i/2022/05/03/6271420f22832.png" alt="image-20220503225404857"></p>
<p>完全一样，所以可以优化成</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">f[i][j]=f[i<span class="number">-1</span>][j]+f[i][j<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<p>去掉i</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">f[j]=f[j]+f[j-i]</span><br></pre></td></tr></table></figure>

<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;  <span class="comment">//如果只能选择0个空间是0,也就不选这一种方法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class="line">            f[j]=(f[j]+f[j-i])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析二"><a href="#分析二" class="headerlink" title="分析二"></a>分析二</h3><p><img src="https://tu.sunning.fit/i/2022/05/03/62714a1a85f0f.png" alt="image-20220503232824355"></p>
<blockquote>
<p>状态计算：</p>
<p>因为状态表示的是 总和是i,恰好表示成j个数的和的方案</p>
<p>所以可以分成 表示的所有数里面最小值存在1的情况，和所有数里面最小值不存在1的情况</p>
<ol>
<li>如果存在最小值是1的情况，可以去掉这个存在的1,然后变成<br>总和是i-1,存在的数是j-1（因为去掉了一个1这个数）<br>即 f[i-1,j-1]</li>
<li>如果存在最小值大于1的情况，那可以给每一个数都减去一个1,<br>因为还是j个数，所以f[xxx,j]<br>因为每一个数都减去了1,一共j个数，所以总和减去了j,<br>即 f[i-j,j]</li>
<li>状态转移方程就是 f[i,j]&#x3D;f[i-1,j-1]+f[i-j,j]</li>
<li>记得把所有的可能性都列出来  ans&#x3D;f[n,1]+f[n,2]+……..+f[n,n]</li>
</ol>
</blockquote>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;  <span class="comment">//如果只能选择0个空间是0,也就不选这一种方法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            f[i][j]=(f[i<span class="number">-1</span>][j<span class="number">-1</span>]+f[i-j][j])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) res=(res+f[n][i])%mod;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="数位统计DP"><a href="#数位统计DP" class="headerlink" title="数位统计DP"></a>数位统计DP</h1><h2 id="计数问题"><a href="#计数问题" class="headerlink" title="计数问题"></a>计数问题</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/03/62715141e96ef.png" alt="image-20220503235855451"></p>
<h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>分情况讨论</p>
<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><h1 id="状态压缩DP"><a href="#状态压缩DP" class="headerlink" title="状态压缩DP"></a>状态压缩DP</h1><blockquote>
<p>状态压缩：</p>
<p>题目中没有给出数字，但是我们用0,1来分别表示不同的状态，把它看成一个二进制数</p>
<p>通过位运算等方法对不同的可能进行限制（变成位运算的原因是为了用位运算等方法对不同的可能做出限制）</p>
</blockquote>
<h2 id="蒙德里安的梦想"><a href="#蒙德里安的梦想" class="headerlink" title="蒙德里安的梦想"></a>蒙德里安的梦想</h2><h3 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/05/627395030f357.png" alt="image-20220505171229924"></p>
<h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p><img src="https://tu.sunning.fit/i/2022/05/05/6273967d17423.png" alt="image-20220505171841004"></p>
<p>当所有的横向小方格放完之后，所有的竖着的小方格只能一列列放，没有其他选择了</p>
<p>所以，整个的摆放方式和横向小方格的摆放方式是一样多的。</p>
<p><img src="https://tu.sunning.fit/i/2022/05/05/62739901df843.png" alt="image-20220505172935981"></p>
<p>对于第i行，如上面的图（第三列）看有几个横着的两个格子的末尾</p>
<p>第一列是从上到下是1 0 0 1 0</p>
<p>第二列是 1 1 0 1 1</p>
<p>第三列是 0 1 0 0 1</p>
<blockquote>
<p>这道题目的状态转换：</p>
<ol>
<li>上一列的同一行不能都是1，否则会有冲突</li>
<li>每一列不存在连续奇数个0（因为需要用竖着的格子填，奇数个空着的竖着的格子没法填）</li>
</ol>
</blockquote>
<p>对于第一列只能是0</p>
<p>f[i] [j] j就是用二进制来表示状态的，i是不同的列 f[i] [j]用来存的是有多少种情况</p>
<p>st[i]表示的是</p>
<h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><h1 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h1><h1 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h1><h1 id="算法作业题目"><a href="#算法作业题目" class="headerlink" title="算法作业题目"></a>算法作业题目</h1><h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><h3 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/05/6273d2f41f8b4.png" alt="image-20220502110736462"></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>;</span><br><span class="line"><span class="type">int</span> a[N],f[N];</span><br><span class="line"><span class="type">int</span> mmax;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    memset(f,1,sizeof f);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        f[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[i+<span class="number">1</span>])&#123;</span><br><span class="line">                f[i]= max(f[j]+<span class="number">1</span>,f[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mmax&lt;f[i])&#123;</span><br><span class="line">                mmax=f[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mmax&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;f[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*10</span></span><br><span class="line"><span class="comment">1 2 6 4 7 8 5 3 2 11</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">6 5 1 4 3 1 1 1 2*/</span></span><br></pre></td></tr></table></figure>

<h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>从后往前进行计算，在当前数字段里面，最优的解是多少</p>
<p>状态转移条件：当前面一个数小于后面一个数的时候开始进行比较</p>
<p>状态转移方程：f[i]&#x3D; max(f[j]+1,f[i]); 当下的最优解和枚举到不包含最后一个数值的最优解+1（加1代表算上最后一个数值）的最优解比较</p>
<h3 id="时间，空间复杂度分析"><a href="#时间，空间复杂度分析" class="headerlink" title="时间，空间复杂度分析"></a>时间，空间复杂度分析</h3><p><strong>时间复杂度</strong>：</p>
<p>最高的代码段是这部分</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[i+<span class="number">1</span>])&#123;</span><br><span class="line">                f[i]= <span class="built_in">max</span>(f[j]+<span class="number">1</span>,f[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mmax&lt;f[i])&#123;</span><br><span class="line">                mmax=f[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>计算的个数是n-1+n-2+….+1 </p>
<p>时间复杂度是O(n的平方)</p>
<p><strong>空间复杂度：</strong></p>
<p>状态表示用f[i]存每个的最优解</p>
<p>是O(n)</p>
<h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><h3 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/05/6273d34217e54.png" alt="image-20220502110947200"></p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Store</span>&#123;</span><br><span class="line">    <span class="type">int</span> position,value;</span><br><span class="line">&#125;store[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;store[i].position&gt;&gt;store[i].value;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">1</span>]=store[<span class="number">1</span>].value;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(store[i].position-store[j].position&gt;=d)&#123;</span><br><span class="line">                f[i]= <span class="built_in">max</span>(f[i],f[j]+store[i].value);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                f[i]=<span class="built_in">max</span>(f[j],f[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*5 2</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">4 6</span></span><br><span class="line"><span class="comment">6 7</span></span><br><span class="line"><span class="comment">7 4</span></span><br><span class="line"><span class="comment">9 3*/</span></span><br></pre></td></tr></table></figure>





<h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><p>f[i]是可以选择第i个商店的最优解是多少</p>
<p>状态划分的条件是选择第i个商店——对应store[i].position-store[j].position&gt;&#x3D;d</p>
<p>和不选择第i个商店——store[i].position-store[j].position&gt;&#x3D;d</p>
<p>状态转移方程，从第一个商店开始枚举，对于每一个新加入的商店，有</p>
<blockquote>
<blockquote>
<p>1.新的商店不在之前的最优解f[i]的商店的范围里面：</p>
<p>f[i]是没有新商店的最优解可以随意加上store[i].value都是满足条件的</p>
<p>也就是比较没有新商店时的最优解f[j]+store[i].value和现在的最优解f[i]的大小，取最大值</p>
</blockquote>
<blockquote>
<p>2.新的商店在之前的最优解f[i]的商店的范围里面：</p>
<p>这个时候就不会删除现在的商店然后建立新的商店了（因为上面一部包括这种情况了）</p>
<p>这时候就是看在d这个范围内的可以选择的商店的最优解和上面一定包含第i个商店时候的最优解谁大</p>
</blockquote>
</blockquote>
<h3 id="时间空间复杂度分析"><a href="#时间空间复杂度分析" class="headerlink" title="时间空间复杂度分析"></a>时间空间复杂度分析</h3><p><strong>时间复杂度：</strong></p>
<p>最高的代码段是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(store[i].position-store[j].position&gt;=d)&#123;</span><br><span class="line">               f[i]= <span class="built_in">max</span>(f[i],f[j]+store[i].value);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               f[i]=<span class="built_in">max</span>(f[j],f[i]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>1+2+……+n-1时间复杂度是O(n的平方)</p>
<p><strong>空间复杂度：</strong></p>
<p>用f[n]存的可以选择时最优解，复杂度是O(n)</p>
<h2 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h2><h3 id="题目-13"><a href="#题目-13" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/05/6273d4dd6c67e.png" alt="image-20220502111111445"></p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> d[N][N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> g[N][N],b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            cin&gt;&gt;d[i][j];</span><br><span class="line"><span class="comment">//f[i][j]=10000;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">2</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            f[i][j]=<span class="number">10000</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i+<span class="number">1</span>;<span class="built_in">k</span>&lt;j;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(f[i][j]&gt;(f[i][k]+f[k][j]+d[i][k]+d[k][j]+d[i][j]))&#123;</span><br><span class="line">                    g[i][j]=k;</span><br><span class="line">                &#125;</span><br><span class="line">                f[i][j]=<span class="built_in">min</span>(f[i][j],f[i][k]+f[k][j]+d[i][k]+d[k][j]+d[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> for(int i=n-2;i&gt;=1;i--)&#123;</span></span><br><span class="line"><span class="comment">for(int j=i+2;j&lt;=n;j++)&#123;</span></span><br><span class="line"><span class="comment">cout&lt;&lt;g[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;_______&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;<span class="number">3</span>;)&#123;</span><br><span class="line">        cout&lt;&lt;g[<span class="number">1</span>][i]&lt;&lt;endl;</span><br><span class="line">        i=g[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[<span class="number">1</span>][n]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*6</span></span><br><span class="line"><span class="comment">0 2 3 1 5 6</span></span><br><span class="line"><span class="comment">2 0 3 4 8 6</span></span><br><span class="line"><span class="comment">3 3 0 10 13 7</span></span><br><span class="line"><span class="comment">1 4 10 0 12 5</span></span><br><span class="line"><span class="comment">5 8 13 12 0 3</span></span><br><span class="line"><span class="comment">6 6 7 5 3 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">54</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>





<p>计算时候出现的坑：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        cin&gt;&gt;d[i][j];</span><br><span class="line">        f[i][j]=<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里初始化的时候全部赋值为极大值是错的，应该是在下面的循环里面用到哪一个赋值给哪一个，因为下面</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=i+<span class="number">1</span>;k&lt;j;k++)&#123;</span><br><span class="line">                f[i][j]=<span class="built_in">min</span>(f[i][j],f[i][k]+f[k][j]+d[i][k]+d[k][j]+d[i][j]);</span><br></pre></td></tr></table></figure>

<p>这一步的时候需要有等于0的f[i] [k]和f[k] [j] 对应三角形等情况</p>
<blockquote>
<p>关于循环为什么这样进行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">2</span>;j&lt;=n;j++)</span><br></pre></td></tr></table></figure>

<p>而不是全是正序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">2</span>;j&lt;=n;j++)&#123;</span><br></pre></td></tr></table></figure>

<p>动态规划应该是从最小的开始一点一点往更大的方向扩展，而如果正序，则一开始就是最大的，而最大的应该使用的细分条件还没有从动规中获得，导致错误</p>
</blockquote>
<h3 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h3><blockquote>
<p>表示多边形的方法</p>
<p>如果是6边形：</p>
<p>0,2,3,1,4,6就代表它距离1,2,3,4,5,6号点的距离</p>
</blockquote>
<p>状态表示 f[i] [j] 表示从i点到j点的最小权重</p>
<p>状态转移：</p>
<p>对于在i和j之间的一个点k</p>
<p>可以分成</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">f[i][j]=<span class="built_in">min</span>(f[i][k]+f[k][j]+d[i][k]+d[k][j]+d[i][j])</span><br></pre></td></tr></table></figure>



<p><img src="https://tu.sunning.fit/i/2022/05/06/62748f2e24c04.png" alt="image-20220506105954912"></p>
<blockquote>
<p>如何表示路径</p>
<p>用g[i] [k]来存起始位置是i,结束位置是k的时候，选择的需要切割的点k</p>
<p>接下来会分成g[i] [k] + g[k] [j]，然后如果i和k的距离大于等于2的时候，接着去看对应的g[i] [j]</p>
<p>注意状态转移的方程,i是上一个的递归的解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;<span class="number">3</span>;)&#123;</span><br><span class="line">        cout&lt;&lt;g[<span class="number">1</span>][i]&lt;&lt;endl;</span><br><span class="line">        i=g[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>具体可以看题目一的记录方法 </p>
<blockquote>
<p>基本动规求路径都是这个方法</p>
</blockquote>
</blockquote>
<p>路径：</p>
<p>从1,6开始的点和4号点相连，从1,4开始的点和3号点相连，相互切割得到的三角形就是最优的三角形</p>
<p><img src="https://tu.sunning.fit/i/2022/05/06/62748f4015c97.png" alt="image-20220506110013618"></p>
<p>从后往前从第一个三角形一点一点往外面扩，因为循环里面有</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">2</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>i和j的距离一定是大于等于2的，对于i和j小于等于1的情况，会是</p>
<h3 id="时间空间复杂度分析-1"><a href="#时间空间复杂度分析-1" class="headerlink" title="时间空间复杂度分析"></a>时间空间复杂度分析</h3><p>n-4+n-3+n-2+…..+3,时间复杂度是O(n的平方)</p>
<p>空间复杂度是O(n的平方)</p>
<h2 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h2><h3 id="题目-14"><a href="#题目-14" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/05/6273d530ad4a0.png" alt="image-20220502111125674"></p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> f[N][N][N];</span><br><span class="line"><span class="type">int</span> weight[N],volume[N],value[N];</span><br><span class="line"><span class="type">int</span> maxWeight,maxVolume;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;maxWeight&gt;&gt;maxVolume;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;weight[i]&gt;&gt;volume[i]&gt;&gt;value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=maxWeight;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=maxVolume;k++)&#123;</span><br><span class="line">               f[i][j][k]=f[i<span class="number">-1</span>][j][k];</span><br><span class="line">               <span class="keyword">if</span>(j&gt;=weight[i] &amp;&amp; k&gt;=volume[i])&#123;</span><br><span class="line">                   f[i][j][k]= <span class="built_in">max</span>(f[i][j][k],f[i<span class="number">-1</span>][j-weight[i]][k-volume[i]]+value[i]);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][maxWeight][maxVolume];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*4 2 5</span></span><br><span class="line"><span class="comment">1 2 4</span></span><br><span class="line"><span class="comment">1 1 2</span></span><br><span class="line"><span class="comment">2 3 4</span></span><br><span class="line"><span class="comment">1 4 5</span></span><br><span class="line"><span class="comment">       </span></span><br><span class="line"><span class="comment">7*/</span></span><br></pre></td></tr></table></figure>

<h3 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h3><p>多维数组f[i] [j] [k] 分别用来存当可以选择的物品个数是i个的时候，占用的重量是j的时候，占用的空间是k的最优解</p>
<p>和01背包的区别在于多了一个限制条件，算法的基本思想不变</p>
<h3 id="时间空间复杂度分析-2"><a href="#时间空间复杂度分析-2" class="headerlink" title="时间空间复杂度分析"></a>时间空间复杂度分析</h3><p>时间复杂度：三个循环，时间复杂度是O(n的三次方)</p>
<p>空间复杂度：用来存每个的最优解的多维数组也是O(n的三次方)</p>
<h2 id="题目五"><a href="#题目五" class="headerlink" title="题目五"></a>题目五</h2><h3 id="题目-15"><a href="#题目-15" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/05/6273d56647cf5.png" alt="image-20220502111155665"></p>
<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> v[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> aim;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;aim;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=aim;i++)&#123;</span><br><span class="line">        f[i]=<span class="number">1e5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=aim;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a:v)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=a)&#123;</span><br><span class="line">                f[i]= <span class="built_in">min</span>(f[i],<span class="number">1</span>+f[i-a]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[aim]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*6 2500</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    5</span></span><br><span class="line"><span class="comment">    10</span></span><br><span class="line"><span class="comment">    50</span></span><br><span class="line"><span class="comment">    100</span></span><br><span class="line"><span class="comment">    1000</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    7*/</span></span><br></pre></td></tr></table></figure>



<h3 id="算法思想-4"><a href="#算法思想-4" class="headerlink" title="算法思想"></a>算法思想</h3><p>用f[i] 表示当凑出金额为i时最优的解，依次枚举每一个硬币，如果硬币的面值比i小，</p>
<p><code>f[i]=min(f[i],1+f[i-a])</code></p>
<h3 id="时间空间复杂度分析-3"><a href="#时间空间复杂度分析-3" class="headerlink" title="时间空间复杂度分析"></a>时间空间复杂度分析</h3><p>时间复杂度：硬币的个数n,需要表示的金额为m 时间复杂度为O(mn)</p>
<p>空间复杂度：需要存在每个金额时的最优解 O(n)</p>
<h2 id="题目六"><a href="#题目六" class="headerlink" title="题目六"></a>题目六</h2><h3 id="题目-16"><a href="#题目-16" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/05/05/6273d56f5006b.png" alt="image-20220502111205707"></p>
<h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> d,r;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line">string A,B;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;A&gt;&gt;B;</span><br><span class="line">    <span class="type">int</span> al=A.<span class="built_in">length</span>(),bl=B.<span class="built_in">length</span>();</span><br><span class="line">    cin&gt;&gt;d&gt;&gt;r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;al;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;bl;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span>)&#123;  <span class="comment">//避免出现下面那种数组&lt;0越界的情况</span></span><br><span class="line">                f[i][j]=<span class="built_in">max</span>(i,j);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(A[i]==B[j])&#123;</span><br><span class="line">                f[i][j]=f[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                f[i][j]= <span class="built_in">min</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],f[i<span class="number">-1</span>][j]+d);</span><br><span class="line">                f[i][j]= <span class="built_in">min</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],f[i][j<span class="number">-1</span>]+d);</span><br><span class="line">                f[i][j]= <span class="built_in">min</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],f[i<span class="number">-1</span>][j<span class="number">-1</span>]+r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[al<span class="number">-1</span>][bl<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">word</span></span><br><span class="line"><span class="comment">wordword</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4*/</span></span><br></pre></td></tr></table></figure>

<h3 id="算法思想-5"><a href="#算法思想-5" class="headerlink" title="算法思想"></a>算法思想</h3><p>f[i] [j] 表示的是当第一个字符串到了i的长度的时候，第二个字符串到了j长度的时候，他们的不同</p>
<p>对于这些不同可以表示成四种样子：</p>
<p>去掉两个字符串的最后一个——变成f[i-1] [j-1]</p>
<p>去掉第一个字符串的最后一个——变成f[i-1] [j]+代价</p>
<p>去掉第二个字符串的最后一个——变成f[i] [j-1]+代价</p>
<p>把两个不相同的最后一个的其中一个变成相同的——变成f[i-1] [j-1]+代价</p>
<h3 id="时间空间复杂度分析-4"><a href="#时间空间复杂度分析-4" class="headerlink" title="时间空间复杂度分析"></a>时间空间复杂度分析</h3><p>第一个字符串的长度是n,第二个字符串的长度是m</p>
<p>因为需要第一个字符串长度从1到n,第二个字符串长度从1到m,所以</p>
<p>时间复杂度是：O(nm)</p>
<p>空间复杂度是：O(nm)</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>基础知识</title>
    <url>/2022/07/21/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>new方法用的时候需要小心，因为new一般是在函数的里面，这样子new和这个函数就有了很大的耦合<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd88421f9cc.png" alt="image1"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd8845f2b24.jpeg" alt="image2"><br>变量&#x3D;以变量名所对应的内存地址为起点，以其数据类型所要求的存储空间为长度的一块内存区域<br>类的继承，新建的类可以集成其他的类</p>
<p>类型转换 double score &#x3D; double.Parse( );</p>
<p>Vs 操作化简<br>tab程序自动补全</p>
<p>按住 control和右面的花括号键，光标可以在两个花括号或者括号之间跳转<br>写出来了一个括号，直接按；，；会自动跳到）之后<br>if 也可以用tab自动补全 而且写完条件语句之后，敲回车光标会直接回到块语句之中<br>propfull加两个tab生成属性，有三个可以改的位置<br>prop加两个tab简略声明属性<br>快捷键 连续按两下tab就会出现<br>Stor 会自动在函数里面写一个构造器<br>Cw console.writeline<br>For 自动出一个循环</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd884a6fb2d.jpeg" alt="image3"><img src="https://tu.sunning.fit/i/2022/07/12/62cd884ecaa46.png" alt="image4"></p>
<p>Var 自动类型判断<br>如果建立的对象只是使用一次的话，用初始化器{}（就是大括号）比正常写好很多<br>Form a&#x3D;new form;<br>Form.test&#x3D;hello;<br>Form.showdialog();<br>这三个句子和new form().{text&#x3D;”hello”}.showdialog();好很多<br>语法糖，new后面不一定要跟一个实体，可以用var和初始化器来避开想实体<br>Var a &#x3D;new {name&#x3D;”hahaha”,age&#x3D;34};(而且在这种情况下，想写类型都写不出来这个的类型) 是推荐多使用var这个方法的</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd8853d3969.png" alt="image5"><br>强制类型转换之显式类型转换<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd88583359d.png" alt="image6"></p>
<p>改成隐性类型转换只要把explicit改成implicit，把上面的（monkey省略掉）<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd8861c8386.png" alt="image7"></p>
<p>挂载一个函数，连续按住两次tab键，如果不准备挂载函数可以<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd886717f05.png" alt="image8"><br>这里类型的名称都可以省略了 即拉姆达表达式<br>哪个+&#x3D;是挂载事件处理器的</p>
<p>下面的例子，是如果窗体加载完成后检查是否是窗体，如果是就执行<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd886c67327.png" alt="image9"></p>
<p>数组<br>int[] myArray&#x3D;{1,2,3} 后面的大括号是数组的初始化器<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd88700a60d.png" alt="image10"></p>
<p>这种写方法的方式不推荐，因为这个方法里面包含了多个功能，尽量一个方法里面只包含一个功能</p>
<p>名称空间<br>类 三大成员 属性 方法 和事件<br>类成员<br>对象 对象也叫实例，是类经过“实例化“后得到的内存实体<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd8873efd4d.png" alt="image11"><br>string。Format 把各类数据格式化为字符串并输出</p>
<p>else会自动找离他最近的没有其他else匹配的陈进行匹配</p>
<p>标签语句<br>hello：Console.WriteLine(“Hello,World”); 这个就是一条标签语句</p>
<p>goto hello; 上面的加上这句话就成了死循环了<br>整形是不能赋予空值的，但是可以用可空类型<br>Nullable&lt;int&gt;x&#x3D;null; 或者 int？x&#x3D;null;</p>
<p>Int y&#x3D;x ?? 1; 意思是如果y为null值，赋予y 值1 注意最终返回的数据类型是？？两边数据容量较大的数据类型</p>
<p>常量 const int x&#x3D;100; 常量的x必须立刻赋值，错过了初始化赋值常量就没办法赋值了<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd887829c04.png" alt="image12"><img src="https://tu.sunning.fit/i/2022/07/12/62cd887c64a6b.png" alt="image13"></p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>/2022/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="腾讯云服务器使用"><a href="#腾讯云服务器使用" class="headerlink" title="腾讯云服务器使用"></a>腾讯云服务器使用</h1><p>直接选择宝塔面板安装，宝塔面板能省下很多的事情<br><img src="https://tu.sunning.fit/i/2022/04/26/62675ebe5e21c.png" alt="62550900bb85e"></p>
<p>在应用管理里面的应用管理，应用内软件信息登录后可以找到连接和用户名以及密码</p>
<p>记得把云服务器上面的防火墙加上一个端口</p>
<p>类型 自定义 tcp 端口8888 ip对所有ipv4 0.0.0.0&#x2F;0</p>
<h2 id="远程登陆"><a href="#远程登陆" class="headerlink" title="远程登陆"></a>远程登陆</h2><p>登陆的时候切换帐号发现没有无法用 su root 进行切换</p>
<p>因为root 还没有设置密码,执行sudo passwd输入密码即可</p>
<h2 id="arch本地连接"><a href="#arch本地连接" class="headerlink" title="arch本地连接"></a>arch本地连接</h2><p>用本地的arch连接linux 用ssh命令</p>
<p>ssh &lt;用户名（root）&gt;@&lt;公网ip地址&gt;</p>
<p>连接的时候如果出现报错Permission denied (publickey,gssapi-keyex,gssapi-with-mic)，说明密码没有被更改，更改腾讯云的密码</p>
<h2 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h2><p>（指令是在contos上面的）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y docker   <span class="comment">#安装docker</span></span><br><span class="line">systemctl start docker.service  <span class="comment">#开启docker服务</span></span><br><span class="line">docker version   <span class="comment">#查看安装结果</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service <span class="comment">#设置开机自启动</span></span><br><span class="line">vim /etc/docker/daemon.json <span class="comment">#更换docker镜像的仓库</span></span><br></pre></td></tr></table></figure>

<p>登陆阿里云，在阿里云搜索容器镜像加速，在镜像工具的镜像加速器编辑加速地址</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://eg34jc1i.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



<h1 id="宝塔使用"><a href="#宝塔使用" class="headerlink" title="宝塔使用"></a>宝塔使用</h1><p>如果忘了密码，下Linux工具箱，然后在右侧找到账户密码</p>
<h1 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h1><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><p>安装nvm,因为node.js推荐用nvm进行管理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S nvm</span><br></pre></td></tr></table></figure>

<p>安装好nvm之后将下面命令加入 shell 的启动文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /usr/share/nvm/init-nvm.sh  #执行这个shell命令</span><br></pre></td></tr></table></figure>

<p>安装最新的lts版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvm install --lts</span><br></pre></td></tr></table></figure>

<p>关于nvm的命令可以通过 获取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm --help</span><br></pre></td></tr></table></figure>

<blockquote>
<p>千万千万千万千万不要在安装完nvm之后再去执行一遍init,这样整个指向都乱了</p>
</blockquote>
<h2 id="添加到环境变量"><a href="#添加到环境变量" class="headerlink" title="添加到环境变量"></a>添加到环境变量</h2><p>发现虽然装好了node.js但是启动老是出现一些问题，关掉konsole就没有nvm命令了，cd到了nvm的安装路径（～&#x2F;.nvm）执行nvm.shell之后nvm能够找到，但是nvm管理不了node.js了，接着猜测可能是局部安装的问题，又去nvm node.js的安装目录使用nvm use –lts,后来在博客里面发现了解决方法</p>
<p>先安装完一个node版本再进行配置</p>
<p><a href="https://blog.csdn.net/wangguoyu1996/article/details/109615270">mac 找不到nvm命令解决方法_清风了了的博客-CSDN博客_找不到nvm</a></p>
<p>进入.nvm文件夹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.nvm</span><br></pre></td></tr></table></figure>

<p>看有没有.bash_profile文件,没有就创建然后写入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> .bash_profile  <span class="comment">#新建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加的代码如下</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure>

<p>执行文件就可以使用nvm命令了 source ~&#x2F;.bash_profile</p>
<p>我用的是omz，所以要吧配置添加到.zshrc文件里面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加配置</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; . <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span></span><br></pre></td></tr></table></figure>

<p>最后不要忘了执行 source ~&#x2F;.zshrc </p>
<p>这样总算可以正常使用node.js了</p>
<blockquote>
<p>查看系统的环境变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<p>多个环境变量之间通过’:’进行分隔</p>
<p>centos下，环境变量在家目录的profile里面配置</p>
</blockquote>
<h2 id="如何彻底删除nvm"><a href="#如何彻底删除nvm" class="headerlink" title="如何彻底删除nvm"></a>如何彻底删除nvm</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -Rns nvm</span><br><span class="line"><span class="built_in">rm</span> -rf ./nvm</span><br></pre></td></tr></table></figure>



<h1 id="兰空图床配置"><a href="#兰空图床配置" class="headerlink" title="兰空图床配置"></a>兰空图床配置</h1><blockquote>
<p><a href="https://docs.lsky.pro/docs/v2/#%E5%AE%89%E8%A3%85%E8%A6%81%E6%B1%82">Lsky Pro V 2.x | Lsky Pro</a></p>
</blockquote>
<h2 id="安装兰空图床"><a href="#安装兰空图床" class="headerlink" title="安装兰空图床"></a>安装兰空图床</h2><ol>
<li><p>按照要求的运行环境，数据库和php和nginx都需要安装，版本尽量新一点，参看空兰图床的配置要求</p>
</li>
<li><p>在宝塔界面网站（在网站那里添加）添加新的网站和端口号（或者公网ip：端口号）记得在宝塔和腾讯云放行端口号{这一步的作用是指定访问网站的连接}</p>
</li>
<li><p>宝塔界面新建的网站的文件位置删除所有的文件，把空兰图床的压缩包放进去，解压在网站所在的目录</p>
</li>
<li><p>站点伪静态设置</p>
<p>在站点修改——伪静态</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>站点执行目录设置为public（网站目录，运行目录设置为&#x2F;public）</p>
</li>
<li><p>之后打开网站：端口号，进入空蓝图床的安装界面，如果提示无法执行exec命令等等在宝塔php管理禁用函数把对应的函数关掉</p>
</li>
<li><p>Nginx和php的最大上传文件限制可以设置高一点500m，然后重载配置，再重启一下</p>
</li>
</ol>
<h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><ol>
<li><p>在兰空图床的设置界面，找到api接口，在后面添加 &#x2F;tokens </p>
</li>
<li><p>用post命令请求</p>
</li>
<li><p>自定义格式 选择 application&#x2F;json </p>
<p>输入</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;email:&quot;</span> <span class="string">&quot;我的邮箱&quot;</span>,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;我的密码&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会返回一串token数值</p>
<p>这一串token数值在前面加上 Bearer+一个空格+获取的数值就是token了</p>
</li>
<li><p>在server写上空兰图床的地址即可<br><img src="https://tu.sunning.fit/i/2022/04/26/6267a312be4f4.png" alt="image-20220426110034806-16509420446251"></p>
</li>
</ol>
<h2 id="一个github上面的图床工具"><a href="#一个github上面的图床工具" class="headerlink" title="一个github上面的图床工具"></a>一个github上面的图床工具</h2><p><a href="https://github.com/onblog/BlogHelper">https://github.com/onblog/BlogHelper</a></p>
<p>一键将本地文章中引用的本地图片上传到图床并替换为引用链接</p>
<p>配置环境要求</p>
<ul>
<li>node -v 17.7.1</li>
<li>npm -v 8.5.4</li>
</ul>
<p>之前尝试配置Hexo的时候装了node.js，执行指令</p>
<p>启动nvm</p>
<p>到插件的位置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/sun/文档/Downloads/BlogHelper-master/</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p>发现右下角出现一个托盘图标，可以使用插件了</p>
<h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><h2 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a>域名设置</h2><p>在腾讯云我的域名里添加dns解析，指向云服务器的地址</p>
<h2 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h2><p>在宝塔面板的网站，安装 <strong>Nginx</strong></p>
<p>按照下面的网站进行配置，使用nginx的配置</p>
<p>文件修改的位置<code>/www/server/nginx/conf/nginx.conf</code></p>
<p>推荐在宝塔面板里进行编辑，编辑很方便（在文件那里双击即可）</p>
<h2 id="配置ssl证书"><a href="#配置ssl证书" class="headerlink" title="配置ssl证书"></a>配置ssl证书</h2><p>阿里有免费证书</p>
<h2 id="网站安全设置"><a href="#网站安全设置" class="headerlink" title="网站安全设置"></a>网站安全设置</h2><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h1 id="Picgo配置"><a href="#Picgo配置" class="headerlink" title="Picgo配置"></a>Picgo配置</h1><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">PicGo</a></p>
<h2 id="Picgo插件"><a href="#Picgo插件" class="headerlink" title="Picgo插件"></a>Picgo插件</h2><p>lankong #空兰图床插件</p>
<p>compress #图片压缩</p>
<p>watermark #水印插件</p>
<h2 id="安装图形化界面"><a href="#安装图形化界面" class="headerlink" title="安装图形化界面"></a>安装图形化界面</h2><p>推荐选正式版，事少</p>
<p>下载appimage文件（就一个）执行即可</p>
<p>使用插件需要node.js环境，直接打开会提示没有这个环境，在omz里面打开（输入appimage的文件目录就能执行）</p>
<p><strong>插件安装</strong></p>
<p>直接搜索对应的插件名称即可安装</p>
<h2 id="安装picgo-core（typora自动上传用到）"><a href="#安装picgo-core（typora自动上传用到）" class="headerlink" title="安装picgo-core（typora自动上传用到）"></a>安装picgo-core（typora自动上传用到）</h2><p>在typora的图片自动上传选择自动安装picgo-core</p>
<p>我的安装位置在~&#x2F;.config&#x2F;Typora&#x2F;picgo&#x2F;linux</p>
<p>cd 到对应的目录</p>
<p><strong>.&#x2F;picgo命令</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./picgo install <span class="comment">#下载插件，插件以picgo-plugin-为前缀，搜索前缀后面的名字即可</span></span><br><span class="line">搜索的是lankong不是lskypro</span><br></pre></td></tr></table></figure>

<p>先把这个给扔到配置文件上面</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lankong&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lankong&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;smms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lankong&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;lskyProVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;V2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;strategyId&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ignoreCertErr&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;syncDelete&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-lankong&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-lskypro&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>再</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">./picgo set uploader #选择上传服务的方式</span><br></pre></td></tr></table></figure>

<p>选择好之后可以在typora打开对应的配置文件进行修改，我的配置如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lankong&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lankong&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;smms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lankong&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;lskyProVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;V2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上传的连接&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer+&quot;</span>空格<span class="string">&quot;+token&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;strategyId&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span> <span class="comment">//不知道就写null,不是不填就成了&quot;&quot;</span></span><br><span class="line">      <span class="attr">&quot;ignoreCertErr&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;syncDelete&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span> <span class="comment">//删除picgo上面的图片，图床上面的图片也会被同步删除</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-lankong&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="typora和picgo"><a href="#typora和picgo" class="headerlink" title="typora和picgo"></a>typora和picgo</h1><h2 id="图片自动上传，批量把图片上传然后替换成图床连接"><a href="#图片自动上传，批量把图片上传然后替换成图床连接" class="headerlink" title="图片自动上传，批量把图片上传然后替换成图床连接"></a>图片自动上传，批量把图片上传然后替换成图床连接</h2><p><img src="https://tu.sunning.fit/i/2022/04/26/6267a32007d51.png" alt="625509016f5a5"><br><img src="https://tu.sunning.fit/i/2022/04/26/6267a3235b213.png" alt="625508ffbecb2"></p>
<p>建议先存在本地，然后在tyora的视图，图像里上传所有的本地图片（自动替换成图床的链接）</p>
<p>用markdown编辑好之后直接用halo的后台小工具把md文件上传</p>
<h2 id="目录自动序号，侧栏自动序号，自动生成目录自动序号"><a href="#目录自动序号，侧栏自动序号，自动生成目录自动序号" class="headerlink" title="目录自动序号，侧栏自动序号，自动生成目录自动序号"></a>目录自动序号，侧栏自动序号，自动生成目录自动序号</h2><p>新建一个文件夹名称为base.user.css,放在typora的主题文件夹里面</p>
<h3 id="文章内容自动编号"><a href="#文章内容自动编号" class="headerlink" title="文章内容自动编号"></a>文章内容自动编号</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** initialize css counter */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;!<span class="selector-attr">[625508ffbecb2]</span>(%E5%<span class="number">8</span>D%<span class="number">9</span>A%E5%AE%A2%E6%<span class="number">90%</span>AD%E5%BB%BA<span class="selector-class">.assets</span>/<span class="number">625508</span>ffbecb2<span class="selector-class">.png</span>)</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h5</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** put counter result into headings */</span></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> <span class="comment">/** override the default style for focused headings */</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h3;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h6) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** override the default style for focused headings */</span></span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">border</span>: inherit;</span><br><span class="line">    <span class="attribute">border-radius</span>: inherit;</span><br><span class="line">    <span class="attribute">position</span>: inherit;</span><br><span class="line">    <span class="attribute">left</span>:initial;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">    <span class="attribute">top</span>:initial;</span><br><span class="line">    <span class="attribute">font-size</span>: inherit;</span><br><span class="line">    <span class="attribute">padding-left</span>: inherit;</span><br><span class="line">    <span class="attribute">padding-right</span>: inherit;</span><br><span class="line">    <span class="attribute">vertical-align</span>: inherit;</span><br><span class="line">    <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">    <span class="attribute">line-height</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TOC自动编号"><a href="#TOC自动编号" class="headerlink" title="TOC自动编号"></a>TOC自动编号</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* No link underlines in TOC */</span></span><br><span class="line"><span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2toc</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3toc</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h3</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">9rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4toc</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h4</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">85rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5toc</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h5</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">8rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6toc</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h6</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">6rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">75rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h2</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h3</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h3toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h3toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h3</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h4</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h3toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h4toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h4</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h5</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h3toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h4toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h5toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h5</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h6</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h3toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h4toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h5toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h6toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.md-toc-h6</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="侧边栏大纲自动编号："><a href="#侧边栏大纲自动编号：" class="headerlink" title="侧边栏大纲自动编号："></a>侧边栏大纲自动编号：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outline-h1</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.outline-h2</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.outline-h3</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.outline-h4</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.outline-h5</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.outline-h2</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.outline-h3</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h3;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.outline-h4</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.outline-h5</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.outline-h6</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h6) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>另外一种最大标题也带序号的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** initialize css counter */</span></span><br><span class="line"><span class="selector-id">#write</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h5</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** put counter result into headings */</span></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h1;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> <span class="comment">/** override the default style for focused headings */</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h3;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h6) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** override the default style for focused headings */</span></span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">border</span>: inherit;</span><br><span class="line">    <span class="attribute">border-radius</span>: inherit;</span><br><span class="line">    <span class="attribute">position</span>: inherit;</span><br><span class="line">    <span class="attribute">left</span>:initial;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">    <span class="attribute">top</span>:initial;</span><br><span class="line">    <span class="attribute">font-size</span>: inherit;</span><br><span class="line">    <span class="attribute">padding-left</span>: inherit;</span><br><span class="line">    <span class="attribute">padding-right</span>: inherit;</span><br><span class="line">    <span class="attribute">vertical-align</span>: inherit;</span><br><span class="line">    <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">    <span class="attribute">line-height</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************</span></span><br><span class="line"><span class="comment"> * Header Counters in TOC</span></span><br><span class="line"><span class="comment"> **************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* No link underlines in TOC */</span></span><br><span class="line"><span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-content</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h1toc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2toc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3toc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h3</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">9rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4toc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h4</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">85rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5toc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h5</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">8rem</span>;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6toc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h6</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">6rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">75rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h1toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h1</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h2toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h2</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h3</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h3toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h2toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h3toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h3</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h4</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h2toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h3toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h4toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h4</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h5</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h2toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h3toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h4toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h5toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h5</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h6</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6toc;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h2toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h3toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h4toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h5toc) <span class="string">&quot;. &quot;</span> <span class="built_in">counter</span>(h6toc) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md-toc-h6</span> <span class="selector-class">.md-toc-inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************</span></span><br><span class="line"><span class="comment"> * Header Counters in Content</span></span><br><span class="line"><span class="comment"> **************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** initialize css counter */</span></span><br><span class="line"><span class="selector-id">#write</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h5</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** put counter result into headings */</span></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h1;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> &#123; <span class="comment">/*override the default style for focused headings */</span></span><br><span class="line">    <span class="attribute">counter-increment</span>: h3;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-class">.md-heading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h6) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** override the default style for focused headings */</span></span><br><span class="line"><span class="selector-id">#write</span>&gt;<span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-id">#write</span>&gt;<span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-id">#write</span>&gt;<span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-id">#write</span>&gt;<span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h3</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h4</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h5</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">h6</span><span class="selector-class">.md-focus</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">border</span>: inherit;</span><br><span class="line">    <span class="attribute">border-radius</span>: inherit;</span><br><span class="line">    <span class="attribute">position</span>: inherit;</span><br><span class="line">    <span class="attribute">left</span>: initial;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">    <span class="attribute">top</span>: initial;</span><br><span class="line">    <span class="attribute">font-size</span>: inherit;</span><br><span class="line">    <span class="attribute">padding-left</span>: inherit;</span><br><span class="line">    <span class="attribute">padding-right</span>: inherit;</span><br><span class="line">    <span class="attribute">vertical-align</span>: inherit;</span><br><span class="line">    <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">    <span class="attribute">line-height</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar-content</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h1</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h2</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h3</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h4</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h5</span> &#123;</span><br><span class="line">    <span class="attribute">counter-reset</span>: h6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h1</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h1;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h2</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h2;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h3</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h3;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h4</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h4;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h5</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h5;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outline-h6</span>&gt;<span class="selector-class">.outline-item</span>&gt;<span class="selector-class">.outline-label</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">counter-increment</span>: h6;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h6) <span class="string">&quot;. &quot;</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="改代码显示效果"><a href="#改代码显示效果" class="headerlink" title="改代码显示效果"></a>改代码显示效果</h2><p><a href="https://codemirror.net/5/demo/theme.html#3024-day">https://codemirror.net/5/demo/theme.html#3024-day</a> 在这里看合适的代码显示样式</p>
<p>在<a href="https://github.com/codemirror/codemirror5/tree/master/theme">https://github.com/codemirror/codemirror5/tree/master/theme</a> 拿到具体的css</p>
<p>在typora的根目录的base.user.css里面把代码粘进去</p>
<p>最后替换指定内容，<strong>dracula</strong>为例，这里为其代码中所有的<code>.cm-s-dracula</code>改为<code>.cm-s-inner</code></p>
<h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>主题可以自己在文件夹里面修改，挺简单的</p>
<h1 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h1><p>直接在宝塔面板点击安装就行</p>
<p>端口号可以在宝塔里面看见</p>
<p>默认的用户账户是root密码自己设置</p>
<h1 id="nextcloud安装"><a href="#nextcloud安装" class="headerlink" title="nextcloud安装"></a>nextcloud安装</h1><p>如果想要一个ip指向多个域名可以在宝塔面板里面随便设置域名，然后在网站的设置里面更改指向的ip地址</p>
<h2 id="nextcloud安装-1"><a href="#nextcloud安装-1" class="headerlink" title="nextcloud安装"></a>nextcloud安装</h2><p><a href="https://nextcloud.com/install/#">https://nextcloud.com/install/#</a> </p>
<p>在官网获得服务器下载地址</p>
<p>把服务器文件下载到网站对应文件夹，解压到网站的根目录</p>
<p>打开连接，进行配置即可</p>
<p><a href="https://dsx2016.com/?p=1716">https://dsx2016.com/?p=1716</a></p>
<h2 id="bug排除"><a href="#bug排除" class="headerlink" title="bug排除"></a>bug排除</h2><h3 id="nextcloud应用界面空白"><a href="#nextcloud应用界面空白" class="headerlink" title="nextcloud应用界面空白"></a>nextcloud应用界面空白</h3><p><a href="https://www.orcy.net.cn/1129.html">https://www.orcy.net.cn/1129.html</a></p>
<p>更改镜像源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;appstoreenabled&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;appstoreurl&#x27;</span> =&gt; <span class="string">&#x27;https://www.orcy.net/ncapps/v1/&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p>完整配置文件事例</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267a33c66f06.png" alt="625d8d4de7220"></p>
<h1 id="Halo搭建"><a href="#Halo搭建" class="headerlink" title="Halo搭建"></a>Halo搭建</h1><p>因为可能在不同的电脑上面写博客，没有后端的不是特别方便，选择halo</p>
<blockquote>
<p> Halo官方文档 <a href="https://docs.halo.run/">Halo Documents</a></p>
</blockquote>
<h2 id="halo部署"><a href="#halo部署" class="headerlink" title="halo部署"></a>halo部署</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">mkdir ~<span class="regexp">/.halo &amp;&amp; cd ~/</span>.<span class="property">halo</span>  #创建工作目录</span><br><span class="line">wget <span class="attr">https</span>:<span class="comment">//dl.halo.run/config/application-template.yaml -O ./application.yaml</span></span><br><span class="line">#下载配置文件到工作目录</span><br><span class="line">vim application.<span class="property">yaml</span> #编辑配置文件</span><br></pre></td></tr></table></figure>

<p>配置文件参考配置</p>
<p>拉取镜像</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">docker pull halohub/<span class="attr">halo</span>:<span class="number">1.4</span><span class="number">.12</span> </span><br></pre></td></tr></table></figure>

<p>创建容器</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name halo -p <span class="number">8090</span>:<span class="number">8090</span> -v ~<span class="regexp">/.halo:/</span>root/.<span class="property">halo</span> --restart=unless-stopped halohub/<span class="attr">halo</span>:<span class="number">1.4</span><span class="number">.12</span></span><br></pre></td></tr></table></figure>

<ul>
<li>it： 开启输入功能并连接伪终端<br>-d： 后台运行容器<br>–name： 为容器指定一个名称<br>-p： 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。<br>-v： 工作目录映射。形式为：-v 宿主机路径:&#x2F;root&#x2F;.halo，后者不能修改。<br>–restart： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器。</li>
</ul>
<h2 id="H2数据库与MySql比较"><a href="#H2数据库与MySql比较" class="headerlink" title="H2数据库与MySql比较"></a>H2数据库与MySql比较</h2><blockquote>
<p>使用 H2 的优劣：<br>优点：<br>能更快的完成 Halo 的搭建。<br>无需单独安装 H2，数据库随着 Halo 的启动而创建。<br>比 MySQL 更节省资源占用，尤其是你的服务器配置不佳的情况下。<br>性能方面与 MySQL 基本无异（对于这种小型应用），实测 1000 篇文章的情况下，毫无压力。<br>不会因为某个配置不对而导致 Halo 无法正常使用，没有乱七八糟的问题。<br>更符合 Halo 数据架构的特点，所有数据（数据库物理文件，主题文件，上传的附件，日志等）均放在 ~&#x2F;.halo 文件夹内，所以备份迁移极其方便。<br>如上所述，目前所有备份相关的功能均针对 H2。MySQL 的备份暂无计划。</p>
<p>缺点：<br>管理不方便，虽然有在线的控制台，但是并不好用。</p>
</blockquote>
<blockquote>
<p> 使用 MySQL 的优劣：<br> 优点：<br> 管理方便，你可以开启远程连接，在自己电脑即可管理数据库。不过目前halo已经做了一些 开发者功能，似乎也没必要怎么管理。</p>
<p> 缺点（仅针对于 Halo）：<br> 部署麻烦，还需要单独跑一个 MySQL，不能做到 Halo 开箱即用。<br> 占用内存，尤其是你服务器内存不够的情况下，宛如雪上加霜。当然，服务器强壮的话可无视。<br> 版本太多，当你安装了一个 Halo 不支持的版本（目前支持 5.7+）的时候，可能会无法正常使用，甚至无法正常启动。<br> 配置繁琐，你可能需要配置如字符集这样的东西，对新手来说极不友好。（字符集 utf8mb4 collate utf8mb4_bin）<br> 备份迁移麻烦，你不但需要备份 ~&#x2F;.halo，还需要导出数据库脚本。<br> 目前暂不支持后台备份 MySQL 数据。（重要）</p>
</blockquote>
<h2 id="Halo使用"><a href="#Halo使用" class="headerlink" title="Halo使用"></a>Halo使用</h2><ul>
<li><strong>登陆方式</strong></li>
</ul>
<p><a href="http://ip:8090/">http://ip:8090/</a></p>
<p><a href="http://ip:8090/admin">http://ip:8090/admin</a>   管理员后端</p>
<p>ip 是服务器的公网ip</p>
<p>8090是部署时默认端口</p>
<ul>
<li><strong>皮肤更改</strong></li>
</ul>
<p><a href="https://halo.run/themes.html">主题仓库 | Halo</a></p>
<h1 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>初始化博客</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init 名字</span><br></pre></td></tr></table></figure>

<p>会创建一个同名的文件夹，然后在文件甲的里面的<code>/source/_posts/</code>里的md就是博客的内容了</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>查看版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>清除缓存，若是网页正常状况下可以忽略这条命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>生成静态文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo -g</span><br></pre></td></tr></table></figure>

<p>本地启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>



<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
<h2 id="Front-matter（预定义参数）"><a href="#Front-matter（预定义参数）" class="headerlink" title="Front-matter（预定义参数）"></a>Front-matter（预定义参数）</h2><table>
<thead>
<tr>
<th><code>layout</code></th>
<th>布局</th>
<th><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></th>
</tr>
</thead>
<tbody><tr>
<td><code>title</code></td>
<td>标题</td>
<td>文章的文件名</td>
</tr>
<tr>
<td><code>date</code></td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td><code>updated</code></td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td><code>comments</code></td>
<td>开启文章的评论功能</td>
<td>true</td>
</tr>
<tr>
<td><code>tags</code></td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>categories</code></td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>覆盖文章网址</td>
<td></td>
</tr>
<tr>
<td><code>excerpt</code></td>
<td>Page excerpt in plain text. Use <a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">this plugin</a> to format the text</td>
<td></td>
</tr>
<tr>
<td><code>disableNunjucks</code></td>
<td>Disable rendering of Nunjucks tag <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> and <a href="https://hexo.io/docs/tag-plugins">tag plugins</a> when enabled</td>
<td></td>
</tr>
<tr>
<td><code>lang</code></td>
<td>Set the language to override <a href="https://hexo.io/docs/internationalization#Path">auto-detection</a></td>
<td>Inherited from <code>_config.yml</code></td>
</tr>
</tbody></table>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>记得文件具体的目录是要自己写的</p>
<p>自动由目录和文件夹层级生成多级目录，tag标签，初次使用时间，最后修改时间</p>
<p>注意多级标题和多个标签是变成一个数组的形式</p>
<blockquote>
<p>注意这个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取categories，copyOfRange中的7是对于本机目录而言的</span><br><span class="line">String[] tmpMyC = file.getAbsolutePath().split(&quot;/&quot;);</span><br><span class="line">String[] myC = Arrays.copyOfRange(tmpMyC, 8, tmpMyC.length);</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.attribute.BasicFileAttributes;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.attribute.FileTime;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*作用：</span></span><br><span class="line"><span class="comment"> *   自动按照文件名生成标题</span></span><br><span class="line"><span class="comment"> *   如果日期不存在自动生成，日期存在使用原来日期</span></span><br><span class="line"><span class="comment"> *   消除标题前的空行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*实现：</span></span><br><span class="line"><span class="comment"> *   先一行一行读取文件</span></span><br><span class="line"><span class="comment"> *   记录日期和在 #之前的所有行</span></span><br><span class="line"><span class="comment"> *   删除前面的所有行</span></span><br><span class="line"><span class="comment"> *   重新写入所有行，日期用读取到的*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeFile</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> isFirst=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getAllFileName</span><span class="params">(String path, ArrayList&lt;String&gt; fileName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        String[] names = file.list();</span><br><span class="line">        <span class="comment">/*if(names != null)&#123;</span></span><br><span class="line"><span class="comment">            for (String name:names)&#123;</span></span><br><span class="line"><span class="comment">                int length=name.length();</span></span><br><span class="line"><span class="comment">                if(length&gt;=3)&#123;</span></span><br><span class="line"><span class="comment">                    String str=name.substring(length-3,length);</span></span><br><span class="line"><span class="comment">                    if (str.equals(&quot;.md&quot;))&#123;</span></span><br><span class="line"><span class="comment">                        System.out.println(name);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">//                    System.out.println(str);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">//            fileName.addAll(Arrays.asList(names));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File tmp : files) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">tmpString</span> <span class="operator">=</span> tmp.getName();</span><br><span class="line">                <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> tmpString.length();</span><br><span class="line">                <span class="keyword">if</span> (length &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> tmpString.substring(length - <span class="number">3</span>, length);</span><br><span class="line">                    <span class="keyword">if</span> (str.equals(<span class="string">&quot;.md&quot;</span>)) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">thisFileName</span> <span class="operator">=</span> tmpString.substring(<span class="number">0</span>, length - <span class="number">3</span>);</span><br><span class="line"><span class="comment">//                        System.out.println(thisFileName);</span></span><br><span class="line">                       <span class="comment">/* String myStr=file.getName();</span></span><br><span class="line"><span class="comment">                        System.out.println(myStr);*/</span></span><br><span class="line"><span class="comment">//                        System.out.println(file.getAbsolutePath());</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//获取categories，copyOfRange中的7是对于本机目录而言的</span></span><br><span class="line">                        String[] tmpMyC = file.getAbsolutePath().split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                        String[] myC = Arrays.copyOfRange(tmpMyC, <span class="number">8</span>, tmpMyC.length);</span><br><span class="line"><span class="comment">//                        System.out.println(Arrays.toString(myC));</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//获取文件最后修改的时间</span></span><br><span class="line">                        <span class="type">BasicFileAttributes</span> <span class="variable">attrs</span> <span class="operator">=</span> Files.readAttributes(tmp.toPath(), BasicFileAttributes.class);</span><br><span class="line">                        <span class="type">FileTime</span> <span class="variable">time</span> <span class="operator">=</span> attrs.creationTime();</span><br><span class="line">                        String myTime=time.toString().substring(<span class="number">0</span>,<span class="number">10</span>)+<span class="string">&quot; &quot;</span>+time.toString().substring(<span class="number">11</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//先读取原来的文件的信息</span></span><br><span class="line">                        String myDate=<span class="string">&quot;&quot;</span>; <span class="comment">//代表原来文件的日期</span></span><br><span class="line">                        <span class="type">int</span> line=<span class="number">0</span>;  <span class="comment">//代表原来的文件对应hexo于第几行结束</span></span><br><span class="line"></span><br><span class="line">                        String[] tmpp;</span><br><span class="line">                        tmpp=fwDataRead(tmp);</span><br><span class="line">                        myDate=tmpp[<span class="number">0</span>];</span><br><span class="line">                        line= Integer.parseInt(tmpp[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">                        myDate=myDate.equals(<span class="string">&quot;&quot;</span>)?myTime:myDate; <span class="comment">//这里是读取并且存的之前的日期</span></span><br><span class="line"></span><br><span class="line">                        String tagTmp=Arrays.toString(myC);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//变成hexo识别的标准格式</span></span><br><span class="line">                        <span class="comment">//注意注意注意 : 左边右边都要空格  -这里也要有空格</span></span><br><span class="line">                        <span class="keyword">if</span> (myC.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                            value = String.format(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                    ---</span></span><br><span class="line"><span class="string">                                    title : %s</span></span><br><span class="line"><span class="string">                                    categories :</span></span><br><span class="line"><span class="string">                                    - %s</span></span><br><span class="line"><span class="string">                                    date : %s</span></span><br><span class="line"><span class="string">                                    updated : %s</span></span><br><span class="line"><span class="string">                                    tags : %s</span></span><br><span class="line"><span class="string">                                    ---</span></span><br><span class="line"><span class="string">                                    &quot;&quot;&quot;</span>, thisFileName,tagTmp,myDate,myTime,tagTmp);</span><br><span class="line"><span class="comment">//                            readAndRemoveFirstLines(tmp,6);</span></span><br><span class="line">                        &#125;<span class="comment">/*else if(myC.length==2)&#123;</span></span><br><span class="line"><span class="comment">                            value = String.format(&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">                                    ---</span></span><br><span class="line"><span class="comment">                                    title : %s</span></span><br><span class="line"><span class="comment">                                    categories :</span></span><br><span class="line"><span class="comment">                                    - %s</span></span><br><span class="line"><span class="comment">                                    --- %s</span></span><br><span class="line"><span class="comment">                                    date : %s</span></span><br><span class="line"><span class="comment">                                    updated : %s</span></span><br><span class="line"><span class="comment">                                    tags : %s</span></span><br><span class="line"><span class="comment">                                    ---</span></span><br><span class="line"><span class="comment">                                    &quot;&quot;&quot;,thisFileName,myC[0],myC[1],myDate,myTime,tagTmp);</span></span><br><span class="line"><span class="comment">//                            readAndRemoveFirstLines(tmp,7);</span></span><br><span class="line"><span class="comment">                        &#125;else if(myC.length==3)&#123;</span></span><br><span class="line"><span class="comment">                            value = String.format(&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">                                    ---</span></span><br><span class="line"><span class="comment">                                    title : %s</span></span><br><span class="line"><span class="comment">                                    categories :</span></span><br><span class="line"><span class="comment">                                    - %s</span></span><br><span class="line"><span class="comment">                                    --- %s</span></span><br><span class="line"><span class="comment">                                    ----- %s</span></span><br><span class="line"><span class="comment">                                    date : %s</span></span><br><span class="line"><span class="comment">                                    updated : %s</span></span><br><span class="line"><span class="comment">                                    tags : %s</span></span><br><span class="line"><span class="comment">                                    ---</span></span><br><span class="line"><span class="comment">                                    &quot;&quot;&quot;, thisFileName,myC[0],myC[1],myC[2],myDate,myTime,tagTmp);</span></span><br><span class="line"><span class="comment">//                            readAndRemoveFirstLines(tmp,8);</span></span><br><span class="line"><span class="comment">                        &#125;else if(myC.length==4)&#123;</span></span><br><span class="line"><span class="comment">                            value = String.format(&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">                                    ---</span></span><br><span class="line"><span class="comment">                                    title : %s</span></span><br><span class="line"><span class="comment">                                    categories :</span></span><br><span class="line"><span class="comment">                                    - %s</span></span><br><span class="line"><span class="comment">                                    --- %s</span></span><br><span class="line"><span class="comment">                                    ----- %s</span></span><br><span class="line"><span class="comment">                                    ------- %s</span></span><br><span class="line"><span class="comment">                                    date : %s</span></span><br><span class="line"><span class="comment">                                    updated : %s</span></span><br><span class="line"><span class="comment">                                    tags : %s</span></span><br><span class="line"><span class="comment">                                    ---</span></span><br><span class="line"><span class="comment">                                    &quot;&quot;&quot;, thisFileName,myC[0],myC[1],myC[2],myC[3],myDate,myTime,tagTmp);</span></span><br><span class="line"><span class="comment">                        &#125;else if(myC.length==5)&#123;</span></span><br><span class="line"><span class="comment">                            value = String.format(&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">                                    ---</span></span><br><span class="line"><span class="comment">                                    title : %s</span></span><br><span class="line"><span class="comment">                                    categories :</span></span><br><span class="line"><span class="comment">                                    - %s</span></span><br><span class="line"><span class="comment">                                    --- %s</span></span><br><span class="line"><span class="comment">                                    ----- %s</span></span><br><span class="line"><span class="comment">                                    ------- %s</span></span><br><span class="line"><span class="comment">                                    --------- %s</span></span><br><span class="line"><span class="comment">                                    date : %s</span></span><br><span class="line"><span class="comment">                                    updated : %s</span></span><br><span class="line"><span class="comment">                                    tags : %s</span></span><br><span class="line"><span class="comment">                                    ---</span></span><br><span class="line"><span class="comment">                                    &quot;&quot;&quot;, thisFileName,myC[0],myC[1],myC[2],myC[3],myC[4],myDate,myTime,tagTmp);</span></span><br><span class="line"><span class="comment">                        &#125;*/</span></span><br><span class="line"><span class="comment">//                        System.out.println(value);</span></span><br><span class="line"><span class="comment">//                        System.out.println(myTime);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                        System.out.println(tmp.getAbsolutePath());</span></span><br><span class="line">                        readAndRemoveFirstLines(tmp,line);</span><br><span class="line">                        write(value,tmp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (File tempList : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tempList.isDirectory()) &#123;</span><br><span class="line">                getAllFileName(tempList.getAbsolutePath(), fileName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ArrayList&lt;String&gt; listFileName = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        getAllFileName(<span class="string">&quot;/home/sun/桌面/Share/blog/source/_posts/&quot;</span>, listFileName);</span><br><span class="line">        <span class="keyword">for</span> (String name : listFileName) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把内容添加到文件里面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">write</span><span class="params">(String content, File f)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 2.读取Java文件，然后在第一行加上package信息</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">tmp</span> <span class="operator">=</span> File.createTempFile(<span class="string">&quot;tmp&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">tmpOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(tmp);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">tmpIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(tmp);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(f, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">hasRead</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((hasRead = raf.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 把原有内容读入临时文件</span></span><br><span class="line">                tmpOut.write(buf, <span class="number">0</span>, hasRead);</span><br><span class="line">            &#125;</span><br><span class="line">            raf.seek(<span class="number">0L</span>);</span><br><span class="line">            raf.write(content.getBytes());</span><br><span class="line">            <span class="comment">// 追加临时文件内容</span></span><br><span class="line">            <span class="keyword">while</span> ((hasRead = tmpIn.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                raf.write(buf, <span class="number">0</span>, hasRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;写入失败！&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                raf.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;写入失败，关闭流失败！&quot;</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除文件前面几行数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">readAndRemoveFirstLines</span><span class="params">(File file, <span class="type">int</span> lineNum)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            raf = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="comment">//Initial write position</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">writePosition</span> <span class="operator">=</span> raf.getFilePointer();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; lineNum ; i++)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> raf.readLine();</span><br><span class="line">                <span class="keyword">if</span>(line == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                strList.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Shift the next lines upwards.</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">readPosition</span> <span class="operator">=</span> raf.getFilePointer();</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != (n = raf.read(buff))) &#123;</span><br><span class="line">                raf.seek(writePosition);</span><br><span class="line">                raf.write(buff, <span class="number">0</span>, n);</span><br><span class="line">                readPosition += n;</span><br><span class="line">                writePosition += n;</span><br><span class="line">                raf.seek(readPosition);</span><br><span class="line">            &#125;</span><br><span class="line">            raf.setLength(writePosition);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(raf != <span class="literal">null</span>)&#123;</span><br><span class="line">                    raf.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> strList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取文件前几行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] fwDataRead(File file) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*FileReader fileReader = new FileReader(file.getAbsoluteFile());</span></span><br><span class="line"><span class="comment">        int i = 0;</span></span><br><span class="line"><span class="comment">        char[] buf = new char[1024];</span></span><br><span class="line"><span class="comment">        int num = 0;</span></span><br><span class="line"><span class="comment">        while ((num = fileReader.read(buf)) != -1  &amp;&amp; i&lt;1) &#123;</span></span><br><span class="line"><span class="comment">            i++;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;FileReader 方式二 读取第&quot; + i + &quot;条&quot; + new String(buf, 0, num));</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*while (i&lt;10) &#123;</span></span><br><span class="line"><span class="comment">            i++;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;FileReader 方式二 读取第&quot; + i + &quot;条&quot; + new String(buf, 0, num));</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"><span class="comment">//        fileReader.close();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> tmpLine=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(file.getAbsoluteFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;Read text file using Scanner&quot;</span>);</span><br><span class="line">        <span class="comment">// 一行一行地读取</span></span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            <span class="comment">//process each line</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextL();</span><br><span class="line">            <span class="keyword">if</span>(!line.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span> (line.charAt(<span class="number">0</span>) == <span class="string">&#x27;#&#x27;</span>)&#123;  <span class="comment">//当读到有空的行的时候就可以停止了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tmpLine++;</span><br><span class="line">            <span class="keyword">if</span>(line.length()&gt;<span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(line.substring(<span class="number">0</span>,<span class="number">7</span>).equals(<span class="string">&quot;date : &quot;</span>))&#123;</span><br><span class="line">                    tmp=line.substring(<span class="number">7</span>);   <span class="comment">//读取到原来的日期</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;tmp, String.valueOf(tmpLine)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后再在写一个自动配置的函数 <code>vim ~/.zshrc</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">hexo_push</span></span>() &#123;</span><br><span class="line">        <span class="built_in">cd</span> /home/sun/IdeaProjects/Hexo/out/production/Hexo/</span><br><span class="line">        /usr/lib/jvm/java-18-openjdk/bin/java ChangeFile</span><br><span class="line">        <span class="built_in">cd</span> /home/sun/桌面/Share/blog/</span><br><span class="line">        hexo clean</span><br><span class="line">        hexo g</span><br><span class="line">        hexo d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写完用<code>source ~/.zshrc </code> 重载配置</p>
<p>之后就可以通过<code>hexo_push</code>来方便推送博客了</p>
<h2 id="主题更改"><a href="#主题更改" class="headerlink" title="主题更改"></a>主题更改</h2><p>根目录里的themes文件夹里面的_config.yml是主题配置文件</p>
<h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><p>根目录里的_config.yml文件称为站点配置文件</p>
<p>这就是给hexo d这个命令做相应的配置，让hexo知道要把网站部署在哪个位置</p>
<h3 id="创建仓库所有者xxx"><a href="#创建仓库所有者xxx" class="headerlink" title="创建仓库所有者xxx:"></a>创建仓库所有者xxx:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">adduser xxx</span><br><span class="line"><span class="built_in">chmod</span> 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment"># 按 i 键进入文件的编辑模式，按向下键找到如下字段</span></span><br><span class="line">	root    ALL=(ALL)       ALL</span><br><span class="line"><span class="comment"># 在其后面增加一句：</span></span><br><span class="line">	xxx     ALL=(ALL)       ALL</span><br><span class="line"><span class="comment"># 退回权限 为了安全</span></span><br><span class="line"><span class="built_in">chmod</span> 400 /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>也可以不创建用root登录，只是不怎么安全</p>
<h3 id="服务器创建git仓库："><a href="#服务器创建git仓库：" class="headerlink" title="服务器创建git仓库："></a>服务器创建git仓库：</h3><p>新建目录，这是git仓库的位置，用来放自己的代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /home/giter/repos</span><br></pre></td></tr></table></figure>

<p>在这个仓库目录下面创建一个xxxblog的裸仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/giter/repos</span><br><span class="line">sudo git init --bare xxxblog.git</span><br></pre></td></tr></table></figure>

<p>在这个路径下仓库的hooks文件夹里面创建一个post-update文件，并输入脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/www/wwwroot/sunning.fit/ --git-dir=/home/giter/repos/xxxblog.git/ checkout -f</span><br></pre></td></tr></table></figure>

<p>给予可执行权限：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x post-update</span><br></pre></td></tr></table></figure>

<p>更改仓库所有者和站点文件夹所有者：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R xxx /home/git/repos/  <span class="comment">#仓库的所有者变成xxx</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">chown</span> -R xxx /www/wwwroot/sunning.fit/  <span class="comment">#网站文件夹的所有者变成xxx</span></span><br></pre></td></tr></table></figure>

<p>测试这个仓库能不能用：</p>
<p>找个空文件夹把仓库拉下来</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> xxx@服务器的ip:/home/giter/repos/xxxblog.git</span><br></pre></td></tr></table></figure>







<blockquote>
<p><strong>git裸仓库：</strong></p>
<p>使用<code>git init</code>创建的仓库被称为普通库，使用<code>git init --bare</code>创建的库被称为裸库。</p>
<p>普通库不仅包含了版本控制信息，还含了项目所有的源文件，而裸库只包含了版本控制信息。</p>
<p><strong>区别：</strong></p>
<ul>
<li>裸库</li>
</ul>
<p>由版本控制文件组成，不能直接操作，可以在远端直接推送，通常用于多人协作，版本库放在远端服务器。</p>
<ul>
<li>普通库</li>
</ul>
<p>由源代码+裸库组成，可以直接操作，但是不能在远端直接推送代码到当前分支，通常用于本地版本控制 </p>
</blockquote>
<h3 id="免密登录："><a href="#免密登录：" class="headerlink" title="免密登录："></a>免密登录：</h3><p>宝塔和腾讯云同时开的话可能会有问题，所以使用空密码并且不允许root登录这种曲线救国的方式</p>
<p>把xxx的密码变成空：</p>
<h3 id="github配置："><a href="#github配置：" class="headerlink" title="github配置："></a>github配置：</h3><p>创建个人仓库名字必须是<code>用户名.github.io</code></p>
<p>用本机的公钥，配置免密登录</p>
<p>然后在配置文件里面更改deploy：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:sunwenxiang133/sunwenxiang133.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>





<h3 id="问题排除："><a href="#问题排除：" class="headerlink" title="问题排除："></a>问题排除：</h3><p>有时候死活推不上去，把根目录生成的.deploy_git给删了然后从新推送，</p>
<p>如果用sudo创建的hexo g 那hexo clean的时候也要用sudo</p>
<p>把博客推送到github上面连接用ssh,用https的连接还是要输密码</p>
<h3 id="同时推送到github和自己的服务器"><a href="#同时推送到github和自己的服务器" class="headerlink" title="同时推送到github和自己的服务器:"></a>同时推送到github和自己的服务器:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repository:</span><br><span class="line">        github: git@github.com:sunwenxiang133/sunwenxiang133.github.io.git,master</span><br><span class="line">        hexo: giter@162.14.78.140:/home/giter/repos/sunblog.git,master</span><br></pre></td></tr></table></figure>

<p><strong>巨大坑：</strong></p>
<p>神奇的权限问题：</p>
<p>github推送的时候用只能用hexo d不能用sudo ，否则显示atal: 无法读取远程仓库。请确认您有正确的访问权限并且仓库存在，</p>
<p>而推送到自己的服务器的时候又必须加上sudo,否则也会请确认您有正确的访问权限并且仓库存在。</p>
<p><strong>原因：</strong></p>
<p>用sudo 的时候会到<code>/root/.ssh</code>去找密钥</p>
<p><strong>解决：</strong></p>
<p>在<code>/home/sun/.ssh/</code>里面的<code>konwn_hosts</code>文件把原来的记录删除，然后从新连接即可</p>
<h3 id="配置好了日常的使用命令："><a href="#配置好了日常的使用命令：" class="headerlink" title="配置好了日常的使用命令："></a>配置好了日常的使用命令：</h3><p>先执行java脚本，然后在对应的目录下面：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/sun/文档/doc/</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">sudo hexo d</span><br></pre></td></tr></table></figure>





<h1 id="随机图片"><a href="#随机图片" class="headerlink" title="随机图片"></a>随机图片</h1><p><strong>当前页面使用同一个api链接的文章, 图片显示的都是同一张!(说好的随机呢?)</strong></p>
<p>问题就出现在, 发起请求时, 由于链接地址是同一个, 实际上即使同一个页面中有多个(相同)图片链接, 也仅仅发起一次请求, 所以也就返回一张图片了</p>
<p>所以只要修改链接不同即可</p>
<p>例子: <a href="https://img.paulzzh.tech/touhou/random">https://img.paulzzh.tech/touhou/random</a></p>
<p>可以在末尾添加<code>?x</code>, 其中x是一个数字, 如: <a href="https://img.paulzzh.tech/touhou/random?233">https://img.paulzzh.tech/touhou/random?233</a></p>
<p>这样就变成两个完全不同的请求了</p>
<blockquote>
<p>有时候点击验证码变成另一个图片也是通过这样的原理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;code.jsp&quot;</span> alt=<span class="string">&quot;验证码&quot;</span> οnclick=<span class="string">&quot;this.src=&#x27;code.jsp?d=&#x27;+Math.random();&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>通过添加onclick属性, 并通过js在末尾增加一个随机值, 即可切换请求</p>
</blockquote>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2022/07/21/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><p>必须重写run方法：是新线程的入口点</p>
<p>必须调用start方法才能执行</p>
<h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Thread t;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">myThread</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            System.out.println(<span class="string">&#x27;name&#x27;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!t)&#123;</span><br><span class="line">            t=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>,name);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myThread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Thread t;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">myThread2</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&#x27;name&#x27;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!t)&#123;</span><br><span class="line">            t=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>,name);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>使用上面两个线程,实例化对象，执行start方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        myThread T1=<span class="keyword">new</span> <span class="title class_">myThread</span>(<span class="string">&#x27;T1&#x27;</span>);</span><br><span class="line">        T1.start();</span><br><span class="line">        myThread2 T2=<span class="keyword">new</span> <span class="title class_">myThread</span>(<span class="string">&#x27;T2&#x27;</span>);</span><br><span class="line">        T2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通过-Callable-和-Future-创建线程"><a href="#通过-Callable-和-Future-创建线程" class="headerlink" title="通过 Callable 和 Future 创建线程"></a>通过 Callable 和 Future 创建线程</h2><ul>
<li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值</li>
<li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li>
<li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li>
<li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CallableThreadTest</span> <span class="variable">cts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableThreadTest</span>();  <span class="comment">//实例化下面定义的实现了Callable接口的类</span></span><br><span class="line">        <span class="comment">// 接收</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(cts);  <span class="comment">//使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ft, <span class="string">&quot;有返回值的线程&quot;</span>).start();  <span class="comment">//把FutureTask对象作为Thread的target创建并启动新的线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            System.out.println( <span class="string">&quot;main&quot;</span> + <span class="string">&quot; 的循环变量i的值：&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CallableThreadTest</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123; <span class="comment">//创建实现了Callable接口的类</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  <span class="comment">//重写call方法，它需要一个return的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableThreadTest</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="type">CallableThreadTest</span> <span class="variable">ctt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableThreadTest</span>();  </span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(ctt);  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 的循环变量i的值&quot;</span>+i);  </span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">20</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(ft,<span class="string">&quot;有返回值的线程&quot;</span>).start();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">try</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;子线程的返回值：&quot;</span>+ft.get());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(;i&lt;<span class="number">100</span>;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> i;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>字段 属性 索引器 常量</title>
    <url>/2022/07/21/%E5%AD%97%E6%AE%B5%20%E5%B1%9E%E6%80%A7%20%E7%B4%A2%E5%BC%95%E5%99%A8%20%E5%B8%B8%E9%87%8F/</url>
    <content><![CDATA[<h1 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h1><p>类的变量<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd8593c6068.png" alt="image1"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd862c83727.png" alt="image2"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd864243a92.png" alt="image3"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd86389b6c2.png" alt="image4"><br>上面的两张图的作用都是在brush类中生成一个属于brush类的实例由color类的初始化器生成<br>这是分别的两个静态构造器</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd8646797aa.png" alt="image5"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd8652e9bb4.png" alt="image6"><img src="https://tu.sunning.fit/i/2022/07/12/62cd86594b208.png" alt="image7"><img src="https://tu.sunning.fit/i/2022/07/12/62cd865d55776.png" alt="image8"></p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>属性的存在是为了化简下图的步骤所存在的<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd86645b0d5.png" alt="image9"><br>get和set本身的出现就是为了改变这种情况<br>value处于这个上下文是特殊字符，表示变量<br>为了防止输入大小不正确的数值，用了方法来判断</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd86675d3c7.png" alt="image10"><img src="https://tu.sunning.fit/i/2022/07/12/62cd866ab61f6.png" alt="image11"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd866e74bb9.png" alt="image12"><br>下面到了属性更优越的部分，动态计算属性<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd8672440dd.png" alt="image13"></p>
<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p><img src="https://tu.sunning.fit/i/2022/07/12/62cd8675a73fc.png" alt="image14"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd86788c587.png" alt="image15"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd867d614cf.png" alt="image16"><img src="https://tu.sunning.fit/i/2022/07/12/62cd86d5086f6.png" alt="image17"></p>
<p>不能用类类型或自定义的结构体类型来作为常量，这种情况用静态只读字段</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>基本操作命令的使用</title>
    <url>/2022/07/21/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="基础了解"><a href="#基础了解" class="headerlink" title="基础了解"></a>基础了解</h1><p>&#x2F; 是根目录</p>
<p>~ 是家目录</p>
<p>tab能够自动补全</p>
<p>向前滚动一屏，向后滚动一屏 Ctrl+F（front）    Ctrl+B（behing）  </p>
<p>clear 能把之前显示的东西都清理掉 </p>
<p>Linux下没有消息一般是成功了，消息基本是失败的消息</p>
<p>隐藏文件是以 ‘.’开头的</p>
<p>不同的类型linux里面颜色不一样，文件，目录，压缩包，可执行文件等等颜色都是不同的</p>
<p>.&#x2F;  代表在当前目录找某个指令</p>
<p>环境变量，为了在任何一个地方都能找到某个文件，需要配置环境变量</p>
<h2 id="linux的后缀"><a href="#linux的后缀" class="headerlink" title="linux的后缀"></a>linux的后缀</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 一谈到文件类型，大家就能想到Windows的文件类型，比如file.txt、file.doc、file.sys、file.mp3、file.exe等，根据</span><br><span class="line">文件的后缀就能判断文件的类型。但在Linux一个文件是否能被执行，和后缀名没有太大的关系，主要看文件的属性有关。但我们了解一下Linux文件的后缀名还是有必要的，</span><br><span class="line">特别是我们自己创建一些文件，最好还是加后缀名，这样做的目的是仅仅是为了我们的在应用时方便。</span><br><span class="line"></span><br><span class="line">现在的Linux桌面环境和Windows一样智能化，文件的类型是和相应的程序关联的。在我们打开某个文件时，系统会自动判断用哪个应用程序打开。</span><br><span class="line">如果从这方面来说，Linux桌面环境和Windows桌面没有太大的区别。</span><br><span class="line"></span><br><span class="line">在Linux中，带有扩展名的文件，只能代表程序的关联，并不能说明文件是可以执行，从这方面来说，Linux的扩展名没有太大的意义。</span><br></pre></td></tr></table></figure>

<h2 id="注意文件目录的-x2F-问题"><a href="#注意文件目录的-x2F-问题" class="headerlink" title="注意文件目录的&#x2F;问题"></a>注意文件目录的&#x2F;问题</h2><ol>
<li>linux里一切皆文件</li>
<li>文件前面有&#x2F;代表绝对路径，没有则代表相对路径</li>
<li>文件的后面有&#x2F;代表这个目录，如果没有代表这个文件  cd sun&#x2F;  代表的是sun这个目录，没有意指这个文件</li>
</ol>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>如果没有指令路径的话，Javac是在这几个地方去找（环境变量里面）,所以在家目录里面是找不到javac的</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd3a5cb179b.png" alt="Untitled"></p>
<h1 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h1><p>在linux世界里，一切皆文件</p>
<p>层级式的树状目录结构，在此结构中的最上层是跟目录“&#x2F;” 然后在在目录下再创建其他的目录</p>
<p>linux的目录什么东西放在什么地方是规划好的，不是自己想怎么弄就怎么弄的（Windows也是这样的，只是厂家不按照这个规则放文件）</p>
<p>boot 用户启动的时候用到的核心文件</p>
<p>root root这个用户用到的文件</p>
<p>dev 设备管理器，会把所有的硬件映射成一个文件进行管理</p>
<h2 id="系统启动必须："><a href="#系统启动必须：" class="headerlink" title="系统启动必须："></a>系统启动必须：</h2><p><strong>&#x2F;boot：</strong>存放的启动Linux 时使用的内核文件，包括连接文件以及镜像文件。</p>
<p><strong>&#x2F;etc【常用】：</strong>存放<strong>所有</strong>的系统需要的<strong>配置文件</strong>和<strong>子目录列表，</strong>更改目录下的文件可能会导致系统不能启动。</p>
<p><strong>&#x2F;lib</strong>：存放基本代码库（比如c++库），其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p>
<p><strong>&#x2F;sys</strong>：【不能动】 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中</p>
<h2 id="指令集合："><a href="#指令集合：" class="headerlink" title="指令集合："></a>指令集合：</h2><p><strong>&#x2F;bin：</strong>存放着最常用的程序和指令</p>
<p><strong>&#x2F;sbin：</strong>只有系统管理员能使用的程序和指令。</p>
<h2 id="外部文件管理："><a href="#外部文件管理：" class="headerlink" title="外部文件管理："></a>外部文件管理：</h2><p><strong>&#x2F;dev ：</strong>Device(设备)的缩写, 存放的是Linux的外部设备。<strong>注意：</strong>在Linux中访问设备和访问文件的方式是相同的。</p>
<p><strong>&#x2F;media【常用】</strong>：类windows的<strong>其他设备，</strong>例如U盘、光驱等等，识别后linux会把设备放到这个目录下。</p>
<p><strong>&#x2F;mnt</strong>：临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。挂载，就是开机的时候能读其它盘的信息的那个，挂载在某个目录之下</p>
<h2 id="临时文件："><a href="#临时文件：" class="headerlink" title="临时文件："></a>临时文件：</h2><p><strong>&#x2F;run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p>
<p><strong>&#x2F;lost+found</strong>：一般情况下为空的，系统非法关机后，这里就存放一些文件。</p>
<p><strong>&#x2F;tmp</strong>：这个目录是用来存放一些临时文件的。</p>
<h2 id="账户："><a href="#账户：" class="headerlink" title="账户："></a>账户：</h2><p><strong>&#x2F;root【常用】</strong>：系统管理员的用户主目录。</p>
<p><strong>&#x2F;home【常用】</strong>：用户的主目录，以用户的账号命名的。</p>
<p><strong>&#x2F;usr【常用】</strong>：用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p>
<p><strong>&#x2F;usr&#x2F;bin【常用】：</strong>系统用户使用的应用程序与指令。</p>
<p><strong>&#x2F;usr&#x2F;sbin：</strong>超级用户使用的比较高级的管理程序和系统守护程序。</p>
<p><strong>&#x2F;usr&#x2F;src：</strong>内核源代码默认的放置目录。</p>
<p><strong>&#x2F;usr&#x2F;local:</strong> 另一个给主机额外安装软件所安装的目录，一般是通过编译源码方式安装的程序（安装好的放在这个目录里面）</p>
<h2 id="运行过程中要用："><a href="#运行过程中要用：" class="headerlink" title="运行过程中要用："></a>运行过程中要用：</h2><p><strong>&#x2F;var</strong>：存放经常修改的数据，比如程序运行的日志文件（&#x2F;var&#x2F;log 目录下）。</p>
<p><strong>&#x2F;proc</strong>：【不能动】管理<strong>内存空间！</strong>虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。    不能动，动了可能就开不了机了</p>
<h2 id="扩展用的："><a href="#扩展用的：" class="headerlink" title="扩展用的："></a>扩展用的：</h2><p><strong>&#x2F;opt</strong>：默认是空的，我们安装额外软件可以放在这个里面。如安装oracle数据库就可放到改目录下面</p>
<p><strong>&#x2F;srv</strong>：【不能动】存放服务启动后需要提取的数据<strong>（不用服务器就是空）</strong></p>
<p><a href="https://www.runoob.com/linux/linux-system-contents.html">Linux 系统目录结构</a></p>
<h1 id="windows下远程登陆linux服务器"><a href="#windows下远程登陆linux服务器" class="headerlink" title="windows下远程登陆linux服务器"></a>windows下远程登陆linux服务器</h1><h2 id="xshell"><a href="#xshell" class="headerlink" title="xshell"></a>xshell</h2><h3 id="无法用密码链接？"><a href="#无法用密码链接？" class="headerlink" title="无法用密码链接？"></a>无法用密码链接？</h3><p>sudo su  -  root 管理员权限</p>
<p>passwd root 改root用户的密码</p>
<p>修改文件 vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p>
<p>把   前面的注释取消</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication yes</span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>

<p>重启ssh服务   systemctl restart sshd.service     systemctl是初始化系统命令</p>
<h3 id="护眼"><a href="#护眼" class="headerlink" title="护眼"></a>护眼</h3><p>背景色调成灰色的</p>
<p>主题变为传统灰色</p>
<p>一个叫monokai的配色文件，用文本编辑器即可，后缀改为xcs</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">monokai</span>]</span><br><span class="line">text=<span class="function">ffffff</span></span><br><span class="line"><span class="function"><span class="title">cyan</span>(<span class="params">bold</span>)</span>=<span class="function">a6e22e</span></span><br><span class="line"><span class="function"><span class="title">text</span>(<span class="params">bold</span>)</span>=ffffff</span><br><span class="line">magenta=f92672</span><br><span class="line">green=<span class="number">80f</span><span class="function">f80</span></span><br><span class="line"><span class="function"><span class="title">green</span>(<span class="params">bold</span>)</span>=<span class="number">80f</span>f80</span><br><span class="line">background=<span class="number">272822</span></span><br><span class="line">cyan=<span class="function">a6e22e</span></span><br><span class="line"><span class="function"><span class="title">red</span>(<span class="params">bold</span>)</span>=de8e30</span><br><span class="line">yellow=<span class="number">66</span><span class="function">d9ef</span></span><br><span class="line"><span class="function"><span class="title">magenta</span>(<span class="params">bold</span>)</span>=<span class="function">f92672</span></span><br><span class="line"><span class="function"><span class="title">yellow</span>(<span class="params">bold</span>)</span>=<span class="number">66</span>d9ef</span><br><span class="line">red=de8e30</span><br><span class="line">white=<span class="function">c0c0c0</span></span><br><span class="line"><span class="function"><span class="title">blue</span>(<span class="params">bold</span>)</span>=<span class="function">ae81ff</span></span><br><span class="line"><span class="function"><span class="title">white</span>(<span class="params">bold</span>)</span>=ffffff</span><br><span class="line">black=<span class="number">000000</span></span><br><span class="line">blue=<span class="function">ae81ff</span></span><br><span class="line"><span class="function"><span class="title">black</span>(<span class="params">bold</span>)</span>=<span class="number">000000</span></span><br><span class="line">[<span class="meta">Names</span>]</span><br><span class="line">name0=monokai</span><br><span class="line">count=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="Xftp7"><a href="#Xftp7" class="headerlink" title="Xftp7"></a>Xftp7</h2><p>没啥</p>
<h1 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h1><p>shutdown -h -now   立刻进行关机</p>
<p>shutdown -h -1      “Hello，1分钟后会关机了”</p>
<p>shutdown -r now    现在重新启动计算机</p>
<p>halt                          关机，作用和上面一样</p>
<p>reboot                     现在重新启动计算机</p>
<p>sync                         把内存的数据同步到磁盘，虽然关机等指令会默认执行一下sync，但是小心<br>使得万年船，关机前手动执行一遍sync</p>
<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="用户登陆和注销"><a href="#用户登陆和注销" class="headerlink" title="用户登陆和注销"></a>用户登陆和注销</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li>登陆时尽量少用root账号登陆，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登陆，登录后再用“su-用户名”命令来切换成系统管理员身份</li>
<li>在提示符下输入logout即可注销用户</li>
</ol>
<h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ol>
<li>logout注销指令在图形运行界别无效，在运行级别3下有效（即在能看到桌面的这个情况下是无效的）</li>
</ol>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd3a82864ff.png" alt="Untitled"></p>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>useradd 用户名</p>
<p>pwd 显示当前用户所在的目录（这其实是显示绝对路径的指令）</p>
<h3 id="指定-x2F-修改密码"><a href="#指定-x2F-修改密码" class="headerlink" title="指定&#x2F;修改密码"></a>指定&#x2F;修改密码</h3><p>passwd 用户名 更改用户的密码</p>
<p>它会提示无效的密码，但是这个密码其实已经更新成功了</p>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><h3 id="删除用户，保留家目录"><a href="#删除用户，保留家目录" class="headerlink" title="删除用户，保留家目录"></a>删除用户，保留家目录</h3><p>userdel 用户名</p>
<h3 id="删除用户及其用户目录"><a href="#删除用户及其用户目录" class="headerlink" title="删除用户及其用户目录"></a>删除用户及其用户目录</h3><p>userdel -r 用户名</p>
<p>需要保留家目录嘛 一般情况下建议保留</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>创建用户成功后，会自动创建和用户同名的家目录</p>
<p>可以通过useradd -d 目录 用户名 ，给创建的用户执行家目录</p>
<p>这个不是指定目录，然后再目录下面创建文件夹，而是直接建立一个目录作为这个用户的名称</p>
<h2 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>id 用户名</p>
<h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><h4 id="su-用户名"><a href="#su-用户名" class="headerlink" title="su -用户名"></a>su -用户名</h4><p>切换到原来的用户时用logout或exit</p>
<p>从低权限到高权限需输入密码，高权限到低权限无需密码</p>
<h4 id="who-am-i"><a href="#who-am-i" class="headerlink" title="who am i"></a>who am i</h4><p>显示的是登陆到了的用户的信息</p>
<h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><p>类似于角色，系统可以对有共性的多个用户进行统一的管理</p>
<h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><ul>
<li><p>新增组 groupadd 组名</p>
</li>
<li><p>删除组 groupdel  删除组</p>
</li>
<li><p>增加用户时直接加上组 useradd -g 用户组 用户名  这个用户名需要没存在  用户组要预先存在   注意是组在前，用户名在后</p>
</li>
<li><p>修改用户的组 usermod -g 用户组 用户名</p>
</li>
<li><p>如果新建的用户没有指定组，会新建一个同名的组</p>
</li>
<li><p>一些文件“在Linux里，一切皆文件”</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/12/62cd3a88ba74a.png" alt="Untitled"></p>
</li>
</ul>
<h4 id="如何找回root密码（每个系统不一样）"><a href="#如何找回root密码（每个系统不一样）" class="headerlink" title="如何找回root密码（每个系统不一样）"></a>如何找回root密码（每个系统不一样）</h4><p>本质是刚开机的时候通过单用户模式进入命令行修改密码</p>
<h1 id="使用指令"><a href="#使用指令" class="headerlink" title="使用指令"></a>使用指令</h1><h2 id="不同的运行级别"><a href="#不同的运行级别" class="headerlink" title="不同的运行级别"></a>不同的运行级别</h2><p>0  关机</p>
<p>1  单用户【找回丢失密码】</p>
<p>2  多用户状态没有网络服务</p>
<p>3  多用户状态有网络服务</p>
<p>4  系统未使用保留给用户</p>
<p>5  图形界面</p>
<p>6  系统重启</p>
<p>常用运行级别是3（默认的命令行运行级别是3）和5（图形界面）</p>
<h3 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h3><p>运行级别的切换 init 运行级别</p>
<p>systemctl set-default 目标运行级别</p>
<ul>
<li><a href="http://multi-user.target/">multi-user.target</a>: 运行级别3</li>
<li>graphical.target: 运行级别5</li>
</ul>
<h2 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h2><ul>
<li>man 【命令或配置文件】 获得帮助信息<ul>
<li>按q就退出帮助界面了</li>
<li>选项可以组合使用   ls -la    ls -al</li>
</ul>
</li>
<li>help 命令  获得shell内置命令的帮助信息</li>
</ul>
<h2 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h2><ul>
<li><p>pwd 指令 显示当前工作目录的绝对路径</p>
<ul>
<li>绝对路径 从根目录开始寻找文件</li>
<li>相对路径 从当前目录位置开始找文件</li>
</ul>
</li>
<li><p>ls 【选项】【目录或者文件】</p>
<ul>
<li>-a 显示当前目录所有的文件和目录，包括隐藏的</li>
<li>-l 以列表的方式显示信息<ul>
<li>-lm 加上了个m代表更方面human看的方式显示</li>
</ul>
</li>
</ul>
</li>
<li><p>cd 【参数】 切换到指定目录    这里相对路径，绝对路径的切换要学会</p>
<ul>
<li>cd ~ 或者 cd   切换到当前用户的家目录</li>
<li>cd .. 回到当前目录的上一级目录<ul>
<li>使用绝对路径切换到root目录，cd&#x2F;root</li>
<li>使用相对路径切换到root目录，比如在&#x2F;home&#x2F;tom ,cd ..&#x2F;..&#x2F;tom</li>
</ul>
</li>
</ul>
</li>
<li><p>mkdir 【选项】 要创建的目录   用于创建目录</p>
<ul>
<li>-P 创建多级目录 mkdir -p &#x2F;home&#x2F;animal&#x2F;tiger</li>
</ul>
</li>
<li><p>rmdir 【选项】 要删除的空目录   用于删除空目录</p>
<ul>
<li>如果删除的是非空目录，用 rm -rf 要删除的目录 -f强制删除 -r联级删除 在根目录使用有奇效</li>
<li>rm -rf 【地址】</li>
</ul>
</li>
<li><p>touch 【文件名称】 创建空文件</p>
</li>
<li><p>cp 【选项】 source dest  指令拷贝文件到指定目录</p>
<ul>
<li>-r : 递归复制整个文件夹</li>
<li>将 &#x2F;home&#x2F;hello.txt 拷贝到 &#x2F;home&#x2F;bbb 下  cp hello.txt &#x2F;home&#x2F;bbb</li>
<li>递归复制整个文件夹 &#x2F;home&#x2F;bbb拷贝到 &#x2F;opt目录下 cp -r &#x2F;home&#x2F;bbb &#x2F;opt</li>
<li>强制覆盖不提示的方法 \cp           \cp -r &#x2F;home&#x2F;bbb  &#x2F;opt</li>
</ul>
</li>
<li><p>rm 【选项】 要删除的文件或目录</p>
<ul>
<li>-r: 递归删除整个文件夹</li>
<li>-f : 强制删除不提示</li>
</ul>
</li>
<li><p>mv oldNameFile newNameFile 重命名 mv &#x2F;temp&#x2F;movefile &#x2F;targetFolder 移动文件或移动整个目录</p>
</li>
<li><p>cat 【选项】要查看的文件  cat只能浏览文件，不能修改</p>
<ul>
<li>-n显示行号</li>
<li>为了浏览方便，一般会带上管道命令（即执行完一条命令之后继续执行下一条） |more</li>
</ul>
</li>
<li><p>more  基于vi 的查看文件内容的指令</p>
<ol>
<li>空格键  向下翻一页</li>
<li>enter 向下饭一行</li>
<li>q 立刻离开more，不再显示文件内容</li>
<li>&#x3D; 输出当前行的行号</li>
<li>：f 输出文件名和当前行的行号</li>
</ol>
</li>
<li><p>less 与more类似，但比类强大，这个是根据显示需要加载的内容，对显示大文件有较高的效率</p>
</li>
<li><p>echo 【选项】 【输出内容】 输出内容到控制台</p>
<ul>
<li>用echo指令输出环境变量，eg.$PATH (记得大写</li>
<li>输出字符串  echo “hello world”</li>
</ul>
</li>
<li><p>head -n 5 文件  查看文件前5行</p>
<ul>
<li>如果去掉 -n 5 默认显示前10行</li>
</ul>
</li>
<li><p>tail 和head类似，这个是显示后面5行</p>
<ul>
<li>tail -f 文件  实时追踪文档的所有更新，执行这个指令系统就停止在这里一直监视tail -f 有没有更新了</li>
</ul>
</li>
<li><blockquote>
<p>指令和 &gt;&gt; 指令    输出重定向和追加指令</p>
</blockquote>
<ul>
<li>ls -l &gt; 文件     （将列表的内容写入文件a.txt中） 重定向是覆盖写</li>
<li>ls -al &gt;&gt; 文件   （将列表中的内容追加写道文件aa.txt的末尾）</li>
<li>cat 文件1 &gt; 文件2  （将文件1的内容覆盖到文件2）</li>
<li>echo “内容” &gt;&gt; 文件  （追加）</li>
<li>如果被输入的文件不存在，会自动创建</li>
</ul>
</li>
<li><p>ln -s 【原文件路径】【软连接名】  给原文件创建一个软连接</p>
<ul>
<li>软连接就类似Windows里面的快捷方式，硬链接如果原文件删除了，硬链接仍然能够访问，软连接不行</li>
<li>用 ls -l 进行按行输出的话，是可以看出来谁是软连接的</li>
</ul>
</li>
<li><p>history 指令 查看系统执行过的操作</p>
<ul>
<li>后面加上数字n，看的是最后执行的n步操作</li>
</ul>
</li>
</ul>
<h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><ul>
<li><p>date  显示当前日期</p>
<ul>
<li>date +%Y  显示当前时间</li>
<li>date +%m 显示当前月份</li>
<li>date +%d 显示当前是哪一天</li>
<li>date  “+%Y-%M-%d%H:%M%S”  显示年月日时分秒  注意这个是字符串的格式 只要显示的不是单独的某个东西，就要有字符串</li>
<li>设置日期 date -s “日期”</li>
</ul>
</li>
<li><p>cal 显示当前日历</p>
</li>
<li><p>搜索查找类</p>
<ul>
<li>find【搜索范围】【选项】 从指定目录向下递归地遍历各个子目<ul>
<li>-name 文件名 按照指定的文件名查找文件，如果文件名不固定，查找某一类型 用 *.txt</li>
<li>-user 用户名 查找属于指定用户名所有文件</li>
<li>-size 文件大小 按照指定的文件大小查找文件  “+”代表大于，“-”代表小于</li>
</ul>
</li>
<li>locate指令<ul>
<li>locate可以快速定位文件路径，利用实现建立的系统中所有文件名称及路径的locate数据库快速定位给定的文件，无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻</li>
<li>第一次运行前，必须用updatedb指令创建locate数据库</li>
</ul>
</li>
<li>which 查看某个指定在哪个目录下</li>
<li>grep指令和管道符号 |  管道符可以连续使用  grep【选项】查找内容 源文件<ul>
<li>grep过滤查找，管道符“|” 表示将前一个命令的处理结果</li>
<li>常用选项<ul>
<li>-n显示匹配行及行号</li>
<li>-i 忽略字母大小写</li>
</ul>
</li>
<li>例：在hello.txt 中查找“yes”所在行，并显示行号<ul>
<li>cat &#x2F;home&#x2F;hello.txt | grep -n “yes”</li>
<li>grep -n “yes” &#x2F;home&#x2F;hello.txt</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h2><ul>
<li>gzip &#x2F; gunzip 压缩和解压  这个只是对文件进行的操作 这个是文件操作之后原文件就没了<ul>
<li>gzip 文件 压缩文件，只能压缩为*.gz文件</li>
<li>gunzip 文件.gz 解压缩文件命令</li>
</ul>
</li>
<li>zip&#x2F; unzip 压缩和解压   这个操作之后原文件还在<ul>
<li>zip【选项】XXX.zip 将要压缩的内容（功能描述：压缩文件和目录的命令）<ul>
<li>-r 递归压缩，即压缩目录</li>
</ul>
</li>
<li>unzip 【选项】 XXX.zip （功能描述：解压缩文件）<ul>
<li>-d 目录 ：指定解压后文件的存放目录</li>
</ul>
</li>
</ul>
</li>
<li>tar 压缩和解压都是这个指令  最后打包后的文件是.tar.gz的文件 可压文件，也可压目录<ul>
<li>tar【选项】 XXX.tar.gz 打包的内容 如何确定是压缩还是解压是通过选项来实现的<ul>
<li>-c 产生.tar打包文件</li>
<li>-v 显示详细信息</li>
<li>-f 指定压缩后的文件名</li>
<li>-z 打包同时压缩</li>
<li>-x 解包.tar文件</li>
</ul>
</li>
<li>例：压缩多个文件，将&#x2F;home&#x2F;pig.txt 和 &#x2F;home&#x2F;cat.txt 压缩成 pc.tar.gz<ul>
<li>tar -zcvf pc.tar.gz &#x2F;home&#x2F;pig.txt &#x2F;home&#x2F;cat.txt  如果是解压，指令推荐zxvf</li>
</ul>
</li>
<li>例：myhome.tar.gz 解压到 &#x2F;opt&#x2F;tmp2下<ul>
<li>mkdir&#x2F;opt&#x2F;tmp2</li>
<li>tar -zxvf &#x2F;home&#x2F;myhome.tar.gz -C &#x2F;opt&#x2F;tmp2</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>  <img src="https://tu.sunning.fit/i/2022/07/12/62cd3a97221e1.png" alt="Untitled"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Linux</tag>
        <tag>基本操作命令的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓</title>
    <url>/2022/07/21/%E5%AE%89%E5%8D%93/</url>
    <content><![CDATA[<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>怎么改布局：</p>
<p>右键convert view</p>
<p>setContentView(R.layout.activity_main)  传入的是一个id,然后每一个layout都有自己对应的id值</p>
<h2 id="各种控件"><a href="#各种控件" class="headerlink" title="各种控件"></a>各种控件</h2><p><code>match_parent</code>和父亲一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span>  <span class="comment">//宽度和它老爸一样</span></span><br></pre></td></tr></table></figure>

<p><code>wrap_content</code>自适应内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span>   <span class="comment">//里面的内容有多宽，它就有多宽</span></span><br></pre></td></tr></table></figure>

<p>居中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:gravity=<span class="string">&quot;center&quot;</span></span><br></pre></td></tr></table></figure>

<p>padding( 直接输入padding就可以显示出来了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:paddingLeft=<span class="string">&quot;30dp&quot;</span></span><br></pre></td></tr></table></figure>

<p>margin</p>
<p>在左边放一个图片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:drawableLeft=<span class="string">&quot;@drawable/shape_rectangle&quot;</span></span><br></pre></td></tr></table></figure>



<p>paddingStart 左对齐</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:paddingStart=<span class="string">&quot;8dp&quot;</span></span><br></pre></td></tr></table></figure>



<p>paddingEnd 右对齐</p>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>代表用户界面中基本的构建块，一个View在屏幕中占据一个矩形区域，且负责绘制和事件处理</p>
<p>View是所有widgets的基础类，widgets是我们通常用于创建和用户交互的组件，比如按钮、文本输入框等等。子类ViewGroup是所有布局（layout）的基础类</p>
<h2 id="文本控件"><a href="#文本控件" class="headerlink" title="文本控件"></a>文本控件</h2><h3 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h3><p>text填内容</p>
<p>textSize 大小 用sp表示</p>
<p>color 颜色，只能写#</p>
<p>layout_gravity&#x3D;center  控件居中</p>
<p>gravity&#x3D;center 文字居中</p>
<p>TextView.setText() 给控件赋值</p>
<h3 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h3><p>hint 输入框提示信息</p>
<p>inputType输入的类型 numberPassword就变成小黑点看不见了</p>
<p>maxLength 最多能输入的字符个数 </p>
<h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><h3 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h3><h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><p>图片放在drawable里面，最好是数字或者特殊符号命名，因为其他的可能会报错</p>
<p>src引入</p>
<p>text </p>
<h3 id="Toast组件"><a href="#Toast组件" class="headerlink" title="Toast组件"></a>Toast组件</h3><p>是一个包，可以屏幕提示</p>
<p>Toast.makeText(this,”想要的消息”,时长).show()</p>
<p>时长可以写LENGTH_xxxx </p>
<h2 id="AlertDialog对话框"><a href="#AlertDialog对话框" class="headerlink" title="AlertDialog对话框"></a>AlertDialog对话框</h2><h3 id="只现实标题和内容"><a href="#只现实标题和内容" class="headerlink" title="只现实标题和内容"></a>只现实标题和内容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AlertDialog alertDialog=<span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(MainActivity.<span class="built_in">this</span>).setTitle(<span class="string">&quot;标题&quot;</span>).setMessage(<span class="string">&quot;这是普通弹窗&quot;</span>).setIcon(R.mimap.ic_launcher<span class="comment">//这里设置图标是什么的</span></span><br><span class="line">                                                                                                              ).create();</span><br><span class="line">alertDialog.show();</span><br></pre></td></tr></table></figure>







<h3 id="显示确认和取消按钮"><a href="#显示确认和取消按钮" class="headerlink" title="显示确认和取消按钮"></a>显示确认和取消按钮</h3><p>就是在原来的基础上加上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.setPositiveButton(<span class="string">&quot;确认&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                        Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,MainActivity2.class);</span><br><span class="line">                        startActivity(intent);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).setNegativeButton(<span class="string">&quot;取消&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="built_in">this</span>,<span class="string">&quot;取消跳转&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br></pre></td></tr></table></figure>

<p>这两个方法</p>
<p>完整：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="comment">/*if(view==text2)&#123;</span></span><br><span class="line"><span class="comment">            Log.d(TAG, &quot;onClick: &quot;+((TextView)view).toString());</span></span><br><span class="line"><span class="comment">        &#125;else&#123;</span></span><br><span class="line"><span class="comment">            Log.d(TAG, &quot;onClick: &quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.button1:</span><br><span class="line">                AlertDialog alertDialog=<span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(MainActivity.<span class="built_in">this</span>).setTitle(<span class="string">&quot;跳转下一个&quot;</span>).setMessage(<span class="string">&quot;确认跳转吗&quot;</span>).setIcon(R.mipmap.ic_launcher_round).setPositiveButton(<span class="string">&quot;确认&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                        Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,MainActivity2.class);</span><br><span class="line">                        startActivity(intent);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).setNegativeButton(<span class="string">&quot;取消&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="built_in">this</span>,<span class="string">&quot;取消跳转&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).create();</span><br><span class="line">                alertDialog.show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="显示列表"><a href="#显示列表" class="headerlink" title="显示列表"></a>显示列表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arrays=&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(MainActivity.<span class="built_in">this</span>).setTitle(<span class="string">&quot;数字列表&quot;</span>).setIcon(R.mipmap.ic_launcher_round).setItems(arrays, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;第&quot;</span>+arrays[i]+<span class="string">&quot;个数字&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).create().show();</span><br></pre></td></tr></table></figure>

<p>就是多了个setItems,然后在onClick里面的i就是点击到的列表的下标</p>
<h1 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h1><h2 id="Intent意图"><a href="#Intent意图" class="headerlink" title="Intent意图"></a>Intent意图</h2><p>Intent （ 当前的类，想要跳转过去的类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,MainActivity2.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>



<h3 id="页面跳转值"><a href="#页面跳转值" class="headerlink" title="页面跳转值"></a>页面跳转值</h3><p>在传值的页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,MainActivity2.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;admin&quot;</span>); <span class="comment">//想传的字符，具体的内容</span></span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>

<p>在接收的页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent=getIntent();</span><br><span class="line">String xxx=intent.getStringExtra(<span class="string">&quot;userName&quot;</span>);  <span class="comment">//找到username里面的intent包含的东西</span></span><br></pre></td></tr></table></figure>



<h1 id="布局-1"><a href="#布局-1" class="headerlink" title="布局"></a>布局</h1><h2 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h2><p>孩子都在一条线上</p>
<p>摆放方向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:orientation=<span class="string">&quot;vertical&quot;</span>  <span class="comment">//垂直摆放</span></span><br></pre></td></tr></table></figure>

<p>线性布局的权重——flex布局</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:layout_weight=<span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h2><h3 id="相对于父控件"><a href="#相对于父控件" class="headerlink" title="相对于父控件"></a>相对于父控件</h3><p>跑到中间去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:layout_centerInParent=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:layout_centerHorizontal=<span class="string">&quot;true&quot;</span>  <span class="comment">//水平居中</span></span><br></pre></td></tr></table></figure>

<p>右边</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:layout_alignParentRight=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="相对于同级控件"><a href="#相对于同级控件" class="headerlink" title="相对于同级控件"></a>相对于同级控件</h3><p>toLeftof</p>
<p>above </p>
<p>below</p>
<p>然后加上对应的id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:layout_below=<span class="string">&quot;@id/button6&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="约束布局"><a href="#约束布局" class="headerlink" title="约束布局"></a>约束布局</h2><p>约束这玩意如果不添加上，预览界面看到的和机子上面看到的是两个玩意</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54a6b7435d.png" alt="image-20220702205637245"></p>
<p>辅助工具拖来拖去连线即可，想要指定间距也直接拖拽即可</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c54a710a53e.png" alt="image-20220702205844340"></p>
<p>这里改比例</p>
<p>如果想要两个东西居中，可以画一个参考线</p>
<p>autoconnect 自动添加约束，例如把按钮拖到中间的位置，可以自动添加约束</p>
<p>inference 推断约束 </p>
<h2 id="其他的布局"><a href="#其他的布局" class="headerlink" title="其他的布局"></a>其他的布局</h2><h3 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h3><p>AbsoluteLayout</p>
<p>靠xy来控制自己的位置</p>
<h3 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h3><p>TableLayout是布局</p>
<p>TableRow是行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;TableRow&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:text=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/TableRow&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TableRow&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:text=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/TableRow&gt;</span><br></pre></td></tr></table></figure>

<p>这就是两行，每行里面是一个button</p>
<h3 id="帧布局"><a href="#帧布局" class="headerlink" title="帧布局"></a>帧布局</h3><p>FrameLayoutk</p>
<p>没有定位</p>
<p>两个属性</p>
<ul>
<li>**android:foreground:***设置改帧布局容器的前景图像</li>
<li>**android:foregroundGravity:**设置前景图像显示的位置</li>
</ul>
<h2 id="常用的单位"><a href="#常用的单位" class="headerlink" title="常用的单位"></a>常用的单位</h2><p>px像素单位（不推荐使用）</p>
<p>dp适配屏幕的单位（dip），以160dip为基准，在这个dip的条件下，1dp&#x3D;1px,其他屏幕大小对应变化</p>
<p>字体单位sp,根据用户字体大小设置的选项进行适配</p>
<h1 id="drawable"><a href="#drawable" class="headerlink" title="drawable"></a>drawable</h1><p>就像是view的组件</p>
<p>drawable里面右键，然后drawable source file</p>
<h2 id="shape控件"><a href="#shape控件" class="headerlink" title="shape控件"></a>shape控件</h2><p>solid代表边框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;solid android:color=<span class="string">&quot;#ffffff&quot;</span>/&gt;  <span class="comment">//背景色</span></span><br><span class="line">&lt;stroke android:width=<span class="string">&quot;1dp&quot;</span> android:color=<span class="string">&quot;#333333&quot;</span>/&gt; <span class="comment">//边框颜色和粗细</span></span><br></pre></td></tr></table></figure>

<p>然后在想要用的组件那里用个background然后是目录的位置</p>
<h2 id="select控件"><a href="#select控件" class="headerlink" title="select控件"></a>select控件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;selector xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt; </span><br><span class="line">    &lt;item android:state_pressed=<span class="string">&quot;true&quot;</span> /android:drawable=<span class="string">&quot;@drawable/shape_rectangle&quot;</span>/&gt;  <span class="comment">//pressed代表按压下去的样子</span></span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/shape_rectangle2&quot;</span>/&gt;<span class="comment">//代表没有按压时候的样子</span></span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure>

<h1 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h1><p>建立一个nenu文件夹，然后右键就有menu source file这个东西</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;menu xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line">    &lt;item android:title=<span class="string">&quot;ListView效果&quot;</span></span><br><span class="line">        android:id=<span class="string">&quot;@+id/ListView&quot;</span>/&gt;</span><br><span class="line">    &lt;item android:title=<span class="string">&quot;GridView效果&quot;</span></span><br><span class="line">        android:id=<span class="string">&quot;@+id/ListView2&quot;</span>/&gt;</span><br><span class="line">    &lt;item android:title=<span class="string">&quot;瀑布流效果&quot;</span></span><br><span class="line">        android:id=<span class="string">&quot;@+id/ListView3&quot;</span>/&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>

<p>item里面可以加menu,menu里面可以加item</p>
<h2 id="onCreateOptionsMenu"><a href="#onCreateOptionsMenu" class="headerlink" title="onCreateOptionsMenu"></a>onCreateOptionsMenu</h2><p>然后在MainActivity.java的部分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line">       getMenuInflater().inflate(R.menu.menu,menu); <span class="comment">//这里代表写的那个xml文件</span></span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>R.menu代表res文件夹里面的menu文件夹</p>
<h2 id="onOptionsItemSelected"><a href="#onOptionsItemSelected" class="headerlink" title="onOptionsItemSelected"></a>onOptionsItemSelected</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public boolean onOptionsItemSelected(@NonNull MenuItem item) &#123;</span><br><span class="line">    int itemId=item.getItemId();</span><br><span class="line">    Log.d(TAG, &quot;点击了: &quot;+itemId+&quot;    &quot;+R.id.GridView_1);</span><br><span class="line">    switch (itemId)&#123;</span><br><span class="line">        case R.id.GridView_1:</span><br><span class="line">            Log.d(TAG, &quot;点击成了&quot;);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return super.onOptionsItemSelected(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重写<code>onOptionsItemSelected</code>这个方法，唯一添加了的是int itemId&#x3D;item.getItemId();这句，用switch方法</p>
<h1 id="实现点击事件"><a href="#实现点击事件" class="headerlink" title="实现点击事件"></a>实现点击事件</h1><p>ctrl+alt+f快捷地把变量设置成成员变量</p>
<p>在start里面写，通过<code>findViewById</code>找到对应的id,可以先在方法里面写，然后用ctrl+alt+f快捷键方便地把它变成成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> TextView text;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    monInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">monInit</span><span class="params">()</span> &#123;</span><br><span class="line">    text = findViewById(R.id.button1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView text;</span><br><span class="line">    <span class="keyword">private</span> View text2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        monInit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">monInit</span><span class="params">()</span> &#123;</span><br><span class="line">        text = findViewById(R.id.button1);</span><br><span class="line">        text2=findViewById(R.id.button2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initClickEvent</span><span class="params">()</span>&#123;</span><br><span class="line">        text.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        text2.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(view==text2)&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;onClick: &quot;</span>+((TextView)view).toString());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;onClick: &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>和第一种的区别：就是在setOnClickListener只传this，然后编辑器会让我们补全接口，这时候在onClick里面判断是哪个按钮然后重写</p>
<p>不过既然判断是哪一个控件，不如用switch语法了</p>
<h1 id="把字符串或者布局抽取出来"><a href="#把字符串或者布局抽取出来" class="headerlink" title="把字符串或者布局抽取出来"></a>把字符串或者布局抽取出来</h1><p>抽字符串，alt+enter快捷键即可</p>
<p>抽样式</p>
<p>点对应的布局的项目，然后<strong>右键 – Refactor –  Extract – Style</strong></p>
<h1 id="Adapter适配器"><a href="#Adapter适配器" class="headerlink" title="Adapter适配器"></a>Adapter适配器</h1><p>用来帮助填充数据的中间桥梁</p>
<p>将各种数据以合适的形式显示在view中给用户看</p>
<p>Adapter有很多的接口，抽象类，子类可以使用，BaseAdapter,ArrayAdapter,SimpleAdapter</p>
<h2 id="ArrayAdapter"><a href="#ArrayAdapter" class="headerlink" title="ArrayAdapter"></a>ArrayAdapter</h2><p>ArrayAdapter原理非常簡單就是宣告一個陣列把要值塞進去，接著ListView就會依照順序顯示出來</p>
<p>列表的显示需要三个元素：<br>a．ListVeiw 用来展示列表的View。<br>b．适配器 用来把数据映射到ListView上的中介。<br>c．数据   具体的将被映射的字符串，图片，或者基本组件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> <span class="title class_">ArrayAdapter</span>&lt;String&gt;(<span class="built_in">this</span>,android.R.layout.simple_expandable_list_item_1,strs);</span><br><span class="line"></span><br><span class="line">setListAdapter(adapter);<span class="comment">//在想要渲染上去的组件上用适配器</span></span><br></pre></td></tr></table></figure>

<h2 id="SimpleAdapter"><a href="#SimpleAdapter" class="headerlink" title="SimpleAdapter"></a>SimpleAdapter</h2><p>当listView中只需要显示一个数据时，使用ArrayAdapter适配器很方便，但是如果要向listview的每一行显示多行数据时，ArrayAdapter就不能满足需求了。这个时候SimpleAdapter就派上用场了，SimpleAdapter可以让ListView的每一行显示多项数据，图文并茂等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SimpleAdapter</span> <span class="params">(Context context, List&lt;? extends Map&lt;String, ?&gt;&gt; data, <span class="type">int</span> resource, String[] from, <span class="type">int</span>[] to)</span></span><br></pre></td></tr></table></figure>



<p>参数：context　　SimpleAdapter关联的View的运行环境</p>
<p>data　　　 一个Map组成的List。在列表中的每个条目对应列表中的一行,每一个map中应该包含所有在from参数中指定的键</p>
<p>resource    一个定义列表项的布局文件的资源ID。布局文件将至少应包含那些在to中定义了的ID,ListView 的 Item 布局资源,可以为系统预定义或用户自<br>定义的布局资源;</p>
<p>from          一个将被添加到Map映射上的键名</p>
<p>to　　　　 将绑定数据的视图的ID,跟from参数对</p>
<h1 id="Spinner下拉列表"><a href="#Spinner下拉列表" class="headerlink" title="Spinner下拉列表"></a>Spinner下拉列表</h1><h2 id="知道有多少个下拉的内容，用String数组"><a href="#知道有多少个下拉的内容，用String数组" class="headerlink" title="知道有多少个下拉的内容，用String数组"></a>知道有多少个下拉的内容，用String数组</h2><p>存数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;string-array name=<span class="string">&quot;string_array&quot;</span>&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">1</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">2</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">3</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">4</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">5</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">6</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">7</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">8</span>&lt;/item&gt;</span><br><span class="line">    &lt;/string-array&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>



<p>在xml里面写spinner</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;Spinner</span><br><span class="line">        android:id=<span class="string">&quot;@+id/sp&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:entries=<span class="string">&quot;@array/string_array&quot;</span>  <span class="comment">//这个代表数据的位置</span></span><br><span class="line">        /&gt;</span><br></pre></td></tr></table></figure>



<p>在MainActivity里面获取数组，获取spinner</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spinner =findViewById(R.id.sp);</span><br><span class="line">        resources =getResources().getStringArray(R.array.string_array);</span><br><span class="line">        spinner.setOnItemSelectedListener(<span class="keyword">new</span> <span class="title class_">AdapterView</span>.OnItemSelectedListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="type">int</span> i, <span class="type">long</span> l)</span> &#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;点击了&quot;</span>+i, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; adapterView)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>











<h1 id="存数据的地方"><a href="#存数据的地方" class="headerlink" title="存数据的地方"></a>存数据的地方</h1><p>可以在values文件夹里面创建需要的xml文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;string-array name=<span class="string">&quot;string_array&quot;</span>&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">1</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">2</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">3</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">4</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">5</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">6</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">7</span>&lt;/item&gt;</span><br><span class="line">        &lt;item&gt;<span class="number">8</span>&lt;/item&gt;</span><br><span class="line">    &lt;/string-array&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>







<h1 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h1><p>List&lt; DataBea &gt; —— Adapter ——setAdapter —— 显示数据</p>
<p>创建适配器adapters</p>
<h1 id="清单文件"><a href="#清单文件" class="headerlink" title="清单文件"></a>清单文件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">    android:allowBackup=<span class="string">&quot;true&quot;</span>   <span class="comment">//测试的时候是true,打包的时候必须是false</span></span><br><span class="line">    android:dataExtractionRules=<span class="string">&quot;@xml/data_extraction_rules&quot;</span></span><br><span class="line">    android:fullBackupContent=<span class="string">&quot;@xml/backup_rules&quot;</span></span><br><span class="line">    android:icon=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span><br><span class="line">    android:label=<span class="string">&quot;@string/app_name&quot;</span></span><br><span class="line">    android:roundIcon=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span><br><span class="line">    android:supportsRtl=<span class="string">&quot;true&quot;</span>  <span class="comment">//从左到右布局</span></span><br><span class="line">    android:theme=<span class="string">&quot;@style/Theme.MyApplication&quot;</span></span><br><span class="line">    tools:targetApi=<span class="string">&quot;31&quot;</span>&gt;</span><br><span class="line">    &lt;activity</span><br><span class="line">        android:name=<span class="string">&quot;.MainActivity&quot;</span>  <span class="comment">//一开始的是哪一个</span></span><br><span class="line">        android:exported=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line">            &lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line">    &lt;/activity&gt;</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure>















<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><h3 id="莫名奇妙出现Cannot-resolve-symbol-XXX"><a href="#莫名奇妙出现Cannot-resolve-symbol-XXX" class="headerlink" title="莫名奇妙出现Cannot resolve symbol XXX"></a>莫名奇妙出现Cannot resolve symbol XXX</h3><p>看起来是缓存引起的错误，那就清空缓存试试呗。</p>
<ol>
<li>点击菜单中的 “File” -&gt; “Invalidate Caches &#x2F; Restart”，然后点击对话框中的 “Invalidate and Restart”，清空 cache 并且重启。等待重启后基本上刚才的错误就没有了。</li>
<li>如果还是没有解决，那可以尝试将依赖先去掉，sync gradle，接着再将依赖添加回来，sycn gradle，这个时候多半就正常了，我的环境就需要第二步才正常。</li>
</ol>
<h3 id="这句报错"><a href="#这句报错" class="headerlink" title="这句报错"></a>这句报错</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Log.d(TAG, &quot;onClick: &quot;+((TextView)view).getText().toString());</span><br></pre></td></tr></table></figure>

<p>应该</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Log.d(&quot;TAG&quot;, &quot;onClick: &quot;+((TextView)view).getText().toString());</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.content.ContentValues.TAG;</span><br></pre></td></tr></table></figure>

<p>再或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG=<span class="string">&quot;MainActivity&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>搞机</title>
    <url>/2022/07/21/%E6%90%9E%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="日常小bug"><a href="#日常小bug" class="headerlink" title="日常小bug"></a>日常小bug</h1><p>win键没有反应，Fn+左win关掉win键了，用Fn+右win即可打开</p>
<h1 id="罗技Ghub-安装失败，进入就是黑屏界面"><a href="#罗技Ghub-安装失败，进入就是黑屏界面" class="headerlink" title="罗技Ghub 安装失败，进入就是黑屏界面"></a>罗技Ghub 安装失败，进入就是黑屏界面</h1><p>用视频中的【方法1】先下载群或网盘提供的安装包版本，然后选中安装程序→鼠标右键→属性→兼容性→兼容模式（win8）→其它操作和视频一样</p>
<p><a href="https://www.bilibili.com/video/av506847146%E8%BF%99%E9%87%8C%E4%B8%8B%E9%9D%A2%E7%9A%84%E8%BF%99%E4%B8%AA%E7%BD%91%E7%9B%98%E9%93%BE%E6%8E%A5">https://www.bilibili.com/video/av506847146这里下面的这个网盘链接</a></p>
]]></content>
      <categories>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>搞机</tag>
      </tags>
  </entry>
  <entry>
    <title>时间复杂度</title>
    <url>/2022/07/21/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>时间复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title>星际2</title>
    <url>/2022/07/21/%E6%98%9F%E9%99%852/</url>
    <content><![CDATA[<h1 id="基本键位操作"><a href="#基本键位操作" class="headerlink" title="基本键位操作"></a>基本键位操作</h1><ul>
<li><p>shift与双线操作</p>
<p>  shift规定路径，然后开技能，解放者用这个特有用，规定路径点的时候还可以在小地图进行操作</p>
<p>  控制另外的一波兵</p>
</li>
<li><p>守卫</p>
<p>  不会被勾引出去</p>
</li>
<li><p>集结点与接兵</p>
<p>  可以在兵上设置集结点，造出来的兵就会往集结点移动，可以多设置几个集结点防止兵死了</p>
</li>
<li><p>取消编队的某个</p>
<p>  选中全编队，shift去掉，然后重新编队即可</p>
</li>
<li><p>集结点编屏幕</p>
</li>
</ul>
<h1 id="人族"><a href="#人族" class="headerlink" title="人族"></a>人族</h1><ul>
<li><p>了解</p>
<p>  关于花钱，2矿可以支撑3个挂件兵营1个挂件重工1个挂件飞机场，三矿足以支撑5个兵营，而后甚至第6，7，8个兵营。tvt3矿一般是5兵营2重工1飞机场</p>
<p>  大多流程里，造完飞机场的农民要马上去造补给站，而且这个农民接下来要一直造补给站，甚至在出兵建筑补齐后，在拉一个农民，两农民不停造补给站(跟出兵和产农民是一样的，补给站，农民和兵一旦断了，运营基本功就有很大问题)</p>
<p>  在三基地造好之前，矿骡一到五十就砸，人口不卡，造兵不停，套路是比赛里的正统打法，基本打钻石1就跟打白金一样，正面a过去，一点多线骚扰都不用，对面直接被打穿</p>
<p>  编屏，我只编了一个在出兵点，用f1来创建，键盘一左边那个<del>来切换到第一屏，一般就是造个补给站，把所有出兵点集中在这补给站上，编个f1，然后</del>来切换(但这样切屏太快很不舒服)</p>
<p>  提升基本功最快的方法，就是看第一视角，然后记笔记，把细节什么的全都记下来(一般记到三基地造好之时，如果是偷三基地的那你记到建筑补差不多齐就行)。然后自定义打人机，练习</p>
</li>
<li><p>编队</p>
<p>  123是部队（一个线一支部队，鬼兵3队）</p>
<p>  3给骚扰的部队</p>
<p>  ，4队是家和攻防（一起是每一次造农民都可以看到好没好），5队是产兵建筑</p>
<p>  7（H）是一个农民</p>
<p>  造兵的建筑可以编在一起，用鼠标的建进行切换</p>
</li>
<li><p>编屏</p>
<p>  每个家，1234</p>
<p>  集兵点一个屏</p>
</li>
<li><p>开局</p>
</li>
<li></li>
</ul>
<h1 id="虫族"><a href="#虫族" class="headerlink" title="虫族"></a>虫族</h1><ul>
<li><p>编队</p>
<p>  1,2战斗编队</p>
<p>  3全部基地</p>
<p>  4注卵女王</p>
<p>  5菌毯女王</p>
<p>  6防守部队，后期进攻是魔法兵种</p>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>本机当服务器</title>
    <url>/2022/07/21/%E6%9C%AC%E6%9C%BA%E5%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S openssh</span><br></pre></td></tr></table></figure>

<p>关闭开机自启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> sshd</span><br></pre></td></tr></table></figure>

<p>启动ssh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start sshd</span><br></pre></td></tr></table></figure>



<p>查看机器的ip地址</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p><code>ip addr</code>作用和<code>ifconfig</code>类似</p>
<p><code>ip route</code>显示当前实际在使用的网卡端口状态和路由网关信息</p>
<h1 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h1><p>源于一节数据库实验课上面我用室友的电脑直接连上自己的本机并拥有所有权限的事情……</p>
<p>vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PubkeyAuthentication  <span class="built_in">yes</span>  <span class="comment">#启用PublicKey认证。</span></span><br><span class="line"></span><br><span class="line">AuthorizedKeysFile       .ssh/authorized_keys  <span class="comment">#PublicKey文件路径。</span></span><br><span class="line"></span><br><span class="line">PasswordAuthentication  no  <span class="comment">#不适用密码认证登录。</span></span><br><span class="line">PermitRootLogin no  <span class="comment">#不允许root用户登录。</span></span><br></pre></td></tr></table></figure>



<p>vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p>
<p>更改默认的端口号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">搜索 Port 然后更改默认的22端口号</span><br></pre></td></tr></table></figure>



<p>只允许指定端口登陆：</p>
<p>在文件的最后面添加AllowUsers root@ip</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">AllowUsers root@ip</span><br></pre></td></tr></table></figure>



<p>完成所有的程序之后记得一定一定一定要记得重启</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

<p>如果不用，没必要开着sshd直接关了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl stop sshd</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>本机当服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>组件</title>
    <url>/2022/07/21/%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-text-stroke</span><br></pre></td></tr></table></figure>

<p>字体镂空</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.doubleStroke</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.doubleStroke</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="comment">/*content 属性与 :before 及 :after 伪元素配合使用，来插入生成内容。*/</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-text);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  -webkit-text-stroke: <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*.doubleStroke::after &#123;</span></span><br><span class="line"><span class="comment">  !*content 属性与 :before 及 :after 伪元素配合使用，来插入生成内容。*!</span></span><br><span class="line"><span class="comment">  content: attr(data-text);</span></span><br><span class="line"><span class="comment">  position: absolute;</span></span><br><span class="line"><span class="comment">  -webkit-text-stroke: 2px blue;</span></span><br><span class="line"><span class="comment">  z-index: 0;</span></span><br><span class="line"><span class="comment">  left: 0;</span></span><br><span class="line"><span class="comment">  transform: translateX(-1px);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>帅</tag>
      </tags>
  </entry>
  <entry>
    <title>算法考试</title>
    <url>/2022/07/21/%E7%AE%97%E6%B3%95%E8%80%83%E8%AF%95/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>分治算法：</p>
<p>分治算法的基本步骤是：</p>
<p>将原问题归约成几个子问题、</p>
<p>递归求解每个子问题</p>
<p>将子问题的解进行综合。</p>
<p>贪心：</p>
<p>在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法</p>
<ol>
<li>创建数学模型来描述问题。</li>
<li>把求解的问题分成若干个<strong>子问题</strong>。</li>
<li>对每一子问题求解，得到子问题的局部最优解。</li>
<li>把子问题的解局部最优解合成原来解问题的一个解。</li>
</ol>
<p>两个基本要素</p>
<p>贪心选择性质，所谓贪心选择性质是指所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。这是贪心算法可行的第一个基本要素，也是贪心算法与动态规划算法的主要区别。贪心算法所做的贪心选择可以依赖于以往所做出的选择，但决不依赖将来所做的选择，也不依赖于子问题的解。正是由于这种差别，动态规划算法通常以自底向上的方式解各子问题，而贪心算法则通常以自顶向下的方式进行，以迭代的方式做出相继的贪心选择，每做一次贪心选择就将所求问题简化为规模更小的子问题。</p>
<p>最优子结构性质</p>
<p>动态规划：</p>
<p>适用动态规划的问题</p>
<ul>
<li>最优子结构性质</li>
</ul>
<p>一个最优化策略的子策略总是最优的。</p>
<p>无后效性</p>
<p>将各阶段按照一定的次序排列好之后，对于某个给定的阶段状态，它以前各阶段的状态无法直接影响它未来的决策，而只能通过当前的这个状态。</p>
<ul>
<li>子问题的重叠性</li>
</ul>
<p>动态规划算法的关键在于解决冗余，这是动态规划算法的根本目的。动态规划实质上是一种以空间换时间的技术，它在实现的过程中，不得不存储产生过程中的各种状态，所以它的空间复杂度要大于其他的算法</p>
<p><strong>两个基本要素；</strong></p>
<p>具有最优子结构</p>
<p>子问题重叠</p>
<p>佛罗伊德算法</p>
<p>贪心与动归的区别：</p>
<p>贪心对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能</p>
<p>动归和分治：</p>
<p>区别：</p>
<p>动态规划是将原问题分解为多个子问题，通过计算出子问题的结果构造一个最优解。动态规划通过迭代法自底向上求解，动态规划将分解后的子问题理解为相互间有联系，有重叠的部分；<br>分治法是将原问题分解为多个子问题，利用递归对各个子问题独立求解，最后利用各子问题的解进行合并形成原问题的解。分治法将分解后的子问题看成是相互独立的。</p>
<p>相同：</p>
<p>分治法与动态规划，二者要求原问题具有最有子结构，都是将问题分而治之分解成若干个规模较小的子问题</p>
<h1 id="时间复杂度，空间复杂度"><a href="#时间复杂度，空间复杂度" class="headerlink" title="时间复杂度，空间复杂度"></a>时间复杂度，空间复杂度</h1><p>等概率：</p>
<p><img src="/%E7%AE%97%E6%B3%95%E8%80%83%E8%AF%95.assets/image-20220619152020972.png" alt="image-20220619152020972"></p>
<p>对称：</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5494b7090a.png" alt="image-20220619152041526"></p>
<p>把多余的变量消解掉</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c5494d12f30.png" alt="image-20220619170417932"></p>
<p>错位相减：</p>
<p>用来去掉求和符</p>
<p><img src="https://tu.sunning.fit/i/2022/07/06/62c549504a2be.png" alt="image-20220619164522633"></p>
<p>加减消元法：</p>
<p>由T(n),T(n-1)之间的关系，推出T(n)与T(1)之间的关系</p>
<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><p>假设有最优解是ans</p>
<p>按照现在的解法是res</p>
<p>证明ans一定是res</p>
<p>就是ans如果有不符合排序的部分，计算一波时间复杂度，相减发现是res就是最优的</p>
<p>交换论证法:该方法的主要的思想也就是先假设存在一个最优的算法和我们的贪心算法最接近，然后通过交换两个算法里的一个步骤(或元素)，得到一个新的最优的算法，同时这个算法比前一个最优算法更接近于我们的贪心算法，从而得到矛盾，原命题成立。</p>
<p>贪心算法领先：贪心的每一步都比其他的算法好</p>
<p>结构论证：发现一个所有解都具有的界限，然后证明算法总是能达到这个界限</p>
<h1 id="用递归实现冒泡排序"><a href="#用递归实现冒泡排序" class="headerlink" title="用递归实现冒泡排序"></a>用递归实现冒泡排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用递归实现冒泡排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] array, <span class="type">int</span> lastIndex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 排序完成</span></span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 依次交换元素的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lastIndex; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">element1</span> <span class="operator">=</span> array[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">element2</span> <span class="operator">=</span> array[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (element1 &gt; element2) &#123;</span><br><span class="line">            <span class="comment">// 交换两个元素的位置</span></span><br><span class="line">            array[i] = element2;</span><br><span class="line">            array[i + <span class="number">1</span>] = element1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 排序未完成，递归排序</span></span><br><span class="line">    <span class="keyword">return</span> bubbleSort(array, lastIndex - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">521</span>, <span class="number">15</span>, <span class="number">45</span>, <span class="number">111</span>, <span class="number">96</span>, <span class="number">321</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] sortArray = bubbleSort(array, array.length - <span class="number">1</span>);</span><br><span class="line">Log.i(<span class="string">&quot;Haoxueren&quot;</span>, Arrays.toString(sortArray));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法考试</tag>
      </tags>
  </entry>
  <entry>
    <title>组管理和权限管理</title>
    <url>/2022/07/21/%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>Linux是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，必须向管理员申请一个账号，然后以这个账号的身份进入系统</p>
<p>对于每个文件有赐个概念 所有者 所在组 其他组            组是可以被改变的</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd3e6bc971d.png" alt="Untitled"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd3e71d6392.png" alt="Untitled"></p>
<h1 id="文件-x2F-目录的所有者"><a href="#文件-x2F-目录的所有者" class="headerlink" title="文件&#x2F;目录的所有者"></a>文件&#x2F;目录的所有者</h1><p>一般为文件的创建者，谁创建了该文件，就成为改文件的所有者</p>
<ul>
<li>查看所有者 ls -ahl   第一个是的</li>
<li>修改所有者 chown 用户名 文件名</li>
</ul>
<h1 id="组"><a href="#组" class="headerlink" title="组"></a>组</h1><ul>
<li>组的创建<ul>
<li>groupadd 组名</li>
</ul>
</li>
</ul>
<ul>
<li><p>修改文件&#x2F;目录所在的组</p>
<ul>
<li>chgrp 组名 文件名</li>
</ul>
</li>
<li><p>其他组</p>
<p>  除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</p>
</li>
<li><p>改变用户所在组</p>
<ul>
<li>usermod -g 新组名 用户名</li>
<li>改变用户所在组<ul>
<li>usermod -d 目录名 用户名 改变该用户登录的初始目录  注意：需要用户有进入到新目录的权限</li>
</ul>
</li>
</ul>
<h1 id="权限的基本介绍-rwx"><a href="#权限的基本介绍-rwx" class="headerlink" title="权限的基本介绍 rwx"></a>权限的基本介绍 rwx</h1><ul>
<li><p>r  可读  w  可写   x   可执行</p>
</li>
<li><p>作用到文件  注意文件的重命名权限</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/12/62cd3e775e6e8.png" alt="Untitled"></p>
</li>
<li><p>作用到目录</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/12/62cd3e7cbd7f4.png" alt="Untitled"></p>
</li>
<li><p>实例</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/12/62cd3e81ca30b.png" alt="Untitled"></p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/12/62cd3e8761da9.png" alt="Untitled"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Linux</tag>
        <tag>组管理和权限管理</tag>
      </tags>
  </entry>
  <entry>
    <title>美化</title>
    <url>/2022/07/21/%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><p>首先，换一个好看的壁纸，好看的壁纸就美化一半</p>
<p>全局主题：McMojave，不要选应用窗口元素的主题</p>
<p>gtk 也用mcm</p>
<h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><p>设置全局缩放大小为125%，发现132度才是最合适的缩放比例,但是登陆界面的字体设置还是过小,在sddm里使用同步kde的设置即可，字体大小设置成全局12</p>
<h2 id="安装新字体"><a href="#安装新字体" class="headerlink" title="安装新字体"></a>安装新字体</h2><p>查看已安装的字体</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fc-list | less</span><br></pre></td></tr></table></figure>

<p>搜索库里可用的字体</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -Ss ttf | less</span><br></pre></td></tr></table></figure>

<blockquote>
<p>less与more类似，可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页</p>
<p>fc-list 是查看系统可用的字体和样式的命令</p>
</blockquote>
<p>手动安装，复制字体到文件目录下面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/usr/share/fonts/TTF</span><br></pre></td></tr></table></figure>

<p>用pacman 安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S wqy-zenhei</span><br></pre></td></tr></table></figure>



<h2 id="获得屏幕显示dpi"><a href="#获得屏幕显示dpi" class="headerlink" title="获得屏幕显示dpi"></a>获得屏幕显示dpi</h2><p>xdpyinfo| grep resolution命令 </p>
<p>这个是屏幕会显示的dpi 例如 140*140</p>
<p>接着把缩放改成100%，字体dpi改成140（和上面命令相同的dpi）</p>
<p>这时候在把全局缩放改成相对应的大小，dpi也会自动修改，重启</p>
<h2 id="konsole美化"><a href="#konsole美化" class="headerlink" title="konsole美化"></a>konsole美化</h2><p>在konsole里面输入命令可以设置konsole</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">konsole --<span class="built_in">help</span></span><br><span class="line">konsole --show-menubar //显示菜单栏</span><br></pre></td></tr></table></figure>

<h2 id="google外观设置"><a href="#google外观设置" class="headerlink" title="google外观设置"></a>google外观设置</h2><p><img src="/%E7%BE%8E%E5%8C%96.assets/6267de8c99517.png" alt="Untitled"></p>
<h1 id="grub-主题"><a href="#grub-主题" class="headerlink" title="grub 主题"></a>grub 主题</h1><p><a href="https://www.pling.com/p/1526503">The Quintessential Quintuplets GRUB Theme</a></p>
<p>下载主题</p>
<p>进入到解压的文件目录，进入到！移动到对应位置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> . /usr/share/grub/themes/Distro -rf</span><br></pre></td></tr></table></figure>

<p>编辑 &#x2F;etc&#x2F;default&#x2F;grub，找到 #GRUB_THEME&#x3D; 一行，将前面的注释去掉，并指向主题的 theme.txt 文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#GRUB_THEME=</span></span><br><span class="line">GRUB_THEME=<span class="string">&quot;/usr/share/grub/themes/Distro/theme.txt&quot;</span> <span class="comment">#修改后</span></span><br></pre></td></tr></table></figure>

<p>更新grub</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<p>这个太亮了，换个不是那么亮的主题</p>
<p>更新，换成<a href="https://www.pling.com/p/1414997/">https://www.pling.com/p/1414997/</a></p>
<p>可以把自己的图片变成background的图片名称，然后放上去</p>
<p>我选的是那个比较暗的苹果主题</p>
<p>这个的可玩性还是挺高的，可以该这个文件夹里面的txt选择想要的字体大小等等，</p>
<p>字体尽量用文件夹里面有的，没有的找windows里面的字体拖进去</p>
<h2 id="特殊软件"><a href="#特殊软件" class="headerlink" title="特殊软件"></a>特殊软件</h2><p>konsole </p>
<p>设置里面改字体大小</p>
<p>chrome 设置自定义字体</p>
<p><img src="/%E7%BE%8E%E5%8C%96.assets/6267de9266d4e.png" alt="Untitled"></p>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><h2 id="安装-Windows-字体"><a href="#安装-Windows-字体" class="headerlink" title="安装 Windows 字体"></a>安装 Windows 字体</h2><p>Windows 字体不仅日常可能会使用到，还可以让部分需要这些字体的应用（如 Wine）显示字体不会乱码。</p>
<p>建立存放windows字体的文件夹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /usr/share/fonts/WindowsFonts</span><br></pre></td></tr></table></figure>

<p>将字体复制到建立的文件夹并设置权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/C:/Windows/Fonts <span class="comment"># 或者通过 Dolphin 在此文件夹下右键 &gt; 点击 打开终端</span></span><br><span class="line">sudo <span class="built_in">cp</span> ./* /usr/share/fonts/WindowsFonts</span><br><span class="line">sudo <span class="built_in">chmod</span> 755 /usr/share/fonts/WindowsFonts/* <span class="comment"># 设置合理的权限</span></span><br></pre></td></tr></table></figure>

<p>刷新字体 在对应的文件夹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fc-cache -vf <span class="comment"># -v：显示过程</span></span><br></pre></td></tr></table></figure>

<h1 id="vs-code-终端设置"><a href="#vs-code-终端设置" class="headerlink" title="vs code 终端设置"></a>vs code 终端设置</h1><h2 id="解决字体太小的问题"><a href="#解决字体太小的问题" class="headerlink" title="解决字体太小的问题"></a>解决字体太小的问题</h2><p>把终端里面的gpu加速关了</p>
<p><img src="/%E7%BE%8E%E5%8C%96.assets/image-20220516203302747.png" alt="image-20220516203302747"></p>
<p>因为我的电脑把独显给关了，选择不同的字号大小还是没有用的</p>
<p>终端的字号设置成15</p>
<h2 id="终端皮肤设置"><a href="#终端皮肤设置" class="headerlink" title="终端皮肤设置"></a>终端皮肤设置</h2><p>搜索workbench</p>
<p>选择第二个在setting.json中编辑，添加一个key&#x2F;value</p>
<p><img src="/%E7%BE%8E%E5%8C%96.assets/image-20220516205834634.png" alt="image-20220516205834634"></p>
<p>在这个地址选择不同的终端皮肤</p>
<p><a href="https://glitchbone.github.io/vscode-base16-term/#/unikitty-light">https://glitchbone.github.io/vscode-base16-term/#/unikitty-light</a></p>
<h2 id="下载支持omz箭头的Meslo-LG-M-Regular-for-Powerline字体"><a href="#下载支持omz箭头的Meslo-LG-M-Regular-for-Powerline字体" class="headerlink" title="下载支持omz箭头的Meslo LG M Regular for Powerline字体"></a>下载支持omz箭头的Meslo LG M Regular for Powerline字体</h2><p>omz支持的字体的下载地址</p>
<p><a href="https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf">https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf</a></p>
<p><a href="https://github.com/powerline/fonts">https://github.com/powerline/fonts</a></p>
<p>在设置里面搜索setting.json</p>
<p>我的配置文件是这样的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.autoSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;afterDelay&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.quickSuggestions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//开启自动显示建议</span></span><br><span class="line">        <span class="attr">&quot;other&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;strings&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;security.workspace.trust.untrustedFiles&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;material-icon-theme&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;less.compile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;out&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../css/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.linkedEditing&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tiny Light&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.options.tabSize&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">160</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;javascript.updateImportsOnFileMove.enabled&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDelete&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;line&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontWeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;normal&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.gpuAcceleration&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// &quot;terminal.integrated.shell.osx&quot;: &quot;zsh&quot;,</span></span><br><span class="line">    <span class="attr">&quot;workbench.colorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;terminal.background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FEFBEC&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#6E6B5E&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminalCursor.background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#6E6B5E&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminalCursor.foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#6E6B5E&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FEFBEC&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#6684E1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#999580&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#6684E1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#1FAD83&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#60AC39&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightMagenta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#B854D4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D73737&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#20201D&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#AE9513&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#1FAD83&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#60AC39&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiMagenta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#B854D4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#D73737&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#6E6B5E&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#AE9513&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;Source Code Pro&#x27;,&#x27;Meslo LG M for Powerline&#x27;,&#x27;Droid Sans Mono&#x27;,&#x27;Meslo LG M for Powerline&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;Source Code Pro&#x27;,&#x27;Meslo LG M for Powerline&#x27;,&#x27;Droid Sans Mono&#x27;, &#x27;monospace&#x27;, monospace&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.explorerKind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>网页特效</title>
    <url>/2022/07/21/%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<h1 id="元素偏移量-offset"><a href="#元素偏移量-offset" class="headerlink" title="元素偏移量 offset"></a>元素偏移量 offset</h1><h2 id="offset-概述"><a href="#offset-概述" class="headerlink" title="offset 概述"></a>offset 概述</h2><p>offset 翻译过来就是偏移量， 我们使用 offset系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p>
<ol>
<li><p>获得元素相对于<strong>父元素</strong>的位置 （父元素有定位才可以）</p>
</li>
<li><p>获得元素自身的大小（宽度高度）</p>
</li>
<li><p>注意：返回的数值都不带单位</p>
</li>
<li><p>如果元素发生了变化，返回的数值也会动态变化</p>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e9df6afe08.png" alt="图片1"></p>
<blockquote>
<p>offsetParent和parentNode</p>
<p>offsetParent返回的是带有定位的父亲，parentNode返回的是最近一级的父亲</p>
</blockquote>
<p>offsetWidth,offsetHeight 计算的时候都是包含padding,border,width 的（就是正常的盒子模型的计算）</p>
</li>
</ol>
<p><img src="https://tu.sunning.fit/i/2022/05/01/626e9df9dfe80.png" alt="图片2"></p>
<h2 id="offset-与-style-区别"><a href="#offset-与-style-区别" class="headerlink" title="offset 与 style 区别"></a>offset 与 style 区别</h2><h3 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h3><ul>
<li>offset 可以得到任意样式表中的样式值</li>
<li>offset 系列获得的数值是没有单位的</li>
<li>offsetWidth 包含padding+border+width</li>
<li>offsetWidth 等属性是只读属性，只能获取不能赋值</li>
</ul>
<blockquote>
<p> 如果想要获取元素大小位置，用offset更合适</p>
</blockquote>
<h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><ul>
<li>style 只能得到行内样式表中的样式值</li>
</ul>
<blockquote>
<p>行内样式表：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span> style=<span class="string">&quot;width:200px&quot;</span>&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>只能获得这里面的style属性</p>
<p>多个行内样式用;进行链接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">style=<span class="string">&quot;width:200px;height:300px;background-color: aliceblue;&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>style.width 获得的是带有单位的字符串</p>
</li>
<li><p>style.width 获得不包含padding和border 的值</p>
</li>
<li><p>style.width 是可读写属性，可以获取也可以赋值</p>
</li>
</ul>
<blockquote>
<p>想要给元素更改值，则需要用style改变</p>
</blockquote>
<p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="案例：获取鼠标在盒子内的坐标"><a href="#案例：获取鼠标在盒子内的坐标" class="headerlink" title="案例：获取鼠标在盒子内的坐标"></a>案例：获取鼠标在盒子内的坐标</h3><ol>
<li>我们在盒子内点击，想要得到鼠标距离盒子左右的距离。</li>
<li>首先得到鼠标在页面中的坐标（e.pageX, e.pageY）</li>
<li>其次得到盒子在页面中的距离 ( box.offsetLeft, box.offsetTop)——如果盒子的父亲在页面中有定位，那用鼠标的offsetLeft-盒子的offsetLeft就能得到坐标的差了</li>
<li>用鼠标距离页面的坐标减去盒子在页面中的距离，得到 鼠标在盒子内的坐标</li>
<li>如果想要移动一下鼠标，就要获取最新的坐标，使用鼠标移动</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> x = e.<span class="property">pageX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span><br><span class="line"><span class="keyword">var</span> y = e.<span class="property">pageY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;x坐标是&#x27;</span> + x + <span class="string">&#x27; y坐标是&#x27;</span> + y;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="案例：模态框拖拽"><a href="#案例：模态框拖拽" class="headerlink" title="案例：模态框拖拽"></a>案例：模态框拖拽</h3><p>弹出框，也称为模态框。</p>
<p>​	1.点击弹出层，会弹出模态框， 并且显示灰色半透明的遮挡层。</p>
<p>​	2.点击关闭按钮，可以关闭模态框，并且同时关闭灰色半透明遮挡层。</p>
<p>​	3.鼠标放到模态框最上面一行，可以按住鼠标拖拽模态框在页面中移动。</p>
<p>​	4.鼠标松开，可以停止拖动模态框移动</p>
<p><strong>案例分析:</strong></p>
<ol>
<li>点击弹出层， 模态框和遮挡层就会显示出来 display:block;</li>
<li>点击关闭按钮，模态框和遮挡层就会隐藏起来 display:none;</li>
<li>在页面中拖拽的原理：<strong>鼠标按下并且移动， 之后松开鼠标</strong></li>
<li>触发事件是鼠标按下mousedown，鼠标移动mousemove 鼠标松开 mouseup</li>
<li>鼠标在hover上面的时候会有拖动的鼠标指针变化：css里面的hover里面写即可</li>
<li>拖拽过程:  鼠标移动过程中，获得最新的值赋值给模态框的left和top值，这样模态框可以跟着鼠标走了</li>
<li>鼠标按下触发的事件源是最上面一行，就是  id 为 title </li>
<li>鼠标的坐标减去 鼠标在盒子内的坐标， 才是模态框真正的位置。</li>
<li>鼠标按下，我们要得到鼠标在盒子的坐标。</li>
<li>鼠标移动，就让模态框的坐标  设置为  ：鼠标坐标 减去盒子坐标即可，<strong>注意移动事件写到按下事件里面</strong>。</li>
<li>鼠标松开，就停止拖拽，就是可以让鼠标移动事件解除</li>
</ol>
<p>  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取元素</span></span><br><span class="line">       <span class="keyword">var</span> login = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.login&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> mask = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.login-bg&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#link&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> closeBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#closeBtn&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> title = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#title&#x27;</span>);</span><br><span class="line">       <span class="comment">// 2. 点击弹出层这个链接 link  让mask 和login 显示出来</span></span><br><span class="line">       link.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">               login.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="comment">// 3. 点击 closeBtn 就隐藏 mask 和 login </span></span><br><span class="line">       closeBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">               login.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="comment">// 4. 开始拖拽</span></span><br><span class="line">           <span class="comment">// (1) 当我们鼠标按下， 就获得鼠标在盒子内的坐标</span></span><br><span class="line">       title.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> x = e.<span class="property">pageX</span> - login.<span class="property">offsetLeft</span>;</span><br><span class="line">           <span class="keyword">var</span> y = e.<span class="property">pageY</span> - login.<span class="property">offsetTop</span>;</span><br><span class="line">           <span class="comment">// (2) 鼠标移动的时候，把鼠标在页面中的坐标，减去 鼠标在盒子内的坐标就是模态框的left和top值</span></span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, move)</span><br><span class="line"></span><br><span class="line">           <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">e</span>) &#123;</span><br><span class="line">               login.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - x + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">               login.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - y + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span></span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, move);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="案例：仿京东放大镜"><a href="#案例：仿京东放大镜" class="headerlink" title="案例：仿京东放大镜"></a>案例：仿京东放大镜</h3><ol>
<li>整个案例可以分为三个功能模块</li>
<li>鼠标经过小图片盒子， 黄色的遮挡层 和 大图片盒子显示，离开隐藏2个盒子功能</li>
<li>黄色的遮挡层跟随鼠标功能。 </li>
<li>移动黄色遮挡层，大图片跟随移动功能。</li>
</ol>
<p><strong>案例分析:</strong></p>
<ol>
<li>黄色的遮挡层跟随鼠标功能。</li>
<li>把鼠标坐标给遮挡层不合适。因为遮挡层坐标以父盒子为准。</li>
<li>放大镜盒子是以外面的大盒子为定位，所以鼠标给的应该是鼠标相对于外面大盒子的距离</li>
<li>首先是获得鼠标在盒子的坐标。 </li>
<li>之后把数值给遮挡层做为left 和top值。</li>
<li>此时用到鼠标移动事件，但是还是在小图片盒子内移动。</li>
<li>发现，遮挡层位置不对，需要再减去盒子自身高度和宽度的一半。</li>
<li>遮挡层不能超出小图片盒子范围。</li>
<li><strong>如果小于零，就把坐标设置为0</strong></li>
<li><strong>如果大于遮挡层最大的移动距离，就把坐标设置为最大的移动距离</strong></li>
<li>遮挡层的最大移动距离：小图片盒子宽度 减去 遮挡层盒子宽度</li>
<li>右侧放大镜效果不是在框里面的东西放大了，而是右侧本身就有一个大图片，通过调整背景显示不同的地方（因为大小图不一样，所以要移动相应的比例）</li>
<li>记得移动大图的时候要给大图定位，然后才能移动</li>
<li>大图的移动方向和鼠标的方向是相反的</li>
<li><img src="https://tu.sunning.fit/i/2022/05/02/626f46b2857e1.png" alt="image-20220502104918737"></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> preview_img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.preview_img&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> mask = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.mask&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> big = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.big&#x27;</span>);</span><br><span class="line">    <span class="comment">// 1. 当我们鼠标经过 preview_img 就显示和隐藏 mask 遮挡层 和 big 大盒子</span></span><br><span class="line">    preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        big.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">            big.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 2. 鼠标移动的时候，让黄色的盒子跟着鼠标来走</span></span><br><span class="line">    preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">// (1). 先计算出鼠标在盒子内的坐标</span></span><br><span class="line">        <span class="keyword">var</span> x = e.<span class="property">pageX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span><br><span class="line">        <span class="keyword">var</span> y = e.<span class="property">pageY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span><br><span class="line">        <span class="comment">// console.log(x, y);</span></span><br><span class="line">        <span class="comment">// (2) 减去盒子高度 300的一半 是 150 就是我们mask 的最终 left 和top值了</span></span><br><span class="line">        <span class="comment">// (3) 我们mask 移动的距离</span></span><br><span class="line">        <span class="keyword">var</span> maskX = x - mask.<span class="property">offsetWidth</span> / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> maskY = y - mask.<span class="property">offsetHeight</span> / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// (4) 如果x 坐标小于了0 就让他停在0 的位置</span></span><br><span class="line">        <span class="comment">// 遮挡层的最大移动距离</span></span><br><span class="line">        <span class="keyword">var</span> maskMax = preview_img.<span class="property">offsetWidth</span> - mask.<span class="property">offsetWidth</span>;</span><br><span class="line">        <span class="keyword">if</span> (maskX &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            maskX = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskX &gt;= maskMax) &#123;</span><br><span class="line">            maskX = maskMax;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maskY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            maskY = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskY &gt;= maskMax) &#123;</span><br><span class="line">            maskY = maskMax;</span><br><span class="line">        &#125;</span><br><span class="line">        mask.<span class="property">style</span>.<span class="property">left</span> = maskX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        mask.<span class="property">style</span>.<span class="property">top</span> = maskY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="comment">// 3. 大图片的移动距离 = 遮挡层移动距离 * 大图片最大移动距离 / 遮挡层的最大移动距离</span></span><br><span class="line">        <span class="comment">// 大图</span></span><br><span class="line">        <span class="keyword">var</span> bigIMg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.bigImg&#x27;</span>);</span><br><span class="line">        <span class="comment">// 大图片最大移动距离</span></span><br><span class="line">        <span class="keyword">var</span> bigMax = bigIMg.<span class="property">offsetWidth</span> - big.<span class="property">offsetWidth</span>;</span><br><span class="line">        <span class="comment">// 大图片的移动距离 X Y</span></span><br><span class="line">        <span class="keyword">var</span> bigX = maskX * bigMax / maskMax;</span><br><span class="line">        <span class="keyword">var</span> bigY = maskY * bigMax / maskMax;</span><br><span class="line">        bigIMg.<span class="property">style</span>.<span class="property">left</span> = -bigX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        bigIMg.<span class="property">style</span>.<span class="property">top</span> = -bigY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="元素可视区-client"><a href="#元素可视区-client" class="headerlink" title="元素可视区 client"></a>元素可视区 client</h1><h2 id="client概述"><a href="#client概述" class="headerlink" title="client概述"></a>client概述</h2><p>client 翻译过来就是客户端，我们使用 client 系列的相关属性来获取元素可视区的相关信息。通过 client<br>系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</p>
<p><img src="https://tu.sunning.fit/i/2022/05/02/626f46f168074.png" alt="图片3"></p>
<p><img src="https://tu.sunning.fit/i/2022/05/02/626f46f45ed37.png" alt="图片4"></p>
<h2 id="淘宝-flexible-js-源码分析"><a href="#淘宝-flexible-js-源码分析" class="headerlink" title="淘宝 flexible.js 源码分析"></a>淘宝 flexible.js 源码分析</h2><blockquote>
<p><strong>立即执行函数</strong>——不需要调用，立马能够自己执行的函数</p>
<p><strong>写法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>[可以有可以没有的函数名字]()&#123;&#125;)()   或者 (<span class="keyword">function</span>[可以有可以没有的函数名字]()&#123;&#125;())</span><br></pre></td></tr></table></figure>

<p>function(){} 是常规函数声明，现在就是用个括号把函数包裹起来， 然后再加上个 （） 表示调用了</p>
<p>（ 书写的时候先写最外面的小括号</p>
<p>如果立即执行函数有多个，在每个立即执行函数之间用 ; 号隔开</p>
<p><strong>作用</strong></p>
<p>创建了一个独立的作用域，里面所有的变量都是局部变量，避免了命名冲突的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line">    <span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>);   <span class="comment">//这里这个小括号相当于调用函数</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line">    <span class="keyword">var</span> num=<span class="number">10</span>;  <span class="comment">//局部变量，这里的num和上面的num不会有命名冲突的问题</span></span><br><span class="line">&#125;)(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>



<p>下面的手淘flexiblejs的立即执行函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">flexible</span>(<span class="params"><span class="variable language_">window</span>,<span class="variable language_">document</span></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;(<span class="variable language_">window</span>,<span class="variable language_">document</span>)) </span><br><span class="line"><span class="comment">//只要调用立即就能执行</span></span><br><span class="line"><span class="comment">//独立的作用域，里面的变量都是局部变量，不会有命名冲突的问题</span></span><br></pre></td></tr></table></figure>

<p>2</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">flexible</span>(<span class="params"><span class="variable language_">window</span>, <span class="variable language_">document</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取的html 的根元素，因为rem主要是由html的字体大小设置的</span></span><br><span class="line">    <span class="keyword">var</span> docEl = <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line">        <span class="comment">// dpr 物理像素比   如果window.devicePixelRatio能活得到，就是对应的，如果拿不到，就当作1</span></span><br><span class="line">    <span class="keyword">var</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// adjust body font size  设置我们body 的字体大小</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setBodyFontSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 如果页面中有body 这个元素 就设置body的字体大小</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">body</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontSize</span> = (<span class="number">12</span> * dpr) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果页面中没有body 这个元素，则等着 我们页面主要的DOM元素加载完毕再去设置body</span></span><br><span class="line">            <span class="comment">// 的字体大小</span></span><br><span class="line">            <span class="comment">//为什么会没有body这个元素：是因为可能在html的开头就载入了这个文件，而不是在html的末尾载入了这个文件</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, setBodyFontSize)</span><br><span class="line">        &#125;           a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setBodyFontSize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//rem就是由这个决定的</span></span><br><span class="line">    <span class="comment">// set 1rem = viewWidth / 10    设置我们html 元素的文字大小</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setRemUnit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> rem = docEl.<span class="property">clientWidth</span> / <span class="number">10</span></span><br><span class="line">        docEl.<span class="property">style</span>.<span class="property">fontSize</span> = rem + <span class="string">&#x27;px&#x27;</span>  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setRemUnit</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reset rem unit on page resize  当我们页面尺寸大小发生变化的时候，要重新设置下rem 的大小</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, setRemUnit)</span><br><span class="line">        <span class="comment">// pageshow 是我们重新加载页面触发的事件</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pageshow&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">// e.persisted 返回的是true 就是说如果这个页面是从缓存取过来的页面，也需要从新计算一下rem 的大小</span></span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">persisted</span>) &#123;</span><br><span class="line">            <span class="title function_">setRemUnit</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// detect 0.5px supports  有些移动端的浏览器不支持0.5像素的写法</span></span><br><span class="line">    <span class="keyword">if</span> (dpr &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> fakeBody = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">        <span class="keyword">var</span> testElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        testElement.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;.5px solid transparent&#x27;</span></span><br><span class="line">        fakeBody.<span class="title function_">appendChild</span>(testElement)</span><br><span class="line">        docEl.<span class="title function_">appendChild</span>(fakeBody)</span><br><span class="line">        <span class="keyword">if</span> (testElement.<span class="property">offsetHeight</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            docEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hairlines&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        docEl.<span class="title function_">removeChild</span>(fakeBody)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="variable language_">window</span>, <span class="variable language_">document</span>))</span><br></pre></td></tr></table></figure>





<blockquote>
<p><strong>关于为什么上面用pageshow而不用load</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pageshow&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">       <span class="comment">// e.persisted 返回的是true 就是说如果这个页面是从缓存取过来的页面，也需要从新计算一下rem 的大小</span></span><br><span class="line">       <span class="keyword">if</span> (e.<span class="property">persisted</span>) &#123;</span><br><span class="line">           <span class="title function_">setRemUnit</span>()</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>下面三种情况都会刷新页面都会触发 load 事件:</p>
<p>1.a标签的超链接</p>
<p>2.F5或者刷新按钮（强制刷新）</p>
<p>3.前进后退按钮</p>
<p>但是 火狐中，有个特点，有个“往返缓存”，这个缓存中不仅保存着页面数据，还保存了DOM和JavaScript的状态；实际上是将整个页面都保存在了内存里。</p>
<p>所以此时后退按钮不能刷新页面。</p>
<p>此时可以使用 pageshow事件来触发。，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面中，pageshow会在load事件触发后触发；根据事件对象中的persisted来判断是否是缓存中的页面触发的pageshow事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">e.<span class="property">persisted</span>  判断是否来自缓存，如果来自缓存，就返回<span class="literal">true</span>否则返回<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><code>注意这个事件给window添加。</code></p>
</blockquote>
<h1 id="元素滚动scroll"><a href="#元素滚动scroll" class="headerlink" title="元素滚动scroll"></a>元素滚动scroll</h1><h2 id="scroll-概述"><a href="#scroll-概述" class="headerlink" title="scroll 概述"></a>scroll 概述</h2><p>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</p>
<p><img src="https://tu.sunning.fit/i/2022/05/02/626f9b5c1668a.png" alt="图片5"></p>
<p>如果是求页面被卷去的部分，用window.pageYOffset</p>
<p><img src="https://tu.sunning.fit/i/2022/05/02/626f9b5fe3ca2.png" alt="图片6"></p>
<p>从边框的下面到最上面的那部分距离是<strong>scrollTop</strong></p>
<p>如果刚开始没有下拉，那scrollTop是0,随着向下拉scrollTop会逐步增加</p>
<h2 id="页面被卷去的头部"><a href="#页面被卷去的头部" class="headerlink" title="页面被卷去的头部"></a>页面被卷去的头部</h2><p>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll事件。</p>
<h2 id="案例：仿淘宝固定右侧侧边栏"><a href="#案例：仿淘宝固定右侧侧边栏" class="headerlink" title="案例：仿淘宝固定右侧侧边栏"></a>案例：仿淘宝固定右侧侧边栏</h2><ol>
<li>原先侧边栏是绝对定位</li>
<li>当页面滚动到一定位置，侧边栏改为固定定位</li>
<li>页面继续滚动，会让 返回顶部显示出来</li>
</ol>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析:"></a>案例分析:</h3><ol>
<li>需要用到页面滚动事件 scroll  因为是页面滚动，所以事件源是document</li>
<li>滚动到某个位置，就是判断页面被卷去的上部值。</li>
<li>页面被卷去的头部：可以通过window.pageYOffset 获得  如果是被卷去的左侧window.pageXOffset</li>
<li>注意，元素被卷去的头部是element.scrollTop  , 如果是页面被卷去的头部 则是 window.pageYOffset</li>
<li>其实这个值 可以通过盒子的 offsetTop可以得到，如果大于等于这个值，就可以让盒子固定定位了</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 获取元素</span></span><br><span class="line">      <span class="keyword">var</span> sliderbar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-bar&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> banner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.banner&#x27;</span>);</span><br><span class="line">      <span class="comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面（这个页面选用的是banner元素的高度）</span></span><br><span class="line">      <span class="keyword">var</span> bannerTop = banner.<span class="property">offsetTop</span></span><br><span class="line">          <span class="comment">// 当我们侧边栏固定定位之后应该变化的数值</span></span><br><span class="line">      <span class="keyword">var</span> sliderbarTop = sliderbar.<span class="property">offsetTop</span> - bannerTop;</span><br><span class="line">      <span class="comment">// 获取main 主体元素</span></span><br><span class="line">      <span class="keyword">var</span> main = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.main&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> goBack = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goBack&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> mainTop = main.<span class="property">offsetTop</span>;</span><br><span class="line">      <span class="comment">// 2. 页面滚动事件 scroll</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// console.log(11);</span></span><br><span class="line">          <span class="comment">// window.pageYOffset 页面被卷去的头部</span></span><br><span class="line">          <span class="comment">// console.log(window.pageYOffset);</span></span><br><span class="line">          <span class="comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= bannerTop) &#123;</span><br><span class="line">              sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span>;</span><br><span class="line">              sliderbar.<span class="property">style</span>.<span class="property">top</span> = sliderbarTop + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;  <span class="comment">//如果又滚动上去了，接着改成相对定位</span></span><br><span class="line">              sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">              sliderbar.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;300px&#x27;</span>;  <span class="comment">//这个是原先保留的定位的top值</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= mainTop) &#123;</span><br><span class="line">              goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="页面被卷去的头部兼容性解决方案"><a href="#页面被卷去的头部兼容性解决方案" class="headerlink" title="页面被卷去的头部兼容性解决方案"></a>页面被卷去的头部兼容性解决方案</h2><p>需要注意的是，页面被卷去的头部，有兼容性问题，因此被卷去的头部通常有如下几种写法：</p>
<ol>
<li><p>声明了 DTD，使用 document.documentElement.scrollTop</p>
</li>
<li><p>未声明 DTD，使用  document.body.scrollTop</p>
</li>
<li><p>新方法 window.pageYOffset和 window.pageXOffset，IE9 开始支持</p>
</li>
</ol>
<blockquote>
<p>声明DTD指的是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">left</span>: <span class="variable language_">window</span>.<span class="property">pageXOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span>||<span class="number">0</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line"> &#125; </span><br><span class="line">使用的时候  <span class="title function_">getScroll</span>().<span class="property">left</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="三大系列总结"><a href="#三大系列总结" class="headerlink" title="三大系列总结"></a>三大系列总结</h1><p><img src="https://tu.sunning.fit/i/2022/05/02/626f9fef15133.png" alt="图片7"></p>
<p>他们主要用法：</p>
<p>1.offset系列 经常用于获得元素位置    offsetLeft  offsetTop</p>
<p>2.client经常用于获取元素大小  clientWidth clientHeight</p>
<p>3.scroll 经常用于获取滚动距离 scrollTop  scrollLeft  </p>
<p>4.注意页面滚动的距离通过 window.pageXOffset  获得</p>
<h1 id="mouseenter-和mouseover的区别"><a href="#mouseenter-和mouseover的区别" class="headerlink" title="mouseenter 和mouseover的区别"></a>mouseenter 和mouseover的区别</h1><ul>
<li>当鼠标移动到元素上时就会触发mouseenter 事件</li>
<li>类似 mouseover，它们两者之间的差别是</li>
<li><strong>mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发。mouseenter  只会经过自身盒子触发</strong></li>
<li>之所以这样，就是因为mouseenter<strong>不会冒泡</strong></li>
<li>跟mouseenter<strong>搭配鼠标离开</strong> mouseleave  同样不会冒泡</li>
</ul>
<h1 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h1><h2 id="动画实现原理"><a href="#动画实现原理" class="headerlink" title="动画实现原理"></a>动画实现原理</h2><blockquote>
<p>核心原理：通过定时器 setInterval() 不断移动盒子位置。</p>
</blockquote>
<p>实现步骤：</p>
<ol>
<li>获得盒子当前位置</li>
<li>让盒子在当前位置加上1个移动距离</li>
<li>利用定时器不断重复这个操作</li>
<li>加一个结束定时器的条件</li>
<li>注意此元素需要<strong>添加定位</strong>，才能使用element.style.left </li>
<li><strong>别忘了定位，别忘了定位，别忘了定位</strong></li>
</ol>
<p>例子：div移动</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动画原理</span></span><br><span class="line">       <span class="comment">// 1. 获得盒子当前位置  </span></span><br><span class="line">       <span class="comment">// 2. 让盒子在当前位置加上1个移动距离</span></span><br><span class="line">       <span class="comment">// 3. 利用定时器不断重复这个操作</span></span><br><span class="line">       <span class="comment">// 4. 加一个结束定时器的条件</span></span><br><span class="line">       <span class="comment">// 5. 注意此元素需要添加定位， 才能使用element.style.left</span></span><br><span class="line">       <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (div.<span class="property">offsetLeft</span> &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">               <span class="comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">               <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">           &#125;</span><br><span class="line">           div.<span class="property">style</span>.<span class="property">left</span> = div.<span class="property">offsetLeft</span> + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">           <span class="comment">//获取用offsetLeft,赋值用style.left</span></span><br><span class="line">       &#125;, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<h2 id="动画函数给不同元素记录不同定时器"><a href="#动画函数给不同元素记录不同定时器" class="headerlink" title="动画函数给不同元素记录不同定时器"></a>动画函数给不同元素记录不同定时器</h2><p>如果多个元素都使用这个动画函数，每次都要var 声明定时器。我们可以给不同的元素使用不同的定时器（自己专门用自己的定时器）。</p>
<p>只要有var就会在内存里面开辟一个空间，如果多个元素（对象）使用动画，则会开辟多个空间</p>
<p><img src="https://tu.sunning.fit/i/2022/05/02/626fa401e05d1.png" alt="image-20220502172726663"></p>
<p>可以用下面这种方法给对象添加一个属性，把函数放进去，这样有俩个好处，一个是不用在obj里面开辟空间了，添加一个属性即可，另一个是动画都不叫同一个timer名字了，更方便区分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">obj.<span class="property">name</span>=<span class="string">&#x27;andy&#x27;</span>;   <span class="comment">//添加属性的写法</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>核心原理：利用 JS 是一门动态语言，可以很方便的给当前对象添加属性。</p>
</blockquote>
<blockquote>
<p>一个bug：</p>
<p>如果变成点击按钮进行移动，随着不断点击按钮，速度会越来越快，因为没点击一次，都相当于开启一个新的定时器，解决办法，只有一个定时器可以执行（把之前的计时器清楚即可）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target</span>) &#123;</span><br><span class="line">            <span class="comment">// 当我们不断的点击按钮，这个元素的速度会越来越快，因为开启了太多的定时器</span></span><br><span class="line">            <span class="comment">// 解决方案就是 让我们元素只有一个定时器执行</span></span><br><span class="line">            <span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">            obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> &gt;= target) &#123;</span><br><span class="line">                    <span class="comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">                    <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            &#125;, <span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">animate</span>(div,<span class="number">300</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>网页特效</tag>
      </tags>
  </entry>
  <entry>
    <title>自行车</title>
    <url>/2022/07/21/%E8%87%AA%E8%A1%8C%E8%BD%A6/</url>
    <content><![CDATA[<h1 id="车架的整体"><a href="#车架的整体" class="headerlink" title="车架的整体"></a>车架的整体</h1><ul>
<li><p>轮组</p>
<p>  外胎</p>
<p>  内胎</p>
<p>  车圈</p>
<p>  花鼓</p>
<p>  辐条</p>
</li>
<li><p>传动系统</p>
<p>  曲柄</p>
<p>  脚踏</p>
<p>  前牙盘</p>
<p>  链条</p>
<p>  后飞轮</p>
<p>  后变速器</p>
</li>
<li><p>刹车系统</p>
<p>  制手</p>
<p>  油管</p>
<p>  夹器</p>
<ul>
<li><p>碟刹</p>
<p>  需要干净，手不要触碰碟片，可能会有油脂占在上面</p>
<p>  当心城市的地沟油路面</p>
<p>  水和泥的影响倒不大</p>
</li>
</ul>
</li>
<li><p>车架</p>
<p>  把横</p>
<p>  把立</p>
<p>  前叉</p>
<p>  车架</p>
</li>
</ul>
<h1 id="变速"><a href="#变速" class="headerlink" title="变速"></a>变速</h1><ul>
<li><p>基础了解</p>
<p>  变速器，在骑行的过程中变速，不要直接变速</p>
<p>  变速的时候要慢慢变速，不能太急</p>
<p>  不要在骑行过程中猛地加速减速</p>
<p>  骑行过程中一定不要倒链条</p>
<p>  路况改变提前变速，踩踏更轻松</p>
<p>  不要被换档束缚住，怎么舒服怎么选择档位，根据路况和力气选择档位、</p>
</li>
<li><p>变速调整</p>
<ul>
<li>前变速（左手 少的那个）<ul>
<li><p>什么时候调整</p>
<p>  上去的时候不方便上去或者下去的时候不方便下去，有杂音</p>
</li>
<li><p>调整方式</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/13/62ce8d797e030.png" alt="Untitled"></p>
</li>
<li></li>
</ul>
</li>
<li>后变速 （右手 多的那个）<ul>
<li><p>什么时候需要变速</p>
<p>  链条发出咯咯声音</p>
<p>  变速迟缓（上去和下去的速度是不一样的）</p>
</li>
<li><p>调整</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/13/62ce8d81e5ad6.png" alt="Untitled"></p>
<p>  黄色的线要在正下方</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/13/62ce8d87dbb5b.png" alt="Untitled"></p>
<p>  逆时针向里面移动，反之同理</p>
</li>
<li><p>原理</p>
<p>  变速线是在拉线</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/13/62ce8d8e54395.png" alt="Untitled"></p>
<p>  随着线一点一点被拉紧，来改变变速</p>
<p>  有时候线会变松，这个时候就需要把线拉紧，也就是拧动旋钮的作用</p>
</li>
<li><p>变速器不准的另一个原因是勾爪歪了</p>
<p>  推荐去店里面去修</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/13/62ce8d8ae2961.png" alt="Untitled"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>避震系统</p>
<p>  少磕碰，可能会有漏油漏气的现象</p>
</li>
<li><p>Tips</p>
<p>  螺丝 骑行一段时间后会有金属疲劳，骑一阵子就要看经轮子</p>
<p>  中轴和脚踏</p>
<p>  车头的中间</p>
<p>  辐条</p>
<h1 id="自行车的停车方式"><a href="#自行车的停车方式" class="headerlink" title="自行车的停车方式"></a>自行车的停车方式</h1><p>  地如果是平的，直接车把向着地面放下去即可</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/13/62ce8d9785f9e.png" alt="Untitled"></p>
<p>  注意其他的时候不要碰到变速器和碟片</p>
<p>  手不要拉到油管</p>
<p>  推行方式</p>
<p>  <img src="https://tu.sunning.fit/i/2022/07/13/62ce8d9a08057.png" alt="Untitled"></p>
</li>
<li><p>上车前的准备</p>
<p>  手</p>
<p>  把住把套的最外沿</p>
<p>  一只手指捏刹车</p>
<p>  屁股</p>
<p>  车坐的高度，站直屁股和座位有二个或三个指头的高度</p>
<p>  脚</p>
<p>  脚一定要前脚掌踩脚踏</p>
<p>  这样踩踏和缓冲更好</p>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>范型</title>
    <url>/2022/07/21/%E8%8C%83%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="什么是泛型，为什么用泛型"><a href="#什么是泛型，为什么用泛型" class="headerlink" title="什么是泛型，为什么用泛型"></a>什么是泛型，为什么用泛型</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢</span><br><span class="line"></span><br><span class="line">泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，</span><br><span class="line"></span><br><span class="line">操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法</span><br></pre></td></tr></table></figure>

<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>泛型只在编译阶段有效，</p>
<p>在编译之后程序会采取去泛型化的措施。也就是说Java中的泛型，只在编译阶段有效。在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。也就是说，泛型信息不会进入到运行时阶段。</p>
<p>对此总结成一句话：泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</p>
<h1 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h1><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>范型</tag>
      </tags>
  </entry>
  <entry>
    <title>虚方法 隐藏方法 抽象类 接口</title>
    <url>/2022/07/21/%E8%99%9A%E6%96%B9%E6%B3%95%20%E9%9A%90%E8%97%8F%E6%96%B9%E6%B3%95%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%20%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="虚方法-隐藏方法-抽象类-接口"><a href="#虚方法-隐藏方法-抽象类-接口" class="headerlink" title="虚方法 隐藏方法 抽象类 接口"></a>虚方法 隐藏方法 抽象类 接口</h1><p>2021年1月20日<br>7:11<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd879db8d67.png" alt="image1"><br>虚方法：子类定义，但是父类还存在，父类用父类的虚方法，多个子类用各自的虚方法，父类的方法在子类里面被覆盖掉了<br>隐藏方法：和虚方法的作用差不多，但是父类的方法在子类里没有被覆盖掉<br>抽象类：是一个不完整的模板，用之前要先把模板补全<br>接口：为了弥补不能使用继承而存在，可以多重接口，不能包含字段和方法的实现<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd87a20716a.png" alt="image2"></p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>课程环境配置</title>
    <url>/2022/07/21/%E8%AF%BE%E7%A8%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h1><h2 id="JB的toolbox"><a href="#JB的toolbox" class="headerlink" title="JB的toolbox"></a>JB的toolbox</h2><p>直接到官网下载linux的安装包，双击打开就可以了</p>
<h3 id="Android-Stdio"><a href="#Android-Stdio" class="headerlink" title="Android Stdio"></a>Android Stdio</h3><p>所有JB公司的尽量用toolbox装，可以省去很多的bug </p>
<h2 id="Arch上Android-Studio连接手机"><a href="#Arch上Android-Studio连接手机" class="headerlink" title="Arch上Android Studio连接手机"></a>Arch上Android Studio连接手机</h2><p>手机开开发者模式，usb调试，usb安装,通过usb验证应用（不知道要不要开）</p>
<p>查看通过usb连接电脑的设备</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsusb</span><br></pre></td></tr></table></figure>

<p>找到代表自己手机的那一项</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Bus 001 Device 022: ID 2717:ff48 Xiaomi Inc. Mi/Redmi series (MTP + ADB)</span><br></pre></td></tr></table></figure>

<p>注意id后面的 <code>2717：ff48</code></p>
<p>2717代表厂商id,ff48代表设备id</p>
<p>添加配置文件并修改权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/udev/rules.d/51-android.rules</span><br></pre></td></tr></table></figure>

<p>添加如下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SUBSYSTEM==<span class="string">&quot;usb&quot;</span>,ATTRS&#123;idVendor&#125;==<span class="string">&quot;2717&quot;</span>,ATTRS&#123;idProduct&#125;==<span class="string">&quot;ff48&quot;</span>,MODE=<span class="string">&quot;0666&quot;</span></span><br></pre></td></tr></table></figure>

<p>在相应的目录修改权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> a+rx 51-android.rules</span><br></pre></td></tr></table></figure>

<p>手机这时候可以尝试连接了，然后在控制台执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/home/sun/Android/Sdk/platform-tools/adb start-server</span><br></pre></td></tr></table></figure>

<p>执行成功后在android studio的实际设备就可以看到了</p>
<h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><h2 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h2><p>vmware vs virtualbox  virtualbox开源，性能相对少一点，相对没那么稳定，免费，vmware大，要激活码，直接带着版本号搜激活码即可</p>
<p>16版本的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ZF3R0-FHED2-M80TY-8QYGC-NPKYF</span><br><span class="line">YF390-0HF8P-M81RQ-2DXQE-M2UT6</span><br><span class="line">ZF71R-DMX85-08DQY-8YMNC-PPHV8</span><br></pre></td></tr></table></figure>

<p>下载win镜像，32位和64位主要的区别是是否使用超过4g的运行内存</p>
<p><a href="https://msdn.itellyou.cn/">MSDN, 我告诉你 - 做一个安静的工具站</a></p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p><a href="https://blog.csdn.net/weixin_43449246/article/details/115786679?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.queryctrv4&spm=1001.2101.3001.4242.1&utm_relevant_index=3">安装程序无法继续。本程序需要您将此虚拟机上安装的操作系统更新到SP1（虚拟机避坑，已解决）_一粒程序米-CSDN博客_安装程序无法继续,本程序需要您将此虚拟机</a></p>
<p><a href="https://blog.csdn.net/fujian9544/article/details/116864656">Linux之VMware Tools显示灰色正确解决办法_思维小刀-CSDN博客_linux重新安装vmtools灰色</a></p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>ctrl+alt是退出</p>
<h2 id="Virtualbox"><a href="#Virtualbox" class="headerlink" title="Virtualbox"></a>Virtualbox</h2><p>发现在linux下还是virtualbox比较好用按照操作，一步步来，这个挺简单的</p>
<h3 id="几个参数"><a href="#几个参数" class="headerlink" title="几个参数"></a>几个参数</h3><ul>
<li><p>启用PAE&#x2F;NX</p>
<p>PAE即物理地址扩展，扩展32位操作系统的内存地址长度到36位, 以使用4G以上的内存。</p>
<p>NX&#x3D;NoExecute 一种硬件执行数据保护技术, 通过将内存地址标识为’不可执行’, 防止恶意代码及病毒运行</p>
<p>开启PAE&#x2F;NX可充分运用CPU运算潜力，不过并不是所有CPU都支持。主板BIOS里也要打开硬件虚拟化支持。</p>
</li>
<li><p>启用嵌套VT-x</p>
<p>这个用来开多个虚拟机用的</p>
</li>
<li><p>各种界面的开启与关闭</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">右ctrl+home</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/linghao00/article/details/9120371#:~:text=VirtualBox%E8%AE%BE%E6%9C%89%E7%83%AD%E9%94%AE,%E5%B0%B1%E4%BC%9A%E9%87%8D%E6%96%B0%E6%98%BE%E7%A4%BA%E4%BA%86%E3%80%82">让隐藏的virtualBox菜单重新显示_linghao00的专栏-CSDN博客_virtualbox显示菜单栏</a></p>
</li>
</ul>
<h3 id="双向拖拽，共享文件夹的设置"><a href="#双向拖拽，共享文件夹的设置" class="headerlink" title="双向拖拽，共享文件夹的设置"></a>双向拖拽，共享文件夹的设置</h3><p><a href="https://www.modb.pro/db/27033">Oracle VM Virtualbox如何实现双向拖拽、共享剪贴板和共享文件夹</a></p>
<h3 id="拓展virtualbox的盘片"><a href="#拓展virtualbox的盘片" class="headerlink" title="拓展virtualbox的盘片"></a>拓展virtualbox的盘片</h3><p>盘片不够大，在磁盘管理里面选择复制，管理——虚拟磁盘管理，专家模式</p>
<p><img src="/%E8%AF%BE%E7%A8%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.assets/6267deeb575bb.png" alt="Untitled"></p>
<p>动态分配可以调整大小</p>
<p>调整到更高的大小</p>
<p>然后打开windows,按照这上面的磁盘管理来扩大硬盘</p>
<p><a href="https://zhuanlan.zhihu.com/p/64455243">小技巧：Win7系统电脑打开磁盘管理方法</a></p>
<h3 id="安装扩展工具出现的bug"><a href="#安装扩展工具出现的bug" class="headerlink" title="安装扩展工具出现的bug"></a>安装扩展工具出现的bug</h3><p>一开始装电脑的时候就安装，之后安装可能会出现冲突或者其他问题</p>
<p>安装6.1版本的，并且用win7msdn最普通的那个镜像</p>
<p><a href="http://download.virtualbox.org/virtualbox/6.1.0/VBoxGuestAdditions_6.1.0.iso">http://download.virtualbox.org/virtualbox/6.1.0/VBoxGuestAdditions_6.1.0.iso</a></p>
<p><a href="https://forums.virtualbox.org/viewtopic.php?f=2&t=96869">virtualbox.org</a></p>
<h1 id="docker安装和openGauss"><a href="#docker安装和openGauss" class="headerlink" title="docker安装和openGauss"></a>docker安装和openGauss</h1><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p><a href="https://www.modb.pro/db/188693">基于openGauss学习Docker</a></p>
<p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S docker</span><br></pre></td></tr></table></figure>

<p>使用的时候启动docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line">docker ps -a <span class="comment"># 查看安装的容器和使用了的容器</span></span><br><span class="line">dcker start 对应的docker容器的ID</span><br></pre></td></tr></table></figure>

<p>把当前的用户加入docker组，避免使用root帐号工作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker</span><br></pre></td></tr></table></figure>

<p>reboot 重启系统生效</p>
<p>docker常用命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker version   <span class="comment"># 显示版本信息</span></span><br><span class="line">docker info    <span class="comment"># 显示系统信息，包括镜像和容器的数量</span></span><br><span class="line">docker <span class="built_in">command</span> --<span class="built_in">help</span>  </span><br><span class="line"></span><br><span class="line">docker search xxx    <span class="comment"># 找什么镜像</span></span><br><span class="line">docker pull  <span class="comment"># 下载镜像</span></span><br><span class="line">docker images  <span class="comment"># 显示镜像</span></span><br><span class="line">docker rmi -f c3860afd8014 <span class="comment"># 删除镜像</span></span><br><span class="line">docker ps <span class="comment">#列出所有运行的容器 </span></span><br></pre></td></tr></table></figure>

<h2 id="openGauss-安装"><a href="#openGauss-安装" class="headerlink" title="openGauss 安装"></a>openGauss 安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker search opengauss</span><br><span class="line">docker pull enmotech/opengauss  找到并安装</span><br></pre></td></tr></table></figure>

<p>创建opengauss镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name opengauss --privileged=<span class="literal">true</span> -d -e GS_PASSWORD=Enmo@123 -p 15432:5432 enmotech/opengauss:latest</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it opengauss bash  <span class="comment"># 启动opengauss这个镜像</span></span><br><span class="line"> </span><br><span class="line">su - omm  <span class="comment"># 使用omm用户</span></span><br><span class="line"></span><br><span class="line">gsql -d postgres -U gaussdb -W<span class="string">&#x27;Enmo@123&#x27;</span>  <span class="comment">#链接数据库</span></span><br></pre></td></tr></table></figure>

<p>想要退出数据库用</p>
<p>ctrl+D</p>
<h2 id="用datagrip链接数据库"><a href="#用datagrip链接数据库" class="headerlink" title="用datagrip链接数据库"></a>用datagrip链接数据库</h2><p>端口是15432,因为在创建opengauss镜像的时候把 15432 映射到了 5432</p>
<p><img src="/%E8%AF%BE%E7%A8%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.assets/6267def6b5a87.png" alt="Untitled"></p>
<p><img src="/%E8%AF%BE%E7%A8%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.assets/6267defac4ae9.png" alt="Untitled"></p>
<h1 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h1>]]></content>
      <categories>
        <category>ArchLinux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>课程环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代语句与跳转语句</title>
    <url>/2022/07/21/%E8%BF%AD%E4%BB%A3%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%B7%B3%E8%BD%AC%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h1><p>While do for foreach</p>
<h1 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h1><p> break 结束这个循环<br>continue 结束现在这次循环，进入下一次循环 break和continue只会影响自己所在的循环<br>goto return throw<br>跳转语句之return<br>尽早return，让代码读起来更清晰 注意写出来的方法一定要return<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd8736f2785.png" alt="image1"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd873feb9f0.png" alt="image2"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd874c99a66.png" alt="image3"><br>For 对于循环次数确定的循环用for更好<br>注意for语句括号里面三条指令的执行顺序<br>for在括号里面赋值，不要在外面赋值，要不可读性非常地差</p>
<p>Foreach<br>枚举一个集合的元素，并对该集合中的每一个元素执行一次相关的嵌入语句</p>
<h1 id="Ienumerator-迭代器"><a href="#Ienumerator-迭代器" class="headerlink" title="Ienumerator 迭代器"></a>Ienumerator 迭代器</h1><p>指月 手指不是月亮，但是顺着手指的方向能找到月亮</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd87518df10.png" alt="image4"><img src="https://tu.sunning.fit/i/2022/07/12/62cd875754c71.png" alt="image5"><br>此处用do语句比用while语句好，因为省去了一个布尔变量，<br>因为while是先判断，do语句时后判断<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd87606dd46.png" alt="image6"><br>Foreach 的底层原理是集合遍历<br>foreach的最佳应用场合也是对集合进行遍历</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心</title>
    <url>/2022/07/21/%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<h1 id="贪心解体的思路（猜-证明）"><a href="#贪心解体的思路（猜-证明）" class="headerlink" title="贪心解体的思路（猜+证明）"></a>贪心解体的思路（猜+证明）</h1><p>贪心一般没有什么套路，但是可以去试一些做法<br>左端点排序，右端点排序，双关键词排序，哪个做法是可以的话（举几个例子，试一试有没有问题），尝试证明</p>
<p>贪心应该是像这种单峰的图像，每次找到当前最优，最终到全局最优</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267e09f1a42b.jpg" alt="img"></p>
<p>像这种就不能用贪心</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267e0a32a3f7.jpg" alt="img"></p>
<h2 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h2><p>按照左端点&#x2F;右端点&#x2F;中间值进行排序</p>
<p>按照这个参数或者另外的参数（居多）来选东西</p>
<p>多试几次，如果能成，应该就是答案了，接下来就是想办法证明</p>
<h2 id="贪心证明"><a href="#贪心证明" class="headerlink" title="贪心证明"></a>贪心证明</h2><p>想要证明A&#x3D;B,套路证明一定存在A&gt;&#x3D;B，同时A&lt;&#x3D;B</p>
<p>例如：如果是求最小值</p>
<p>假设ans是所有可行方案里面的最小值，cnt是按照自己做的方法的解</p>
<p>证明</p>
<ol>
<li><p>证明用ans求出来的是可行的解</p>
</li>
<li><p>cnt&lt;&#x3D;ans,因为ans是题目的最小值，所以一定存在ans&lt;&#x3D;cnt</p>
</li>
<li><p>证明ans&gt;&#x3D;cnt</p>
</li>
</ol>
<p>有几种证明的方法</p>
<ul>
<li><p>从问题求解的方法去说</p>
</li>
<li><p>反证法<br>假设相反，然后按照题目求解的方法来说明如果要是在有，就和题目的条件不相符合</p>
</li>
<li><p>数学归纳法</p>
<ol>
<li>n&#x3D;1的时候成立，则成立</li>
<li>假设n&#x3D;k-1的时候成立，证明n&#x3D;k的时候成立</li>
</ol>
</li>
<li><p>证明单调性：即每次的局部最优就是全局最优</p>
</li>
<li><p>交换论证法：<br>交换论证法可以更好地代替反证法</p>
<p><img src="https://tu.sunning.fit/i/2022/06/19/62af22ff50b09.png" alt="image-20220619212202622"></p>
</li>
</ul>
<h1 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h1><h2 id="区间选点"><a href="#区间选点" class="headerlink" title="区间选点"></a>区间选点</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e0b1220b1.jpg" alt="img"></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol>
<li>将每个区间从右端点从小到大排序</li>
<li>从前到后枚举每一个区间，如果当前区间已经包含点，直接pass,否则选择当前区间的右端点</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Range &amp;W)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r&lt;W.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;range[i].l&gt;&gt;range[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(range,range+n);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>,ed=<span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(range[i].l&gt;ed)&#123;</span><br><span class="line">            res++;</span><br><span class="line">            ed=range[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>c艹的运算符重载：</p>
<p>运算符重载是c艹重载的一种，重载的运算符是带有特殊名称的函数，函数名是由operator和之后要重载的符号构成的。</p>
<p>返回值  operator 重载的符号 （参数列表）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> Point <span class="keyword">operator</span>+(<span class="type">const</span> Point &amp;point) <span class="type">const</span>&#123;</span><br><span class="line">	<span class="comment">//code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个const意思是返回值是const的变量类型</p>
<p>第二个const意思是可以接收常量参数</p>
<p>第三个const意思是可以被常数参数调用</p>
<p>记住第二个，第三个带上反正不错就好</p>
<p><a href="https://blog.csdn.net/weixin_43734095/article/details/104465307">https://blog.csdn.net/weixin_43734095/article/details/104465307</a></p>
</blockquote>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e0bb349aa.jpg" alt="img"></p>
<p>ans是题目答案，cnt是用这个方法求出来的解</p>
<p>因为ans是答案，所以ans&lt;&#x3D;cnt</p>
<p>证明ans&gt;&#x3D;cnt 按照我们的这种方法，会分出来一段一段互不相交的区间，区间的个数是cnt个，按照要求，每一个区间至少需要一个解，所以cnt&gt;&#x3D;ans</p>
<p>综上，cnt&#x3D;ans</p>
<h2 id="最大不相交区间的数量"><a href="#最大不相交区间的数量" class="headerlink" title="最大不相交区间的数量"></a>最大不相交区间的数量</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e0c565cee.jpg" alt="img"></p>
<h3 id="题解（和上一题几乎一样）"><a href="#题解（和上一题几乎一样）" class="headerlink" title="题解（和上一题几乎一样）"></a>题解（和上一题几乎一样）</h3><ol>
<li>将所有区间的右端点从左向右排序</li>
<li>枚举每个区间，如果区间的左端点不在上一个区间的右端点，则选取这个区间</li>
</ol>
<p>代码和上面一题一模一样</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Range &amp;W)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r&lt;W.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;range[i].l&gt;&gt;range[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(range,range+n);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>,ed=<span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ed&lt;range[i].l)&#123;</span><br><span class="line">            res++;</span><br><span class="line">            ed=range[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h3><p>因为是不相交的，所以一定是可行解</p>
<p>因为ans是答案，所以ans&gt;&#x3D;cnt,</p>
<p>证明ans&lt;&#x3D;cnt 下面用反证法</p>
<p>假设ans&gt;cnt</p>
<p>按照题目中给出的方法，一共有cnt个不相交的区间，对于这cnt个区间里面的小区间，每个大区间只能选择一个小区间，而如果ans&gt;cnt，则说明连续的大区间里面取了超过一个的小区间，与题目条件不符，所以ans&lt;&#x3D;cnt</p>
<h2 id="区间分组"><a href="#区间分组" class="headerlink" title="区间分组"></a>区间分组</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e0ccb5a1a.jpg" alt="img"></p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><ol>
<li>将所有区间按照左端点从小到大排序</li>
<li>从前往后处理每个区间<br>判断能否将其放到某个现有的组中 L[i]&gt;Max_r<ol>
<li>如果不存在这样的组，则开新组，将其放进去</li>
<li>如果存在这样的组，将其放进去，更新当前组的Max_r(如果存在这样的组，随便挑一个放进去)</li>
</ol>
</li>
</ol>
<p>如何快速判断L[i]&gt;Max_r，判断最小的一个Max_r小于L[i]就可以，如何动态维护一个数组的最小值，用小根堆</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (Range &amp;W) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l&lt;W.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">        range[i]=&#123;l,r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(range,range+n);  <span class="comment">//排好序，按照左端点的顺序排序</span></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt; heap;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">auto</span> r=range[i];</span><br><span class="line">        <span class="keyword">if</span>(heap.<span class="built_in">empty</span>() || heap.<span class="built_in">top</span>()&gt;=r.l) heap.<span class="built_in">push</span>(r.r);  <span class="comment">//如果是空的，或者最小的都收不进去，只能再加一个</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            heap.<span class="built_in">pop</span>();   <span class="comment">//把现在最小的合适的那个踢出去</span></span><br><span class="line">            heap.<span class="built_in">push</span>(r.r);  <span class="comment">//把新加入的尾巴放进去 （这时候优先队列会进行相应排序了）</span></span><br><span class="line">            <span class="comment">//优先队列里面存的是每个组的最小值，也就代表着每一个组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,heap.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>C ++中的优先队列是STL中的派生容器，它仅考虑最高优先级元素。队列遵循FIFO策略，而优先队列根据优先级弹出元素，即，优先级最高的元素首先弹出</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e0dcb420a.png" alt="image-20220412221008057"></p>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">和队列基本操作相同:</span><br><span class="line"></span><br><span class="line">top 访问队头元素</span><br><span class="line">empty 队列是否为空</span><br><span class="line">size 返回队列内元素个数</span><br><span class="line">push 插入元素到队尾 (并排序)</span><br><span class="line">emplace 原地构造一个元素并插入队列</span><br><span class="line">pop 弹出队头元素</span><br><span class="line">swap 交换内容</span><br></pre></td></tr></table></figure>

<p>定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">priority_queue&lt;Type, Container, Functional&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Type</strong> 数据类型<br><strong>Container</strong> 必须是用数组实现的容器，比如vector,deque等等，但不能用 list。STL里面默认用的是vector<br><strong>Functional</strong> 比较的方式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//升序队列</span></span><br><span class="line">priority_queue &lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="comment">//降序队列</span></span><br><span class="line">priority_queue &lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,less&lt;<span class="type">int</span>&gt; &gt;q;</span><br><span class="line"></span><br><span class="line"><span class="comment">//greater和less是std实现的两个仿函数（就是使一个类的使用看上去像一个函数。其实现就是类中实现一个operator()，这个类就有了类似函数的行为，就是一个仿函数类了）</span></span><br></pre></td></tr></table></figure>

<p><strong>用自定义类型做优先队列的例子</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tmp1</span> <span class="comment">//运算符重载&lt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">tmp1</span>(<span class="type">int</span> a) &#123;x = a;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> tmp1&amp; a) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; a.x; <span class="comment">//大顶堆</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tmp2</span> <span class="comment">//重写仿函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(tmp1 a, tmp1 b)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x; <span class="comment">//大顶堆</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">tmp1 <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">tmp1 <span class="title">b</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">tmp1 <span class="title">c</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    priority_queue&lt;tmp1&gt; d;</span><br><span class="line">    d.<span class="built_in">push</span>(b);</span><br><span class="line">    d.<span class="built_in">push</span>(c);</span><br><span class="line">    d.<span class="built_in">push</span>(a);</span><br><span class="line">    <span class="keyword">while</span> (!d.<span class="built_in">empty</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; d.<span class="built_in">top</span>().x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        d.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;归纳</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;tmp1, vector&lt;tmp1&gt;, tmp2&gt; f;</span><br><span class="line">    f.<span class="built_in">push</span>(b);</span><br><span class="line">    f.<span class="built_in">push</span>(c);</span><br><span class="line">    f.<span class="built_in">push</span>(a);</span><br><span class="line">    <span class="keyword">while</span> (!f.<span class="built_in">empty</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; f.<span class="built_in">top</span>().x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        f.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="证明-2"><a href="#证明-2" class="headerlink" title="证明"></a>证明</h3><p>ans&lt;&#x3D;cnt  ans&gt;&#x3D;cnt  ans代表的是题目要求的答案，cnt代表的是用这个方法求出来的解</p>
<ol>
<li>按照这个方法一定是合法方案，由题意 ans&gt;cnt</li>
<li>ans&gt;&#x3D;cnt  看cnt-1 的情况，这个时候（数学归纳法）<br><img src="https://tu.sunning.fit/i/2022/04/26/6267e0e53ed4b.jpg" alt="img"></li>
</ol>
<p>当按照这种方法，前面cnt-1都是按照我们的这种方法，对于第cnt项，每个区间都和第cnt项相交，这个时候最少的只能是cnt,所以ans&gt;&#x3D;cnt</p>
<h2 id="区间覆盖"><a href="#区间覆盖" class="headerlink" title="区间覆盖"></a>区间覆盖</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e0e9c223f.jpg" alt="img"></p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><ol>
<li>将所有区间按左端点从小到大排序</li>
<li>从前往后枚举每个区间，在所有能覆盖start的区间中，选择右端点最大的区间然后将start更新成右端点的最大值</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Range &amp;W) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l&lt;W.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> st,ed;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;st,&amp;ed);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        range[i]=&#123;l,r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(range,range+n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> success=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j=i,r=<span class="number">-2e9</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n &amp;&amp; range[j].l&lt;=st)&#123;   <span class="comment">//双指针算法</span></span><br><span class="line">            r=<span class="built_in">max</span>(r,range[j].r);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;st)&#123;</span><br><span class="line">            res=<span class="number">-1</span>;  <span class="comment">//双指针算法的作用在这里，如果r&lt;st说明之后的j都不能满足要求，i就没必要增加成j的大小了，</span></span><br><span class="line">            <span class="comment">//j相当与探路的</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res++;</span><br><span class="line">        <span class="keyword">if</span>(r&gt;=ed)&#123;</span><br><span class="line">            success=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        st=r;</span><br><span class="line">        i=j<span class="number">-1</span>;  <span class="comment">//i=j-1 ,然后执行的是for循环，i++,i就等于j了，然后从下面一个位置开始看大小</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!success) res=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="证明-3"><a href="#证明-3" class="headerlink" title="证明"></a>证明</h3><p>还是，假设ans是题目答案，cnt是按照这个方法得出来的答案<br>因为定义，ans&lt;&#x3D;cnt<br>用反证法证另外一半，假设存在一种选择方法，</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267e0f57fc96.jpg" alt="img"></p>
<p>对比这俩种方案，从前往后找到第一个不一样的区间，因为我们的方法找的是最右侧的值，所以ans此时的最右侧一定是比cnt的最右侧更加右的，所以，把这个不一样的区间从cnt替换成ans一定是可以而且不亏的</p>
<p>所以每一个不一样的线段都可以被替换掉，则ans不可能比cnt小，每一步都是合法替换，所以ans&#x3D;cnt</p>
<p>（好像不用反证法？反正反证法是种思路啦）</p>
<h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><h2 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e106f0dd0.jpg" alt="img"> </p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>是哈夫曼树</p>
<p><img src="https://tu.sunning.fit/i/2022/04/26/6267e112c2eae.jpg" alt="img"></p>
<p>a的高度是3,也就是a在这个过程中被算了3次，所以每次都找小的数进行相加，局部最优解变成总体的最优解，对于这个题，数最小的俩个数一定深度最深可以互为兄弟</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt; heap;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        heap.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> a=heap.<span class="built_in">top</span>();heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> b=heap.<span class="built_in">top</span>();heap.<span class="built_in">pop</span>();</span><br><span class="line">        res+=a+b;</span><br><span class="line">        heap.<span class="built_in">push</span>(a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="证明-4"><a href="#证明-4" class="headerlink" title="证明"></a>证明</h3><ol>
<li>把俩个最小的点合并，一定能得到最优解</li>
</ol>
<p>反证法</p>
<img src="https://tu.sunning.fit/i/2022/04/26/6267e119af137.jpg" alt="img" style="zoom:67%;" />

<p>假设不按照这种方法，f比b小，但是f放的高度却比b小，这是一定可以交换f和b,交换后的结果一定比交换之前小，与题目矛盾，所以不成立。</p>
<ol start="2">
<li>对于每一个都用找到最小的俩个点合并的方法能得到最优解（局部最优解也是全局最优解）</li>
</ol>
<p>假设F(n)是n个点的最小值，F(n-1)是n-1个点的最小值，F(n)&#x3D;F(n-1)+a+b；（a,b是F(n)的最小值），所以对每一个都相当于去掉最小的俩个数之后求剩下的最小值，局部最优也是全局最优</p>
<h1 id="排序不等式"><a href="#排序不等式" class="headerlink" title="排序不等式"></a>排序不等式</h1><h2 id="排队打水"><a href="#排队打水" class="headerlink" title="排队打水"></a>排队打水</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e12399747.jpg" alt="img"></p>
<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><img src="https://tu.sunning.fit/i/2022/04/26/6267e12a5faea.jpg" alt="img" style="zoom: 33%;" />

<p><strong>让用时长的放在后面，用时短的放在前面，按照从小到达的顺序排队，总时间最小</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(t,t+n);</span><br><span class="line">    LL res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d   &quot;</span>,t[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">        res+=t[i]*(n-i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能会保爆int,所以用long long来存</p>
<h3 id="证明-5"><a href="#证明-5" class="headerlink" title="证明"></a>证明</h3><p>反证法，假设最优解不是按照从小到大排序的，</p>
<p>找到第一个不是按照从小到大排序的数，看如果交换完之后会怎么样</p>
<img src="https://tu.sunning.fit/i/2022/04/26/6267e13c59594.jpg" alt="img" style="zoom: 67%;" />



<h1 id="绝对值不等式"><a href="#绝对值不等式" class="headerlink" title="绝对值不等式"></a>绝对值不等式</h1><h2 id="货舱选址"><a href="#货舱选址" class="headerlink" title="货舱选址"></a>货舱选址</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e14133e02.jpg" alt="img"></p>
<h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> t[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(t,t+n);</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        sum+= <span class="built_in">abs</span>(t[i]-t[n/<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="证明-6"><a href="#证明-6" class="headerlink" title="证明"></a>证明</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e145cd472.jpg" alt="img"></p>
<p>一对一对去配，对于每一个对，<img src="https://tu.sunning.fit/i/2022/04/26/6267e1493aa20.jpg" alt="img">当x在xi和x(n-i)之间的时候最小，对于每个对都是这样，所以最小的情况就是当x<br>如果是奇数个，x在中位数的时候最小，如果是偶数个，x在最中间的俩个数之间的任何一个点（包括端点)都可以</p>
<p>（绝对值不等式）</p>
<h1 id="推公式"><a href="#推公式" class="headerlink" title="推公式"></a>推公式</h1><h2 id="耍杂技的牛"><a href="#耍杂技的牛" class="headerlink" title="耍杂技的牛"></a>耍杂技的牛</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><p><img src="https://tu.sunning.fit/i/2022/04/26/6267e14e3c0de.jpg" alt="img"></p>
<h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line">PII cow[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> w,s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;w,&amp;s);</span><br><span class="line">        cow[i]=&#123;w+s,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(cow,cow+n);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">-2e9</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> w=cow[i].second;</span><br><span class="line">        <span class="type">int</span> s=cow[i].first-w;</span><br><span class="line">        res=<span class="built_in">max</span>(res,sum-s);</span><br><span class="line">        sum+=w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>证明<br><img src="https://tu.sunning.fit/i/2022/04/26/6267e13c59594.jpg" alt="img"><br>贪心得到的答案&gt;&#x3D;最优解<br>贪心得到的答案&lt;&#x3D;最优解</p>
<p>算按照这种方法和不按这种方法的区别</p>
<img src="https://tu.sunning.fit/i/2022/04/26/6267e1604d923.jpg" alt="img"  />

<p>加减变化之后</p>
<img src="https://tu.sunning.fit/i/2022/04/26/6267e16474f28.jpg" alt="img" style="zoom:80%;" />

<p>所以贪心得到的答案一定是小于等于最优解的</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>选择语句</title>
    <url>/2022/07/21/%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="Try-语句"><a href="#Try-语句" class="headerlink" title="Try 语句"></a>Try 语句</h1><p>try语句提供一种机制，用于捕捉在块的执行期间发生的各种异常。此外，还能让您指定一个代码块，并保证当控制离开try语句时，总是先执行该代码</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd87ac61ec9.png" alt="image1"></p>
<h1 id="块语句"><a href="#块语句" class="headerlink" title="块语句"></a>块语句</h1><p>当一条语句不能执行完要去的时候，用块语句（就是大括号）但是是方法里面的大括号，不是类里面的也不是名称空间里面的，计算机会把它识别为一条语句，块语句后面不用跟着分号结尾<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd87b03088c.png" alt="image2"><br>这个程序里面只有最中间的括号是块语句<br>Switch 语句后面必须跟精准的某个值和if的使用合适程度不一样<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd87b944334.png" alt="image3"></p>
<p>但是int a b 都在语句块的里面，外面就无法访问了，所以在语句块外面设置变量，在语句块里面进行赋值<br>Int a<br>Int b 再在语句块的里面去赋值<br>对于不确定的式子，推荐用try</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd87bec80bd.png" alt="image4"></p>
<h1 id="If-语句"><a href="#If-语句" class="headerlink" title="If 语句"></a>If 语句</h1><p>代码优化也叫代码重构，常常用边界值去检测，以及超出最大值和最小值的时候<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd87d6d8f75.png" alt="image5"></p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd87da6be9b.png" alt="image6"><br>下面的代码是上面代码的重构，优化的地方在于把重复判断的地方去掉了，但是这样子当式子一多可读性就会变差，所以多条件的时候用else if 是更好的选择<br><img src="https://tu.sunning.fit/i/2022/07/12/62cd87de9efd9.png" alt="image7"><br><img src="https://tu.sunning.fit/i/2022/07/12/62cd87e9d499a.png" alt="image8"><br><img src="https://tu.sunning.fit/i/2022/07/12/62cd87e699149.png" alt="image9"><br>这个东西可以用条件运算符合并<br>String str&#x3D;new.empty;<br>Str&#x3D;(x&gt;&#x3D;60)?”Pass”:”Failed”;</p>
<p>还可以升级成 string str&#x3D;(x&gt;&#x3D;60)?”Pass”:”Failed” (因为可以自动类型转换)</p>
<p><img src="https://tu.sunning.fit/i/2022/07/12/62cd87f1a885c.png" alt="image10"></p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
</search>
